
test_dw1000.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007be0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000052c  08007cf0  08007cf0  00008cf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800821c  0800821c  0000a1e4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800821c  0800821c  0000921c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008224  08008224  0000a1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008224  08008224  00009224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008228  08008228  00009228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  0800822c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003bc  200001e4  08008410  0000a1e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005a0  08008410  0000a5a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011528  00000000  00000000  0000a20d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034ad  00000000  00000000  0001b735  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001248  00000000  00000000  0001ebe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000de4  00000000  00000000  0001fe30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000524d  00000000  00000000  00020c14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000174bb  00000000  00000000  00025e61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091d52  00000000  00000000  0003d31c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cf06e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000587c  00000000  00000000  000cf0b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000d4930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 00000156  00000000  00000000  000d4998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	08007cd8 	.word	0x08007cd8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	08007cd8 	.word	0x08007cd8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b088      	sub	sp, #32
 8000a8c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8e:	f107 0310 	add.w	r3, r7, #16
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a9c:	4b3e      	ldr	r3, [pc, #248]	@ (8000b98 <MX_GPIO_Init+0x110>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	4a3d      	ldr	r2, [pc, #244]	@ (8000b98 <MX_GPIO_Init+0x110>)
 8000aa2:	f043 0320 	orr.w	r3, r3, #32
 8000aa6:	6193      	str	r3, [r2, #24]
 8000aa8:	4b3b      	ldr	r3, [pc, #236]	@ (8000b98 <MX_GPIO_Init+0x110>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	f003 0320 	and.w	r3, r3, #32
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab4:	4b38      	ldr	r3, [pc, #224]	@ (8000b98 <MX_GPIO_Init+0x110>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	4a37      	ldr	r2, [pc, #220]	@ (8000b98 <MX_GPIO_Init+0x110>)
 8000aba:	f043 0304 	orr.w	r3, r3, #4
 8000abe:	6193      	str	r3, [r2, #24]
 8000ac0:	4b35      	ldr	r3, [pc, #212]	@ (8000b98 <MX_GPIO_Init+0x110>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	f003 0304 	and.w	r3, r3, #4
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000acc:	4b32      	ldr	r3, [pc, #200]	@ (8000b98 <MX_GPIO_Init+0x110>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	4a31      	ldr	r2, [pc, #196]	@ (8000b98 <MX_GPIO_Init+0x110>)
 8000ad2:	f043 0308 	orr.w	r3, r3, #8
 8000ad6:	6193      	str	r3, [r2, #24]
 8000ad8:	4b2f      	ldr	r3, [pc, #188]	@ (8000b98 <MX_GPIO_Init+0x110>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	f003 0308 	and.w	r3, r3, #8
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_2_Pin|LED_1_Pin, GPIO_PIN_RESET);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	2106      	movs	r1, #6
 8000ae8:	482c      	ldr	r0, [pc, #176]	@ (8000b9c <MX_GPIO_Init+0x114>)
 8000aea:	f001 f86e 	bl	8001bca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET);
 8000aee:	2201      	movs	r2, #1
 8000af0:	2110      	movs	r1, #16
 8000af2:	482a      	ldr	r0, [pc, #168]	@ (8000b9c <MX_GPIO_Init+0x114>)
 8000af4:	f001 f869 	bl	8001bca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DW_WUP_GPIO_Port, DW_WUP_Pin, GPIO_PIN_SET);
 8000af8:	2201      	movs	r2, #1
 8000afa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000afe:	4828      	ldr	r0, [pc, #160]	@ (8000ba0 <MX_GPIO_Init+0x118>)
 8000b00:	f001 f863 	bl	8001bca <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_2_Pin LED_1_Pin DW_NSS_Pin */
  GPIO_InitStruct.Pin = LED_2_Pin|LED_1_Pin|DW_NSS_Pin;
 8000b04:	2316      	movs	r3, #22
 8000b06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b10:	2303      	movs	r3, #3
 8000b12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b14:	f107 0310 	add.w	r3, r7, #16
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4820      	ldr	r0, [pc, #128]	@ (8000b9c <MX_GPIO_Init+0x114>)
 8000b1c:	f000 feba 	bl	8001894 <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_IRQn_Pin */
  GPIO_InitStruct.Pin = DW_IRQn_Pin;
 8000b20:	2301      	movs	r3, #1
 8000b22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b24:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba4 <MX_GPIO_Init+0x11c>)
 8000b26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DW_IRQn_GPIO_Port, &GPIO_InitStruct);
 8000b2c:	f107 0310 	add.w	r3, r7, #16
 8000b30:	4619      	mov	r1, r3
 8000b32:	481b      	ldr	r0, [pc, #108]	@ (8000ba0 <MX_GPIO_Init+0x118>)
 8000b34:	f000 feae 	bl	8001894 <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_RST_Pin */
  GPIO_InitStruct.Pin = DW_RST_Pin;
 8000b38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b3e:	4b19      	ldr	r3, [pc, #100]	@ (8000ba4 <MX_GPIO_Init+0x11c>)
 8000b40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 8000b46:	f107 0310 	add.w	r3, r7, #16
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4814      	ldr	r0, [pc, #80]	@ (8000ba0 <MX_GPIO_Init+0x118>)
 8000b4e:	f000 fea1 	bl	8001894 <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_WUP_Pin */
  GPIO_InitStruct.Pin = DW_WUP_Pin;
 8000b52:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000b58:	2311      	movs	r3, #17
 8000b5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b60:	2303      	movs	r3, #3
 8000b62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DW_WUP_GPIO_Port, &GPIO_InitStruct);
 8000b64:	f107 0310 	add.w	r3, r7, #16
 8000b68:	4619      	mov	r1, r3
 8000b6a:	480d      	ldr	r0, [pc, #52]	@ (8000ba0 <MX_GPIO_Init+0x118>)
 8000b6c:	f000 fe92 	bl	8001894 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 3, 0);
 8000b70:	2200      	movs	r2, #0
 8000b72:	2103      	movs	r1, #3
 8000b74:	2006      	movs	r0, #6
 8000b76:	f000 fd96 	bl	80016a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b7a:	2006      	movs	r0, #6
 8000b7c:	f000 fdaf 	bl	80016de <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 4, 0);
 8000b80:	2200      	movs	r2, #0
 8000b82:	2104      	movs	r1, #4
 8000b84:	2028      	movs	r0, #40	@ 0x28
 8000b86:	f000 fd8e 	bl	80016a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b8a:	2028      	movs	r0, #40	@ 0x28
 8000b8c:	f000 fda7 	bl	80016de <HAL_NVIC_EnableIRQ>

}
 8000b90:	bf00      	nop
 8000b92:	3720      	adds	r7, #32
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40021000 	.word	0x40021000
 8000b9c:	40010800 	.word	0x40010800
 8000ba0:	40010c00 	.word	0x40010c00
 8000ba4:	10110000 	.word	0x10110000

08000ba8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bac:	4b12      	ldr	r3, [pc, #72]	@ (8000bf8 <MX_I2C1_Init+0x50>)
 8000bae:	4a13      	ldr	r2, [pc, #76]	@ (8000bfc <MX_I2C1_Init+0x54>)
 8000bb0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000bb2:	4b11      	ldr	r3, [pc, #68]	@ (8000bf8 <MX_I2C1_Init+0x50>)
 8000bb4:	4a12      	ldr	r2, [pc, #72]	@ (8000c00 <MX_I2C1_Init+0x58>)
 8000bb6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bb8:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf8 <MX_I2C1_Init+0x50>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf8 <MX_I2C1_Init+0x50>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf8 <MX_I2C1_Init+0x50>)
 8000bc6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000bca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bcc:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf8 <MX_I2C1_Init+0x50>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000bd2:	4b09      	ldr	r3, [pc, #36]	@ (8000bf8 <MX_I2C1_Init+0x50>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bd8:	4b07      	ldr	r3, [pc, #28]	@ (8000bf8 <MX_I2C1_Init+0x50>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bde:	4b06      	ldr	r3, [pc, #24]	@ (8000bf8 <MX_I2C1_Init+0x50>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000be4:	4804      	ldr	r0, [pc, #16]	@ (8000bf8 <MX_I2C1_Init+0x50>)
 8000be6:	f001 f821 	bl	8001c2c <HAL_I2C_Init>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000bf0:	f000 f96e 	bl	8000ed0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000200 	.word	0x20000200
 8000bfc:	40005400 	.word	0x40005400
 8000c00:	000186a0 	.word	0x000186a0

08000c04 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b088      	sub	sp, #32
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	f107 0310 	add.w	r3, r7, #16
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a15      	ldr	r2, [pc, #84]	@ (8000c74 <HAL_I2C_MspInit+0x70>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d123      	bne.n	8000c6c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c24:	4b14      	ldr	r3, [pc, #80]	@ (8000c78 <HAL_I2C_MspInit+0x74>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	4a13      	ldr	r2, [pc, #76]	@ (8000c78 <HAL_I2C_MspInit+0x74>)
 8000c2a:	f043 0308 	orr.w	r3, r3, #8
 8000c2e:	6193      	str	r3, [r2, #24]
 8000c30:	4b11      	ldr	r3, [pc, #68]	@ (8000c78 <HAL_I2C_MspInit+0x74>)
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	f003 0308 	and.w	r3, r3, #8
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c3c:	23c0      	movs	r3, #192	@ 0xc0
 8000c3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c40:	2312      	movs	r3, #18
 8000c42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c44:	2303      	movs	r3, #3
 8000c46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c48:	f107 0310 	add.w	r3, r7, #16
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	480b      	ldr	r0, [pc, #44]	@ (8000c7c <HAL_I2C_MspInit+0x78>)
 8000c50:	f000 fe20 	bl	8001894 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c54:	4b08      	ldr	r3, [pc, #32]	@ (8000c78 <HAL_I2C_MspInit+0x74>)
 8000c56:	69db      	ldr	r3, [r3, #28]
 8000c58:	4a07      	ldr	r2, [pc, #28]	@ (8000c78 <HAL_I2C_MspInit+0x74>)
 8000c5a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c5e:	61d3      	str	r3, [r2, #28]
 8000c60:	4b05      	ldr	r3, [pc, #20]	@ (8000c78 <HAL_I2C_MspInit+0x74>)
 8000c62:	69db      	ldr	r3, [r3, #28]
 8000c64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c68:	60bb      	str	r3, [r7, #8]
 8000c6a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c6c:	bf00      	nop
 8000c6e:	3720      	adds	r7, #32
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40005400 	.word	0x40005400
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	40010c00 	.word	0x40010c00

08000c80 <LCD_SendInternal>:

#define LCD_DELAY_MS 5

HAL_StatusTypeDef
LCD_SendInternal(uint8_t lcd_addr, uint8_t data,
                 uint8_t flags) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b086      	sub	sp, #24
 8000c84:	af02      	add	r7, sp, #8
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	71bb      	strb	r3, [r7, #6]
 8000c8e:	4613      	mov	r3, r2
 8000c90:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef res;
    for (;;) {
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1,
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	b299      	uxth	r1, r3
 8000c96:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	4822      	ldr	r0, [pc, #136]	@ (8000d28 <LCD_SendInternal+0xa8>)
 8000c9e:	f001 fa07 	bl	80020b0 <HAL_I2C_IsDeviceReady>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	73fb      	strb	r3, [r7, #15]
                                    HAL_MAX_DELAY);
        if (res == HAL_OK)
 8000ca6:	7bfb      	ldrb	r3, [r7, #15]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d000      	beq.n	8000cae <LCD_SendInternal+0x2e>
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1,
 8000cac:	e7f1      	b.n	8000c92 <LCD_SendInternal+0x12>
            break;
 8000cae:	bf00      	nop
    }

    uint8_t up = data & 0xF0;
 8000cb0:	79bb      	ldrb	r3, [r7, #6]
 8000cb2:	f023 030f 	bic.w	r3, r3, #15
 8000cb6:	73bb      	strb	r3, [r7, #14]
    uint8_t lo = (data << 4) & 0xF0;
 8000cb8:	79bb      	ldrb	r3, [r7, #6]
 8000cba:	011b      	lsls	r3, r3, #4
 8000cbc:	737b      	strb	r3, [r7, #13]

    uint8_t data_arr[4];
    data_arr[0] = up | flags | BACKLIGHT | PIN_EN;
 8000cbe:	7bba      	ldrb	r2, [r7, #14]
 8000cc0:	797b      	ldrb	r3, [r7, #5]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	f043 030c 	orr.w	r3, r3, #12
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	723b      	strb	r3, [r7, #8]
    data_arr[1] = up | flags | BACKLIGHT;
 8000cce:	7bba      	ldrb	r2, [r7, #14]
 8000cd0:	797b      	ldrb	r3, [r7, #5]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	f043 0308 	orr.w	r3, r3, #8
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	727b      	strb	r3, [r7, #9]
    data_arr[2] = lo | flags | BACKLIGHT | PIN_EN;
 8000cde:	7b7a      	ldrb	r2, [r7, #13]
 8000ce0:	797b      	ldrb	r3, [r7, #5]
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	f043 030c 	orr.w	r3, r3, #12
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	72bb      	strb	r3, [r7, #10]
    data_arr[3] = lo | flags | BACKLIGHT;
 8000cee:	7b7a      	ldrb	r2, [r7, #13]
 8000cf0:	797b      	ldrb	r3, [r7, #5]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	f043 0308 	orr.w	r3, r3, #8
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	72fb      	strb	r3, [r7, #11]

    res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr,
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	b299      	uxth	r1, r3
 8000d02:	f107 0208 	add.w	r2, r7, #8
 8000d06:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0a:	9300      	str	r3, [sp, #0]
 8000d0c:	2304      	movs	r3, #4
 8000d0e:	4806      	ldr	r0, [pc, #24]	@ (8000d28 <LCD_SendInternal+0xa8>)
 8000d10:	f001 f8d0 	bl	8001eb4 <HAL_I2C_Master_Transmit>
 8000d14:	4603      	mov	r3, r0
 8000d16:	73fb      	strb	r3, [r7, #15]
                                  sizeof(data_arr), HAL_MAX_DELAY);
    HAL_Delay(LCD_DELAY_MS);
 8000d18:	2005      	movs	r0, #5
 8000d1a:	f000 fba5 	bl	8001468 <HAL_Delay>
    return res;
 8000d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3710      	adds	r7, #16
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000200 	.word	0x20000200

08000d2c <LCD_SendCommand>:

void
LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	460a      	mov	r2, r1
 8000d36:	71fb      	strb	r3, [r7, #7]
 8000d38:	4613      	mov	r3, r2
 8000d3a:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, cmd, 0);
 8000d3c:	79b9      	ldrb	r1, [r7, #6]
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
 8000d40:	2200      	movs	r2, #0
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff ff9c 	bl	8000c80 <LCD_SendInternal>
}
 8000d48:	bf00      	nop
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <LCD_SendData>:

void
LCD_SendData(uint8_t lcd_addr, uint8_t data) {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	460a      	mov	r2, r1
 8000d5a:	71fb      	strb	r3, [r7, #7]
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, data, PIN_RS);
 8000d60:	79b9      	ldrb	r1, [r7, #6]
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	2201      	movs	r2, #1
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff ff8a 	bl	8000c80 <LCD_SendInternal>
}
 8000d6c:	bf00      	nop
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <LCD_Init>:

void
LCD_Init(uint8_t lcd_addr) {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	71fb      	strb	r3, [r7, #7]
    // 4-bit mode, 2 lines, 5x7 format
    LCD_SendCommand(lcd_addr, 0b00110000);
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	2130      	movs	r1, #48	@ 0x30
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff ffd2 	bl	8000d2c <LCD_SendCommand>
    // display & cursor home (keep this!)
    LCD_SendCommand(lcd_addr, 0b00000010);
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	2102      	movs	r1, #2
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff ffcd 	bl	8000d2c <LCD_SendCommand>
    // display on, right shift, underline off, blink off
    LCD_SendCommand(lcd_addr, 0b00001100);
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	210c      	movs	r1, #12
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff ffc8 	bl	8000d2c <LCD_SendCommand>
    // clear display (optional here)
    LCD_SendCommand(lcd_addr, 0b00000001);
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	2101      	movs	r1, #1
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff ffc3 	bl	8000d2c <LCD_SendCommand>
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <LCD_SendString>:

void
LCD_SendString(uint8_t lcd_addr, char* str) {
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b082      	sub	sp, #8
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	4603      	mov	r3, r0
 8000db6:	6039      	str	r1, [r7, #0]
 8000db8:	71fb      	strb	r3, [r7, #7]
    while (*str) {
 8000dba:	e009      	b.n	8000dd0 <LCD_SendString+0x22>
        LCD_SendData(lcd_addr, (uint8_t)(*str));
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	781a      	ldrb	r2, [r3, #0]
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	4611      	mov	r1, r2
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ffc3 	bl	8000d50 <LCD_SendData>
        str++;
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	603b      	str	r3, [r7, #0]
    while (*str) {
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d1f1      	bne.n	8000dbc <LCD_SendString+0xe>
    }
}
 8000dd8:	bf00      	nop
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
	...

08000de4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int
main(void) {
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000de8:	f000 fadc 	bl	80013a4 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8000dec:	f000 f82a 	bl	8000e44 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000df0:	f7ff fe4a 	bl	8000a88 <MX_GPIO_Init>
    MX_SPI1_Init();
 8000df4:	f000 f872 	bl	8000edc <MX_SPI1_Init>
    MX_USART1_UART_Init();
 8000df8:	f000 fa30 	bl	800125c <MX_USART1_UART_Init>
    MX_I2C1_Init();
 8000dfc:	f7ff fed4 	bl	8000ba8 <MX_I2C1_Init>
    /* USER CODE BEGIN 2 */

    setup_DW1000RSTnIRQ(0);
 8000e00:	2000      	movs	r0, #0
 8000e02:	f004 f8bd 	bl	8004f80 <setup_DW1000RSTnIRQ>

    terminal_init();
 8000e06:	f004 faa5 	bl	8005354 <terminal_init>

    initialise_dw1000();
 8000e0a:	f004 f959 	bl	80050c0 <initialise_dw1000>
    configure_dw1000();
 8000e0e:	f004 f971 	bl	80050f4 <configure_dw1000>

    LCD_Init(LCD_ADDR);
 8000e12:	204e      	movs	r0, #78	@ 0x4e
 8000e14:	f7ff ffae 	bl	8000d74 <LCD_Init>

    // set address to 0x00
    LCD_SendCommand(LCD_ADDR, 0b10000000);
 8000e18:	2180      	movs	r1, #128	@ 0x80
 8000e1a:	204e      	movs	r0, #78	@ 0x4e
 8000e1c:	f7ff ff86 	bl	8000d2c <LCD_SendCommand>
    LCD_SendString(LCD_ADDR, " Using 1602 LCD");
 8000e20:	4906      	ldr	r1, [pc, #24]	@ (8000e3c <main+0x58>)
 8000e22:	204e      	movs	r0, #78	@ 0x4e
 8000e24:	f7ff ffc3 	bl	8000dae <LCD_SendString>

    // set address to 0x40
    LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000e28:	21c0      	movs	r1, #192	@ 0xc0
 8000e2a:	204e      	movs	r0, #78	@ 0x4e
 8000e2c:	f7ff ff7e 	bl	8000d2c <LCD_SendCommand>
    LCD_SendString(LCD_ADDR, "  over I2C bus");
 8000e30:	4903      	ldr	r1, [pc, #12]	@ (8000e40 <main+0x5c>)
 8000e32:	204e      	movs	r0, #78	@ 0x4e
 8000e34:	f7ff ffbb 	bl	8000dae <LCD_SendString>
    //
    // i2c_lcd1602_write_string("TEst 2");
    // i2c_lcd1602_clear();
    // i2c_lcd1602_write_string("TeST 3");

    while (1) {};
 8000e38:	bf00      	nop
 8000e3a:	e7fd      	b.n	8000e38 <main+0x54>
 8000e3c:	08007cf0 	.word	0x08007cf0
 8000e40:	08007d00 	.word	0x08007d00

08000e44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void
SystemClock_Config(void) {
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b090      	sub	sp, #64	@ 0x40
 8000e48:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e4a:	f107 0318 	add.w	r3, r7, #24
 8000e4e:	2228      	movs	r2, #40	@ 0x28
 8000e50:	2100      	movs	r1, #0
 8000e52:	4618      	mov	r0, r3
 8000e54:	f005 f811 	bl	8005e7a <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e58:	1d3b      	adds	r3, r7, #4
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	605a      	str	r2, [r3, #4]
 8000e60:	609a      	str	r2, [r3, #8]
 8000e62:	60da      	str	r2, [r3, #12]
 8000e64:	611a      	str	r2, [r3, #16]

    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e66:	2301      	movs	r3, #1
 8000e68:	61bb      	str	r3, [r7, #24]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e6a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e6e:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000e70:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e74:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e76:	2301      	movs	r3, #1
 8000e78:	62bb      	str	r3, [r7, #40]	@ 0x28
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e7e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e82:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e84:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000e88:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000e8a:	f107 0318 	add.w	r3, r7, #24
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f001 fc96 	bl	80027c0 <HAL_RCC_OscConfig>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <SystemClock_Config+0x5a>
        Error_Handler();
 8000e9a:	f000 f819 	bl	8000ed0 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000e9e:	230f      	movs	r3, #15
 8000ea0:	607b      	str	r3, [r7, #4]
                                  | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000eaa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000eae:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000eb4:	1d3b      	adds	r3, r7, #4
 8000eb6:	2102      	movs	r1, #2
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f001 ff03 	bl	8002cc4 <HAL_RCC_ClockConfig>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <SystemClock_Config+0x84>
        Error_Handler();
 8000ec4:	f000 f804 	bl	8000ed0 <Error_Handler>
    }
}
 8000ec8:	bf00      	nop
 8000eca:	3740      	adds	r7, #64	@ 0x40
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void
Error_Handler(void) {
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed4:	b672      	cpsid	i
}
 8000ed6:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {}
 8000ed8:	bf00      	nop
 8000eda:	e7fd      	b.n	8000ed8 <Error_Handler+0x8>

08000edc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000ee0:	4b17      	ldr	r3, [pc, #92]	@ (8000f40 <MX_SPI1_Init+0x64>)
 8000ee2:	4a18      	ldr	r2, [pc, #96]	@ (8000f44 <MX_SPI1_Init+0x68>)
 8000ee4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ee6:	4b16      	ldr	r3, [pc, #88]	@ (8000f40 <MX_SPI1_Init+0x64>)
 8000ee8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000eec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000eee:	4b14      	ldr	r3, [pc, #80]	@ (8000f40 <MX_SPI1_Init+0x64>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ef4:	4b12      	ldr	r3, [pc, #72]	@ (8000f40 <MX_SPI1_Init+0x64>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000efa:	4b11      	ldr	r3, [pc, #68]	@ (8000f40 <MX_SPI1_Init+0x64>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f00:	4b0f      	ldr	r3, [pc, #60]	@ (8000f40 <MX_SPI1_Init+0x64>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f06:	4b0e      	ldr	r3, [pc, #56]	@ (8000f40 <MX_SPI1_Init+0x64>)
 8000f08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f0c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000f0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f40 <MX_SPI1_Init+0x64>)
 8000f10:	2220      	movs	r2, #32
 8000f12:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f14:	4b0a      	ldr	r3, [pc, #40]	@ (8000f40 <MX_SPI1_Init+0x64>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f1a:	4b09      	ldr	r3, [pc, #36]	@ (8000f40 <MX_SPI1_Init+0x64>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f20:	4b07      	ldr	r3, [pc, #28]	@ (8000f40 <MX_SPI1_Init+0x64>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f26:	4b06      	ldr	r3, [pc, #24]	@ (8000f40 <MX_SPI1_Init+0x64>)
 8000f28:	220a      	movs	r2, #10
 8000f2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f2c:	4804      	ldr	r0, [pc, #16]	@ (8000f40 <MX_SPI1_Init+0x64>)
 8000f2e:	f002 f859 	bl	8002fe4 <HAL_SPI_Init>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f38:	f7ff ffca 	bl	8000ed0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f3c:	bf00      	nop
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000254 	.word	0x20000254
 8000f44:	40013000 	.word	0x40013000

08000f48 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b088      	sub	sp, #32
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f50:	f107 0310 	add.w	r3, r7, #16
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a1b      	ldr	r2, [pc, #108]	@ (8000fd0 <HAL_SPI_MspInit+0x88>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d12f      	bne.n	8000fc8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f68:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd4 <HAL_SPI_MspInit+0x8c>)
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	4a19      	ldr	r2, [pc, #100]	@ (8000fd4 <HAL_SPI_MspInit+0x8c>)
 8000f6e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f72:	6193      	str	r3, [r2, #24]
 8000f74:	4b17      	ldr	r3, [pc, #92]	@ (8000fd4 <HAL_SPI_MspInit+0x8c>)
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f80:	4b14      	ldr	r3, [pc, #80]	@ (8000fd4 <HAL_SPI_MspInit+0x8c>)
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	4a13      	ldr	r2, [pc, #76]	@ (8000fd4 <HAL_SPI_MspInit+0x8c>)
 8000f86:	f043 0304 	orr.w	r3, r3, #4
 8000f8a:	6193      	str	r3, [r2, #24]
 8000f8c:	4b11      	ldr	r3, [pc, #68]	@ (8000fd4 <HAL_SPI_MspInit+0x8c>)
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	f003 0304 	and.w	r3, r3, #4
 8000f94:	60bb      	str	r3, [r7, #8]
 8000f96:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = DW_SCK_Pin|DW_MOSI_Pin;
 8000f98:	23a0      	movs	r3, #160	@ 0xa0
 8000f9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa4:	f107 0310 	add.w	r3, r7, #16
 8000fa8:	4619      	mov	r1, r3
 8000faa:	480b      	ldr	r0, [pc, #44]	@ (8000fd8 <HAL_SPI_MspInit+0x90>)
 8000fac:	f000 fc72 	bl	8001894 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DW_MISO_Pin;
 8000fb0:	2340      	movs	r3, #64	@ 0x40
 8000fb2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(DW_MISO_GPIO_Port, &GPIO_InitStruct);
 8000fbc:	f107 0310 	add.w	r3, r7, #16
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4805      	ldr	r0, [pc, #20]	@ (8000fd8 <HAL_SPI_MspInit+0x90>)
 8000fc4:	f000 fc66 	bl	8001894 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000fc8:	bf00      	nop
 8000fca:	3720      	adds	r7, #32
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40013000 	.word	0x40013000
 8000fd4:	40021000 	.word	0x40021000
 8000fd8:	40010800 	.word	0x40010800

08000fdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fe2:	4b15      	ldr	r3, [pc, #84]	@ (8001038 <HAL_MspInit+0x5c>)
 8000fe4:	699b      	ldr	r3, [r3, #24]
 8000fe6:	4a14      	ldr	r2, [pc, #80]	@ (8001038 <HAL_MspInit+0x5c>)
 8000fe8:	f043 0301 	orr.w	r3, r3, #1
 8000fec:	6193      	str	r3, [r2, #24]
 8000fee:	4b12      	ldr	r3, [pc, #72]	@ (8001038 <HAL_MspInit+0x5c>)
 8000ff0:	699b      	ldr	r3, [r3, #24]
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	60bb      	str	r3, [r7, #8]
 8000ff8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ffa:	4b0f      	ldr	r3, [pc, #60]	@ (8001038 <HAL_MspInit+0x5c>)
 8000ffc:	69db      	ldr	r3, [r3, #28]
 8000ffe:	4a0e      	ldr	r2, [pc, #56]	@ (8001038 <HAL_MspInit+0x5c>)
 8001000:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001004:	61d3      	str	r3, [r2, #28]
 8001006:	4b0c      	ldr	r3, [pc, #48]	@ (8001038 <HAL_MspInit+0x5c>)
 8001008:	69db      	ldr	r3, [r3, #28]
 800100a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800100e:	607b      	str	r3, [r7, #4]
 8001010:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001012:	4b0a      	ldr	r3, [pc, #40]	@ (800103c <HAL_MspInit+0x60>)
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	4a04      	ldr	r2, [pc, #16]	@ (800103c <HAL_MspInit+0x60>)
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800102e:	bf00      	nop
 8001030:	3714      	adds	r7, #20
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr
 8001038:	40021000 	.word	0x40021000
 800103c:	40010000 	.word	0x40010000

08001040 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001044:	bf00      	nop
 8001046:	e7fd      	b.n	8001044 <NMI_Handler+0x4>

08001048 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800104c:	bf00      	nop
 800104e:	e7fd      	b.n	800104c <HardFault_Handler+0x4>

08001050 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001054:	bf00      	nop
 8001056:	e7fd      	b.n	8001054 <MemManage_Handler+0x4>

08001058 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800105c:	bf00      	nop
 800105e:	e7fd      	b.n	800105c <BusFault_Handler+0x4>

08001060 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001064:	bf00      	nop
 8001066:	e7fd      	b.n	8001064 <UsageFault_Handler+0x4>

08001068 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr

08001074 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr

08001080 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	bc80      	pop	{r7}
 800108a:	4770      	bx	lr

0800108c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001090:	f000 f9ce 	bl	8001430 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001094:	bf00      	nop
 8001096:	bd80      	pop	{r7, pc}

08001098 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DW_IRQn_Pin);
 800109c:	2001      	movs	r0, #1
 800109e:	f000 fdad 	bl	8001bfc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80010ac:	4802      	ldr	r0, [pc, #8]	@ (80010b8 <USART1_IRQHandler+0x10>)
 80010ae:	f002 fb03 	bl	80036b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	200002b0 	.word	0x200002b0

080010bc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DW_RST_Pin);
 80010c0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80010c4:	f000 fd9a 	bl	8001bfc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}

080010cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  return 1;
 80010d0:	2301      	movs	r3, #1
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bc80      	pop	{r7}
 80010d8:	4770      	bx	lr

080010da <_kill>:

int _kill(int pid, int sig)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b082      	sub	sp, #8
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
 80010e2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80010e4:	f004 ff1c 	bl	8005f20 <__errno>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2216      	movs	r2, #22
 80010ec:	601a      	str	r2, [r3, #0]
  return -1;
 80010ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <_exit>:

void _exit (int status)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b082      	sub	sp, #8
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001102:	f04f 31ff 	mov.w	r1, #4294967295
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f7ff ffe7 	bl	80010da <_kill>
  while (1) {}    /* Make sure we hang here */
 800110c:	bf00      	nop
 800110e:	e7fd      	b.n	800110c <_exit+0x12>

08001110 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]
 8001120:	e00a      	b.n	8001138 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001122:	f3af 8000 	nop.w
 8001126:	4601      	mov	r1, r0
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	1c5a      	adds	r2, r3, #1
 800112c:	60ba      	str	r2, [r7, #8]
 800112e:	b2ca      	uxtb	r2, r1
 8001130:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	3301      	adds	r3, #1
 8001136:	617b      	str	r3, [r7, #20]
 8001138:	697a      	ldr	r2, [r7, #20]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	429a      	cmp	r2, r3
 800113e:	dbf0      	blt.n	8001122 <_read+0x12>
  }

  return len;
 8001140:	687b      	ldr	r3, [r7, #4]
}
 8001142:	4618      	mov	r0, r3
 8001144:	3718      	adds	r7, #24
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b086      	sub	sp, #24
 800114e:	af00      	add	r7, sp, #0
 8001150:	60f8      	str	r0, [r7, #12]
 8001152:	60b9      	str	r1, [r7, #8]
 8001154:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001156:	2300      	movs	r3, #0
 8001158:	617b      	str	r3, [r7, #20]
 800115a:	e009      	b.n	8001170 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	1c5a      	adds	r2, r3, #1
 8001160:	60ba      	str	r2, [r7, #8]
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	4618      	mov	r0, r3
 8001166:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	3301      	adds	r3, #1
 800116e:	617b      	str	r3, [r7, #20]
 8001170:	697a      	ldr	r2, [r7, #20]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	429a      	cmp	r2, r3
 8001176:	dbf1      	blt.n	800115c <_write+0x12>
  }
  return len;
 8001178:	687b      	ldr	r3, [r7, #4]
}
 800117a:	4618      	mov	r0, r3
 800117c:	3718      	adds	r7, #24
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <_close>:

int _close(int file)
{
 8001182:	b480      	push	{r7}
 8001184:	b083      	sub	sp, #12
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800118a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800118e:	4618      	mov	r0, r3
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr

08001198 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80011a8:	605a      	str	r2, [r3, #4]
  return 0;
 80011aa:	2300      	movs	r3, #0
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bc80      	pop	{r7}
 80011b4:	4770      	bx	lr

080011b6 <_isatty>:

int _isatty(int file)
{
 80011b6:	b480      	push	{r7}
 80011b8:	b083      	sub	sp, #12
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011be:	2301      	movs	r3, #1
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bc80      	pop	{r7}
 80011c8:	4770      	bx	lr

080011ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011ca:	b480      	push	{r7}
 80011cc:	b085      	sub	sp, #20
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	60f8      	str	r0, [r7, #12]
 80011d2:	60b9      	str	r1, [r7, #8]
 80011d4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011d6:	2300      	movs	r3, #0
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	bc80      	pop	{r7}
 80011e0:	4770      	bx	lr
	...

080011e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011ec:	4a14      	ldr	r2, [pc, #80]	@ (8001240 <_sbrk+0x5c>)
 80011ee:	4b15      	ldr	r3, [pc, #84]	@ (8001244 <_sbrk+0x60>)
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011f8:	4b13      	ldr	r3, [pc, #76]	@ (8001248 <_sbrk+0x64>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d102      	bne.n	8001206 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001200:	4b11      	ldr	r3, [pc, #68]	@ (8001248 <_sbrk+0x64>)
 8001202:	4a12      	ldr	r2, [pc, #72]	@ (800124c <_sbrk+0x68>)
 8001204:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001206:	4b10      	ldr	r3, [pc, #64]	@ (8001248 <_sbrk+0x64>)
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4413      	add	r3, r2
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	429a      	cmp	r2, r3
 8001212:	d207      	bcs.n	8001224 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001214:	f004 fe84 	bl	8005f20 <__errno>
 8001218:	4603      	mov	r3, r0
 800121a:	220c      	movs	r2, #12
 800121c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800121e:	f04f 33ff 	mov.w	r3, #4294967295
 8001222:	e009      	b.n	8001238 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001224:	4b08      	ldr	r3, [pc, #32]	@ (8001248 <_sbrk+0x64>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800122a:	4b07      	ldr	r3, [pc, #28]	@ (8001248 <_sbrk+0x64>)
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4413      	add	r3, r2
 8001232:	4a05      	ldr	r2, [pc, #20]	@ (8001248 <_sbrk+0x64>)
 8001234:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001236:	68fb      	ldr	r3, [r7, #12]
}
 8001238:	4618      	mov	r0, r3
 800123a:	3718      	adds	r7, #24
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20005000 	.word	0x20005000
 8001244:	00000400 	.word	0x00000400
 8001248:	200002ac 	.word	0x200002ac
 800124c:	200005a0 	.word	0x200005a0

08001250 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr

0800125c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001260:	4b11      	ldr	r3, [pc, #68]	@ (80012a8 <MX_USART1_UART_Init+0x4c>)
 8001262:	4a12      	ldr	r2, [pc, #72]	@ (80012ac <MX_USART1_UART_Init+0x50>)
 8001264:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001266:	4b10      	ldr	r3, [pc, #64]	@ (80012a8 <MX_USART1_UART_Init+0x4c>)
 8001268:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800126c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800126e:	4b0e      	ldr	r3, [pc, #56]	@ (80012a8 <MX_USART1_UART_Init+0x4c>)
 8001270:	2200      	movs	r2, #0
 8001272:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001274:	4b0c      	ldr	r3, [pc, #48]	@ (80012a8 <MX_USART1_UART_Init+0x4c>)
 8001276:	2200      	movs	r2, #0
 8001278:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800127a:	4b0b      	ldr	r3, [pc, #44]	@ (80012a8 <MX_USART1_UART_Init+0x4c>)
 800127c:	2200      	movs	r2, #0
 800127e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001280:	4b09      	ldr	r3, [pc, #36]	@ (80012a8 <MX_USART1_UART_Init+0x4c>)
 8001282:	220c      	movs	r2, #12
 8001284:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001286:	4b08      	ldr	r3, [pc, #32]	@ (80012a8 <MX_USART1_UART_Init+0x4c>)
 8001288:	2200      	movs	r2, #0
 800128a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800128c:	4b06      	ldr	r3, [pc, #24]	@ (80012a8 <MX_USART1_UART_Init+0x4c>)
 800128e:	2200      	movs	r2, #0
 8001290:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001292:	4805      	ldr	r0, [pc, #20]	@ (80012a8 <MX_USART1_UART_Init+0x4c>)
 8001294:	f002 f935 	bl	8003502 <HAL_UART_Init>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800129e:	f7ff fe17 	bl	8000ed0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	200002b0 	.word	0x200002b0
 80012ac:	40013800 	.word	0x40013800

080012b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b088      	sub	sp, #32
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b8:	f107 0310 	add.w	r3, r7, #16
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a20      	ldr	r2, [pc, #128]	@ (800134c <HAL_UART_MspInit+0x9c>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d139      	bne.n	8001344 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001350 <HAL_UART_MspInit+0xa0>)
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	4a1e      	ldr	r2, [pc, #120]	@ (8001350 <HAL_UART_MspInit+0xa0>)
 80012d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012da:	6193      	str	r3, [r2, #24]
 80012dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001350 <HAL_UART_MspInit+0xa0>)
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e8:	4b19      	ldr	r3, [pc, #100]	@ (8001350 <HAL_UART_MspInit+0xa0>)
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	4a18      	ldr	r2, [pc, #96]	@ (8001350 <HAL_UART_MspInit+0xa0>)
 80012ee:	f043 0304 	orr.w	r3, r3, #4
 80012f2:	6193      	str	r3, [r2, #24]
 80012f4:	4b16      	ldr	r3, [pc, #88]	@ (8001350 <HAL_UART_MspInit+0xa0>)
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	f003 0304 	and.w	r3, r3, #4
 80012fc:	60bb      	str	r3, [r7, #8]
 80012fe:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001300:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001304:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001306:	2302      	movs	r3, #2
 8001308:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800130a:	2303      	movs	r3, #3
 800130c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130e:	f107 0310 	add.w	r3, r7, #16
 8001312:	4619      	mov	r1, r3
 8001314:	480f      	ldr	r0, [pc, #60]	@ (8001354 <HAL_UART_MspInit+0xa4>)
 8001316:	f000 fabd 	bl	8001894 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800131a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800131e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001328:	f107 0310 	add.w	r3, r7, #16
 800132c:	4619      	mov	r1, r3
 800132e:	4809      	ldr	r0, [pc, #36]	@ (8001354 <HAL_UART_MspInit+0xa4>)
 8001330:	f000 fab0 	bl	8001894 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001334:	2200      	movs	r2, #0
 8001336:	2100      	movs	r1, #0
 8001338:	2025      	movs	r0, #37	@ 0x25
 800133a:	f000 f9b4 	bl	80016a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800133e:	2025      	movs	r0, #37	@ 0x25
 8001340:	f000 f9cd 	bl	80016de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001344:	bf00      	nop
 8001346:	3720      	adds	r7, #32
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40013800 	.word	0x40013800
 8001350:	40021000 	.word	0x40021000
 8001354:	40010800 	.word	0x40010800

08001358 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001358:	f7ff ff7a 	bl	8001250 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800135c:	480b      	ldr	r0, [pc, #44]	@ (800138c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800135e:	490c      	ldr	r1, [pc, #48]	@ (8001390 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001360:	4a0c      	ldr	r2, [pc, #48]	@ (8001394 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001362:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001364:	e002      	b.n	800136c <LoopCopyDataInit>

08001366 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001366:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001368:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800136a:	3304      	adds	r3, #4

0800136c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800136c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800136e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001370:	d3f9      	bcc.n	8001366 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001372:	4a09      	ldr	r2, [pc, #36]	@ (8001398 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001374:	4c09      	ldr	r4, [pc, #36]	@ (800139c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001376:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001378:	e001      	b.n	800137e <LoopFillZerobss>

0800137a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800137a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800137c:	3204      	adds	r2, #4

0800137e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800137e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001380:	d3fb      	bcc.n	800137a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001382:	f004 fdd3 	bl	8005f2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001386:	f7ff fd2d 	bl	8000de4 <main>
  bx lr
 800138a:	4770      	bx	lr
  ldr r0, =_sdata
 800138c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001390:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001394:	0800822c 	.word	0x0800822c
  ldr r2, =_sbss
 8001398:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 800139c:	200005a0 	.word	0x200005a0

080013a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013a0:	e7fe      	b.n	80013a0 <ADC1_2_IRQHandler>
	...

080013a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013a8:	4b08      	ldr	r3, [pc, #32]	@ (80013cc <HAL_Init+0x28>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a07      	ldr	r2, [pc, #28]	@ (80013cc <HAL_Init+0x28>)
 80013ae:	f043 0310 	orr.w	r3, r3, #16
 80013b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013b4:	2003      	movs	r0, #3
 80013b6:	f000 f96b 	bl	8001690 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ba:	200f      	movs	r0, #15
 80013bc:	f000 f808 	bl	80013d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013c0:	f7ff fe0c 	bl	8000fdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40022000 	.word	0x40022000

080013d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013d8:	4b12      	ldr	r3, [pc, #72]	@ (8001424 <HAL_InitTick+0x54>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	4b12      	ldr	r3, [pc, #72]	@ (8001428 <HAL_InitTick+0x58>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	4619      	mov	r1, r3
 80013e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ee:	4618      	mov	r0, r3
 80013f0:	f000 f991 	bl	8001716 <HAL_SYSTICK_Config>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e00e      	b.n	800141c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2b0f      	cmp	r3, #15
 8001402:	d80a      	bhi.n	800141a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001404:	2200      	movs	r2, #0
 8001406:	6879      	ldr	r1, [r7, #4]
 8001408:	f04f 30ff 	mov.w	r0, #4294967295
 800140c:	f000 f94b 	bl	80016a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001410:	4a06      	ldr	r2, [pc, #24]	@ (800142c <HAL_InitTick+0x5c>)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001416:	2300      	movs	r3, #0
 8001418:	e000      	b.n	800141c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
}
 800141c:	4618      	mov	r0, r3
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20000000 	.word	0x20000000
 8001428:	20000008 	.word	0x20000008
 800142c:	20000004 	.word	0x20000004

08001430 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001434:	4b05      	ldr	r3, [pc, #20]	@ (800144c <HAL_IncTick+0x1c>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	461a      	mov	r2, r3
 800143a:	4b05      	ldr	r3, [pc, #20]	@ (8001450 <HAL_IncTick+0x20>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4413      	add	r3, r2
 8001440:	4a03      	ldr	r2, [pc, #12]	@ (8001450 <HAL_IncTick+0x20>)
 8001442:	6013      	str	r3, [r2, #0]
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr
 800144c:	20000008 	.word	0x20000008
 8001450:	200002f8 	.word	0x200002f8

08001454 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  return uwTick;
 8001458:	4b02      	ldr	r3, [pc, #8]	@ (8001464 <HAL_GetTick+0x10>)
 800145a:	681b      	ldr	r3, [r3, #0]
}
 800145c:	4618      	mov	r0, r3
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr
 8001464:	200002f8 	.word	0x200002f8

08001468 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001470:	f7ff fff0 	bl	8001454 <HAL_GetTick>
 8001474:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001480:	d005      	beq.n	800148e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001482:	4b0a      	ldr	r3, [pc, #40]	@ (80014ac <HAL_Delay+0x44>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	461a      	mov	r2, r3
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	4413      	add	r3, r2
 800148c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800148e:	bf00      	nop
 8001490:	f7ff ffe0 	bl	8001454 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	68fa      	ldr	r2, [r7, #12]
 800149c:	429a      	cmp	r2, r3
 800149e:	d8f7      	bhi.n	8001490 <HAL_Delay+0x28>
  {
  }
}
 80014a0:	bf00      	nop
 80014a2:	bf00      	nop
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000008 	.word	0x20000008

080014b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014c0:	4b0c      	ldr	r3, [pc, #48]	@ (80014f4 <__NVIC_SetPriorityGrouping+0x44>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014c6:	68ba      	ldr	r2, [r7, #8]
 80014c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014cc:	4013      	ands	r3, r2
 80014ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014e2:	4a04      	ldr	r2, [pc, #16]	@ (80014f4 <__NVIC_SetPriorityGrouping+0x44>)
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	60d3      	str	r3, [r2, #12]
}
 80014e8:	bf00      	nop
 80014ea:	3714      	adds	r7, #20
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bc80      	pop	{r7}
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014fc:	4b04      	ldr	r3, [pc, #16]	@ (8001510 <__NVIC_GetPriorityGrouping+0x18>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	0a1b      	lsrs	r3, r3, #8
 8001502:	f003 0307 	and.w	r3, r3, #7
}
 8001506:	4618      	mov	r0, r3
 8001508:	46bd      	mov	sp, r7
 800150a:	bc80      	pop	{r7}
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800151e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001522:	2b00      	cmp	r3, #0
 8001524:	db0b      	blt.n	800153e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	f003 021f 	and.w	r2, r3, #31
 800152c:	4906      	ldr	r1, [pc, #24]	@ (8001548 <__NVIC_EnableIRQ+0x34>)
 800152e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001532:	095b      	lsrs	r3, r3, #5
 8001534:	2001      	movs	r0, #1
 8001536:	fa00 f202 	lsl.w	r2, r0, r2
 800153a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800153e:	bf00      	nop
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr
 8001548:	e000e100 	.word	0xe000e100

0800154c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155a:	2b00      	cmp	r3, #0
 800155c:	db12      	blt.n	8001584 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800155e:	79fb      	ldrb	r3, [r7, #7]
 8001560:	f003 021f 	and.w	r2, r3, #31
 8001564:	490a      	ldr	r1, [pc, #40]	@ (8001590 <__NVIC_DisableIRQ+0x44>)
 8001566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156a:	095b      	lsrs	r3, r3, #5
 800156c:	2001      	movs	r0, #1
 800156e:	fa00 f202 	lsl.w	r2, r0, r2
 8001572:	3320      	adds	r3, #32
 8001574:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001578:	f3bf 8f4f 	dsb	sy
}
 800157c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800157e:	f3bf 8f6f 	isb	sy
}
 8001582:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	bc80      	pop	{r7}
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	e000e100 	.word	0xe000e100

08001594 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	6039      	str	r1, [r7, #0]
 800159e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	db0a      	blt.n	80015be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	b2da      	uxtb	r2, r3
 80015ac:	490c      	ldr	r1, [pc, #48]	@ (80015e0 <__NVIC_SetPriority+0x4c>)
 80015ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b2:	0112      	lsls	r2, r2, #4
 80015b4:	b2d2      	uxtb	r2, r2
 80015b6:	440b      	add	r3, r1
 80015b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015bc:	e00a      	b.n	80015d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	4908      	ldr	r1, [pc, #32]	@ (80015e4 <__NVIC_SetPriority+0x50>)
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	f003 030f 	and.w	r3, r3, #15
 80015ca:	3b04      	subs	r3, #4
 80015cc:	0112      	lsls	r2, r2, #4
 80015ce:	b2d2      	uxtb	r2, r2
 80015d0:	440b      	add	r3, r1
 80015d2:	761a      	strb	r2, [r3, #24]
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	bc80      	pop	{r7}
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	e000e100 	.word	0xe000e100
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b089      	sub	sp, #36	@ 0x24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	f1c3 0307 	rsb	r3, r3, #7
 8001602:	2b04      	cmp	r3, #4
 8001604:	bf28      	it	cs
 8001606:	2304      	movcs	r3, #4
 8001608:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	3304      	adds	r3, #4
 800160e:	2b06      	cmp	r3, #6
 8001610:	d902      	bls.n	8001618 <NVIC_EncodePriority+0x30>
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	3b03      	subs	r3, #3
 8001616:	e000      	b.n	800161a <NVIC_EncodePriority+0x32>
 8001618:	2300      	movs	r3, #0
 800161a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800161c:	f04f 32ff 	mov.w	r2, #4294967295
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	43da      	mvns	r2, r3
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	401a      	ands	r2, r3
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001630:	f04f 31ff 	mov.w	r1, #4294967295
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	fa01 f303 	lsl.w	r3, r1, r3
 800163a:	43d9      	mvns	r1, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001640:	4313      	orrs	r3, r2
         );
}
 8001642:	4618      	mov	r0, r3
 8001644:	3724      	adds	r7, #36	@ 0x24
 8001646:	46bd      	mov	sp, r7
 8001648:	bc80      	pop	{r7}
 800164a:	4770      	bx	lr

0800164c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	3b01      	subs	r3, #1
 8001658:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800165c:	d301      	bcc.n	8001662 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800165e:	2301      	movs	r3, #1
 8001660:	e00f      	b.n	8001682 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001662:	4a0a      	ldr	r2, [pc, #40]	@ (800168c <SysTick_Config+0x40>)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	3b01      	subs	r3, #1
 8001668:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800166a:	210f      	movs	r1, #15
 800166c:	f04f 30ff 	mov.w	r0, #4294967295
 8001670:	f7ff ff90 	bl	8001594 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001674:	4b05      	ldr	r3, [pc, #20]	@ (800168c <SysTick_Config+0x40>)
 8001676:	2200      	movs	r2, #0
 8001678:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800167a:	4b04      	ldr	r3, [pc, #16]	@ (800168c <SysTick_Config+0x40>)
 800167c:	2207      	movs	r2, #7
 800167e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	e000e010 	.word	0xe000e010

08001690 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff ff09 	bl	80014b0 <__NVIC_SetPriorityGrouping>
}
 800169e:	bf00      	nop
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b086      	sub	sp, #24
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	4603      	mov	r3, r0
 80016ae:	60b9      	str	r1, [r7, #8]
 80016b0:	607a      	str	r2, [r7, #4]
 80016b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016b4:	2300      	movs	r3, #0
 80016b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016b8:	f7ff ff1e 	bl	80014f8 <__NVIC_GetPriorityGrouping>
 80016bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	68b9      	ldr	r1, [r7, #8]
 80016c2:	6978      	ldr	r0, [r7, #20]
 80016c4:	f7ff ff90 	bl	80015e8 <NVIC_EncodePriority>
 80016c8:	4602      	mov	r2, r0
 80016ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ce:	4611      	mov	r1, r2
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff ff5f 	bl	8001594 <__NVIC_SetPriority>
}
 80016d6:	bf00      	nop
 80016d8:	3718      	adds	r7, #24
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b082      	sub	sp, #8
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	4603      	mov	r3, r0
 80016e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff ff11 	bl	8001514 <__NVIC_EnableIRQ>
}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b082      	sub	sp, #8
 80016fe:	af00      	add	r7, sp, #0
 8001700:	4603      	mov	r3, r0
 8001702:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff ff1f 	bl	800154c <__NVIC_DisableIRQ>
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b082      	sub	sp, #8
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f7ff ff94 	bl	800164c <SysTick_Config>
 8001724:	4603      	mov	r3, r0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800172e:	b480      	push	{r7}
 8001730:	b085      	sub	sp, #20
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001736:	2300      	movs	r3, #0
 8001738:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001740:	b2db      	uxtb	r3, r3
 8001742:	2b02      	cmp	r3, #2
 8001744:	d008      	beq.n	8001758 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2204      	movs	r2, #4
 800174a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e020      	b.n	800179a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f022 020e 	bic.w	r2, r2, #14
 8001766:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f022 0201 	bic.w	r2, r2, #1
 8001776:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001780:	2101      	movs	r1, #1
 8001782:	fa01 f202 	lsl.w	r2, r1, r2
 8001786:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2201      	movs	r2, #1
 800178c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001798:	7bfb      	ldrb	r3, [r7, #15]
}
 800179a:	4618      	mov	r0, r3
 800179c:	3714      	adds	r7, #20
 800179e:	46bd      	mov	sp, r7
 80017a0:	bc80      	pop	{r7}
 80017a2:	4770      	bx	lr

080017a4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017ac:	2300      	movs	r3, #0
 80017ae:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d005      	beq.n	80017c8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2204      	movs	r2, #4
 80017c0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	73fb      	strb	r3, [r7, #15]
 80017c6:	e051      	b.n	800186c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f022 020e 	bic.w	r2, r2, #14
 80017d6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f022 0201 	bic.w	r2, r2, #1
 80017e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a22      	ldr	r2, [pc, #136]	@ (8001878 <HAL_DMA_Abort_IT+0xd4>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d029      	beq.n	8001846 <HAL_DMA_Abort_IT+0xa2>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a21      	ldr	r2, [pc, #132]	@ (800187c <HAL_DMA_Abort_IT+0xd8>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d022      	beq.n	8001842 <HAL_DMA_Abort_IT+0x9e>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a1f      	ldr	r2, [pc, #124]	@ (8001880 <HAL_DMA_Abort_IT+0xdc>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d01a      	beq.n	800183c <HAL_DMA_Abort_IT+0x98>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a1e      	ldr	r2, [pc, #120]	@ (8001884 <HAL_DMA_Abort_IT+0xe0>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d012      	beq.n	8001836 <HAL_DMA_Abort_IT+0x92>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a1c      	ldr	r2, [pc, #112]	@ (8001888 <HAL_DMA_Abort_IT+0xe4>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d00a      	beq.n	8001830 <HAL_DMA_Abort_IT+0x8c>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a1b      	ldr	r2, [pc, #108]	@ (800188c <HAL_DMA_Abort_IT+0xe8>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d102      	bne.n	800182a <HAL_DMA_Abort_IT+0x86>
 8001824:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001828:	e00e      	b.n	8001848 <HAL_DMA_Abort_IT+0xa4>
 800182a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800182e:	e00b      	b.n	8001848 <HAL_DMA_Abort_IT+0xa4>
 8001830:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001834:	e008      	b.n	8001848 <HAL_DMA_Abort_IT+0xa4>
 8001836:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800183a:	e005      	b.n	8001848 <HAL_DMA_Abort_IT+0xa4>
 800183c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001840:	e002      	b.n	8001848 <HAL_DMA_Abort_IT+0xa4>
 8001842:	2310      	movs	r3, #16
 8001844:	e000      	b.n	8001848 <HAL_DMA_Abort_IT+0xa4>
 8001846:	2301      	movs	r3, #1
 8001848:	4a11      	ldr	r2, [pc, #68]	@ (8001890 <HAL_DMA_Abort_IT+0xec>)
 800184a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2201      	movs	r2, #1
 8001850:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001860:	2b00      	cmp	r3, #0
 8001862:	d003      	beq.n	800186c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	4798      	blx	r3
    } 
  }
  return status;
 800186c:	7bfb      	ldrb	r3, [r7, #15]
}
 800186e:	4618      	mov	r0, r3
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40020008 	.word	0x40020008
 800187c:	4002001c 	.word	0x4002001c
 8001880:	40020030 	.word	0x40020030
 8001884:	40020044 	.word	0x40020044
 8001888:	40020058 	.word	0x40020058
 800188c:	4002006c 	.word	0x4002006c
 8001890:	40020000 	.word	0x40020000

08001894 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001894:	b480      	push	{r7}
 8001896:	b08b      	sub	sp, #44	@ 0x2c
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800189e:	2300      	movs	r3, #0
 80018a0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018a2:	2300      	movs	r3, #0
 80018a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018a6:	e169      	b.n	8001b7c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018a8:	2201      	movs	r2, #1
 80018aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	69fa      	ldr	r2, [r7, #28]
 80018b8:	4013      	ands	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	f040 8158 	bne.w	8001b76 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	4a9a      	ldr	r2, [pc, #616]	@ (8001b34 <HAL_GPIO_Init+0x2a0>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d05e      	beq.n	800198e <HAL_GPIO_Init+0xfa>
 80018d0:	4a98      	ldr	r2, [pc, #608]	@ (8001b34 <HAL_GPIO_Init+0x2a0>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d875      	bhi.n	80019c2 <HAL_GPIO_Init+0x12e>
 80018d6:	4a98      	ldr	r2, [pc, #608]	@ (8001b38 <HAL_GPIO_Init+0x2a4>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d058      	beq.n	800198e <HAL_GPIO_Init+0xfa>
 80018dc:	4a96      	ldr	r2, [pc, #600]	@ (8001b38 <HAL_GPIO_Init+0x2a4>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d86f      	bhi.n	80019c2 <HAL_GPIO_Init+0x12e>
 80018e2:	4a96      	ldr	r2, [pc, #600]	@ (8001b3c <HAL_GPIO_Init+0x2a8>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d052      	beq.n	800198e <HAL_GPIO_Init+0xfa>
 80018e8:	4a94      	ldr	r2, [pc, #592]	@ (8001b3c <HAL_GPIO_Init+0x2a8>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d869      	bhi.n	80019c2 <HAL_GPIO_Init+0x12e>
 80018ee:	4a94      	ldr	r2, [pc, #592]	@ (8001b40 <HAL_GPIO_Init+0x2ac>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d04c      	beq.n	800198e <HAL_GPIO_Init+0xfa>
 80018f4:	4a92      	ldr	r2, [pc, #584]	@ (8001b40 <HAL_GPIO_Init+0x2ac>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d863      	bhi.n	80019c2 <HAL_GPIO_Init+0x12e>
 80018fa:	4a92      	ldr	r2, [pc, #584]	@ (8001b44 <HAL_GPIO_Init+0x2b0>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d046      	beq.n	800198e <HAL_GPIO_Init+0xfa>
 8001900:	4a90      	ldr	r2, [pc, #576]	@ (8001b44 <HAL_GPIO_Init+0x2b0>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d85d      	bhi.n	80019c2 <HAL_GPIO_Init+0x12e>
 8001906:	2b12      	cmp	r3, #18
 8001908:	d82a      	bhi.n	8001960 <HAL_GPIO_Init+0xcc>
 800190a:	2b12      	cmp	r3, #18
 800190c:	d859      	bhi.n	80019c2 <HAL_GPIO_Init+0x12e>
 800190e:	a201      	add	r2, pc, #4	@ (adr r2, 8001914 <HAL_GPIO_Init+0x80>)
 8001910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001914:	0800198f 	.word	0x0800198f
 8001918:	08001969 	.word	0x08001969
 800191c:	0800197b 	.word	0x0800197b
 8001920:	080019bd 	.word	0x080019bd
 8001924:	080019c3 	.word	0x080019c3
 8001928:	080019c3 	.word	0x080019c3
 800192c:	080019c3 	.word	0x080019c3
 8001930:	080019c3 	.word	0x080019c3
 8001934:	080019c3 	.word	0x080019c3
 8001938:	080019c3 	.word	0x080019c3
 800193c:	080019c3 	.word	0x080019c3
 8001940:	080019c3 	.word	0x080019c3
 8001944:	080019c3 	.word	0x080019c3
 8001948:	080019c3 	.word	0x080019c3
 800194c:	080019c3 	.word	0x080019c3
 8001950:	080019c3 	.word	0x080019c3
 8001954:	080019c3 	.word	0x080019c3
 8001958:	08001971 	.word	0x08001971
 800195c:	08001985 	.word	0x08001985
 8001960:	4a79      	ldr	r2, [pc, #484]	@ (8001b48 <HAL_GPIO_Init+0x2b4>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d013      	beq.n	800198e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001966:	e02c      	b.n	80019c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	623b      	str	r3, [r7, #32]
          break;
 800196e:	e029      	b.n	80019c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	3304      	adds	r3, #4
 8001976:	623b      	str	r3, [r7, #32]
          break;
 8001978:	e024      	b.n	80019c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	3308      	adds	r3, #8
 8001980:	623b      	str	r3, [r7, #32]
          break;
 8001982:	e01f      	b.n	80019c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	330c      	adds	r3, #12
 800198a:	623b      	str	r3, [r7, #32]
          break;
 800198c:	e01a      	b.n	80019c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d102      	bne.n	800199c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001996:	2304      	movs	r3, #4
 8001998:	623b      	str	r3, [r7, #32]
          break;
 800199a:	e013      	b.n	80019c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d105      	bne.n	80019b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019a4:	2308      	movs	r3, #8
 80019a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	69fa      	ldr	r2, [r7, #28]
 80019ac:	611a      	str	r2, [r3, #16]
          break;
 80019ae:	e009      	b.n	80019c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019b0:	2308      	movs	r3, #8
 80019b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	69fa      	ldr	r2, [r7, #28]
 80019b8:	615a      	str	r2, [r3, #20]
          break;
 80019ba:	e003      	b.n	80019c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019bc:	2300      	movs	r3, #0
 80019be:	623b      	str	r3, [r7, #32]
          break;
 80019c0:	e000      	b.n	80019c4 <HAL_GPIO_Init+0x130>
          break;
 80019c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	2bff      	cmp	r3, #255	@ 0xff
 80019c8:	d801      	bhi.n	80019ce <HAL_GPIO_Init+0x13a>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	e001      	b.n	80019d2 <HAL_GPIO_Init+0x13e>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	3304      	adds	r3, #4
 80019d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	2bff      	cmp	r3, #255	@ 0xff
 80019d8:	d802      	bhi.n	80019e0 <HAL_GPIO_Init+0x14c>
 80019da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	e002      	b.n	80019e6 <HAL_GPIO_Init+0x152>
 80019e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e2:	3b08      	subs	r3, #8
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	210f      	movs	r1, #15
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	fa01 f303 	lsl.w	r3, r1, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	401a      	ands	r2, r3
 80019f8:	6a39      	ldr	r1, [r7, #32]
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001a00:	431a      	orrs	r2, r3
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	f000 80b1 	beq.w	8001b76 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a14:	4b4d      	ldr	r3, [pc, #308]	@ (8001b4c <HAL_GPIO_Init+0x2b8>)
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	4a4c      	ldr	r2, [pc, #304]	@ (8001b4c <HAL_GPIO_Init+0x2b8>)
 8001a1a:	f043 0301 	orr.w	r3, r3, #1
 8001a1e:	6193      	str	r3, [r2, #24]
 8001a20:	4b4a      	ldr	r3, [pc, #296]	@ (8001b4c <HAL_GPIO_Init+0x2b8>)
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	f003 0301 	and.w	r3, r3, #1
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a2c:	4a48      	ldr	r2, [pc, #288]	@ (8001b50 <HAL_GPIO_Init+0x2bc>)
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a30:	089b      	lsrs	r3, r3, #2
 8001a32:	3302      	adds	r3, #2
 8001a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a38:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a3c:	f003 0303 	and.w	r3, r3, #3
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	220f      	movs	r2, #15
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	68fa      	ldr	r2, [r7, #12]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4a40      	ldr	r2, [pc, #256]	@ (8001b54 <HAL_GPIO_Init+0x2c0>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d013      	beq.n	8001a80 <HAL_GPIO_Init+0x1ec>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a3f      	ldr	r2, [pc, #252]	@ (8001b58 <HAL_GPIO_Init+0x2c4>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d00d      	beq.n	8001a7c <HAL_GPIO_Init+0x1e8>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	4a3e      	ldr	r2, [pc, #248]	@ (8001b5c <HAL_GPIO_Init+0x2c8>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d007      	beq.n	8001a78 <HAL_GPIO_Init+0x1e4>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4a3d      	ldr	r2, [pc, #244]	@ (8001b60 <HAL_GPIO_Init+0x2cc>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d101      	bne.n	8001a74 <HAL_GPIO_Init+0x1e0>
 8001a70:	2303      	movs	r3, #3
 8001a72:	e006      	b.n	8001a82 <HAL_GPIO_Init+0x1ee>
 8001a74:	2304      	movs	r3, #4
 8001a76:	e004      	b.n	8001a82 <HAL_GPIO_Init+0x1ee>
 8001a78:	2302      	movs	r3, #2
 8001a7a:	e002      	b.n	8001a82 <HAL_GPIO_Init+0x1ee>
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e000      	b.n	8001a82 <HAL_GPIO_Init+0x1ee>
 8001a80:	2300      	movs	r3, #0
 8001a82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a84:	f002 0203 	and.w	r2, r2, #3
 8001a88:	0092      	lsls	r2, r2, #2
 8001a8a:	4093      	lsls	r3, r2
 8001a8c:	68fa      	ldr	r2, [r7, #12]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a92:	492f      	ldr	r1, [pc, #188]	@ (8001b50 <HAL_GPIO_Init+0x2bc>)
 8001a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a96:	089b      	lsrs	r3, r3, #2
 8001a98:	3302      	adds	r3, #2
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d006      	beq.n	8001aba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001aac:	4b2d      	ldr	r3, [pc, #180]	@ (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001aae:	689a      	ldr	r2, [r3, #8]
 8001ab0:	492c      	ldr	r1, [pc, #176]	@ (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	608b      	str	r3, [r1, #8]
 8001ab8:	e006      	b.n	8001ac8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001aba:	4b2a      	ldr	r3, [pc, #168]	@ (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001abc:	689a      	ldr	r2, [r3, #8]
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	4928      	ldr	r1, [pc, #160]	@ (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d006      	beq.n	8001ae2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ad4:	4b23      	ldr	r3, [pc, #140]	@ (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001ad6:	68da      	ldr	r2, [r3, #12]
 8001ad8:	4922      	ldr	r1, [pc, #136]	@ (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	60cb      	str	r3, [r1, #12]
 8001ae0:	e006      	b.n	8001af0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ae2:	4b20      	ldr	r3, [pc, #128]	@ (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001ae4:	68da      	ldr	r2, [r3, #12]
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	491e      	ldr	r1, [pc, #120]	@ (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001aec:	4013      	ands	r3, r2
 8001aee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d006      	beq.n	8001b0a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001afc:	4b19      	ldr	r3, [pc, #100]	@ (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001afe:	685a      	ldr	r2, [r3, #4]
 8001b00:	4918      	ldr	r1, [pc, #96]	@ (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	604b      	str	r3, [r1, #4]
 8001b08:	e006      	b.n	8001b18 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b0a:	4b16      	ldr	r3, [pc, #88]	@ (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001b0c:	685a      	ldr	r2, [r3, #4]
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	43db      	mvns	r3, r3
 8001b12:	4914      	ldr	r1, [pc, #80]	@ (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001b14:	4013      	ands	r3, r2
 8001b16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d021      	beq.n	8001b68 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b24:	4b0f      	ldr	r3, [pc, #60]	@ (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	490e      	ldr	r1, [pc, #56]	@ (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	600b      	str	r3, [r1, #0]
 8001b30:	e021      	b.n	8001b76 <HAL_GPIO_Init+0x2e2>
 8001b32:	bf00      	nop
 8001b34:	10320000 	.word	0x10320000
 8001b38:	10310000 	.word	0x10310000
 8001b3c:	10220000 	.word	0x10220000
 8001b40:	10210000 	.word	0x10210000
 8001b44:	10120000 	.word	0x10120000
 8001b48:	10110000 	.word	0x10110000
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	40010000 	.word	0x40010000
 8001b54:	40010800 	.word	0x40010800
 8001b58:	40010c00 	.word	0x40010c00
 8001b5c:	40011000 	.word	0x40011000
 8001b60:	40011400 	.word	0x40011400
 8001b64:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b68:	4b0b      	ldr	r3, [pc, #44]	@ (8001b98 <HAL_GPIO_Init+0x304>)
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	43db      	mvns	r3, r3
 8001b70:	4909      	ldr	r1, [pc, #36]	@ (8001b98 <HAL_GPIO_Init+0x304>)
 8001b72:	4013      	ands	r3, r2
 8001b74:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b78:	3301      	adds	r3, #1
 8001b7a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b82:	fa22 f303 	lsr.w	r3, r2, r3
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	f47f ae8e 	bne.w	80018a8 <HAL_GPIO_Init+0x14>
  }
}
 8001b8c:	bf00      	nop
 8001b8e:	bf00      	nop
 8001b90:	372c      	adds	r7, #44	@ 0x2c
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr
 8001b98:	40010400 	.word	0x40010400

08001b9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689a      	ldr	r2, [r3, #8]
 8001bac:	887b      	ldrh	r3, [r7, #2]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d002      	beq.n	8001bba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	73fb      	strb	r3, [r7, #15]
 8001bb8:	e001      	b.n	8001bbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3714      	adds	r7, #20
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bc80      	pop	{r7}
 8001bc8:	4770      	bx	lr

08001bca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b083      	sub	sp, #12
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	807b      	strh	r3, [r7, #2]
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bda:	787b      	ldrb	r3, [r7, #1]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d003      	beq.n	8001be8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001be0:	887a      	ldrh	r2, [r7, #2]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001be6:	e003      	b.n	8001bf0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001be8:	887b      	ldrh	r3, [r7, #2]
 8001bea:	041a      	lsls	r2, r3, #16
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	611a      	str	r2, [r3, #16]
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bc80      	pop	{r7}
 8001bf8:	4770      	bx	lr
	...

08001bfc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001c06:	4b08      	ldr	r3, [pc, #32]	@ (8001c28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c08:	695a      	ldr	r2, [r3, #20]
 8001c0a:	88fb      	ldrh	r3, [r7, #6]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d006      	beq.n	8001c20 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c12:	4a05      	ldr	r2, [pc, #20]	@ (8001c28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c14:	88fb      	ldrh	r3, [r7, #6]
 8001c16:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c18:	88fb      	ldrh	r3, [r7, #6]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f003 fa06 	bl	800502c <HAL_GPIO_EXTI_Callback>
  }
}
 8001c20:	bf00      	nop
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40010400 	.word	0x40010400

08001c2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d101      	bne.n	8001c3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e12b      	b.n	8001e96 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d106      	bne.n	8001c58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f7fe ffd6 	bl	8000c04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2224      	movs	r2, #36	@ 0x24
 8001c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f022 0201 	bic.w	r2, r2, #1
 8001c6e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001c7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001c8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c90:	f001 f962 	bl	8002f58 <HAL_RCC_GetPCLK1Freq>
 8001c94:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	4a81      	ldr	r2, [pc, #516]	@ (8001ea0 <HAL_I2C_Init+0x274>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d807      	bhi.n	8001cb0 <HAL_I2C_Init+0x84>
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	4a80      	ldr	r2, [pc, #512]	@ (8001ea4 <HAL_I2C_Init+0x278>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	bf94      	ite	ls
 8001ca8:	2301      	movls	r3, #1
 8001caa:	2300      	movhi	r3, #0
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	e006      	b.n	8001cbe <HAL_I2C_Init+0x92>
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	4a7d      	ldr	r2, [pc, #500]	@ (8001ea8 <HAL_I2C_Init+0x27c>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	bf94      	ite	ls
 8001cb8:	2301      	movls	r3, #1
 8001cba:	2300      	movhi	r3, #0
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e0e7      	b.n	8001e96 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	4a78      	ldr	r2, [pc, #480]	@ (8001eac <HAL_I2C_Init+0x280>)
 8001cca:	fba2 2303 	umull	r2, r3, r2, r3
 8001cce:	0c9b      	lsrs	r3, r3, #18
 8001cd0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	68ba      	ldr	r2, [r7, #8]
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	6a1b      	ldr	r3, [r3, #32]
 8001cec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	4a6a      	ldr	r2, [pc, #424]	@ (8001ea0 <HAL_I2C_Init+0x274>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d802      	bhi.n	8001d00 <HAL_I2C_Init+0xd4>
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	e009      	b.n	8001d14 <HAL_I2C_Init+0xe8>
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001d06:	fb02 f303 	mul.w	r3, r2, r3
 8001d0a:	4a69      	ldr	r2, [pc, #420]	@ (8001eb0 <HAL_I2C_Init+0x284>)
 8001d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d10:	099b      	lsrs	r3, r3, #6
 8001d12:	3301      	adds	r3, #1
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	6812      	ldr	r2, [r2, #0]
 8001d18:	430b      	orrs	r3, r1
 8001d1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001d26:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	495c      	ldr	r1, [pc, #368]	@ (8001ea0 <HAL_I2C_Init+0x274>)
 8001d30:	428b      	cmp	r3, r1
 8001d32:	d819      	bhi.n	8001d68 <HAL_I2C_Init+0x13c>
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	1e59      	subs	r1, r3, #1
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d42:	1c59      	adds	r1, r3, #1
 8001d44:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001d48:	400b      	ands	r3, r1
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d00a      	beq.n	8001d64 <HAL_I2C_Init+0x138>
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	1e59      	subs	r1, r3, #1
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d62:	e051      	b.n	8001e08 <HAL_I2C_Init+0x1dc>
 8001d64:	2304      	movs	r3, #4
 8001d66:	e04f      	b.n	8001e08 <HAL_I2C_Init+0x1dc>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d111      	bne.n	8001d94 <HAL_I2C_Init+0x168>
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	1e58      	subs	r0, r3, #1
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6859      	ldr	r1, [r3, #4]
 8001d78:	460b      	mov	r3, r1
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	440b      	add	r3, r1
 8001d7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d82:	3301      	adds	r3, #1
 8001d84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	bf0c      	ite	eq
 8001d8c:	2301      	moveq	r3, #1
 8001d8e:	2300      	movne	r3, #0
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	e012      	b.n	8001dba <HAL_I2C_Init+0x18e>
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	1e58      	subs	r0, r3, #1
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6859      	ldr	r1, [r3, #4]
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	440b      	add	r3, r1
 8001da2:	0099      	lsls	r1, r3, #2
 8001da4:	440b      	add	r3, r1
 8001da6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001daa:	3301      	adds	r3, #1
 8001dac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	bf0c      	ite	eq
 8001db4:	2301      	moveq	r3, #1
 8001db6:	2300      	movne	r3, #0
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <HAL_I2C_Init+0x196>
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e022      	b.n	8001e08 <HAL_I2C_Init+0x1dc>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d10e      	bne.n	8001de8 <HAL_I2C_Init+0x1bc>
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	1e58      	subs	r0, r3, #1
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6859      	ldr	r1, [r3, #4]
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	440b      	add	r3, r1
 8001dd8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ddc:	3301      	adds	r3, #1
 8001dde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001de2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001de6:	e00f      	b.n	8001e08 <HAL_I2C_Init+0x1dc>
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	1e58      	subs	r0, r3, #1
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6859      	ldr	r1, [r3, #4]
 8001df0:	460b      	mov	r3, r1
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	440b      	add	r3, r1
 8001df6:	0099      	lsls	r1, r3, #2
 8001df8:	440b      	add	r3, r1
 8001dfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dfe:	3301      	adds	r3, #1
 8001e00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e04:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e08:	6879      	ldr	r1, [r7, #4]
 8001e0a:	6809      	ldr	r1, [r1, #0]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	69da      	ldr	r2, [r3, #28]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a1b      	ldr	r3, [r3, #32]
 8001e22:	431a      	orrs	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001e36:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	6911      	ldr	r1, [r2, #16]
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	68d2      	ldr	r2, [r2, #12]
 8001e42:	4311      	orrs	r1, r2
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	6812      	ldr	r2, [r2, #0]
 8001e48:	430b      	orrs	r3, r1
 8001e4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	695a      	ldr	r2, [r3, #20]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	431a      	orrs	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	430a      	orrs	r2, r1
 8001e66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f042 0201 	orr.w	r2, r2, #1
 8001e76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2220      	movs	r2, #32
 8001e82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	000186a0 	.word	0x000186a0
 8001ea4:	001e847f 	.word	0x001e847f
 8001ea8:	003d08ff 	.word	0x003d08ff
 8001eac:	431bde83 	.word	0x431bde83
 8001eb0:	10624dd3 	.word	0x10624dd3

08001eb4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b088      	sub	sp, #32
 8001eb8:	af02      	add	r7, sp, #8
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	607a      	str	r2, [r7, #4]
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	817b      	strh	r3, [r7, #10]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ec8:	f7ff fac4 	bl	8001454 <HAL_GetTick>
 8001ecc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b20      	cmp	r3, #32
 8001ed8:	f040 80e0 	bne.w	800209c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	9300      	str	r3, [sp, #0]
 8001ee0:	2319      	movs	r3, #25
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	4970      	ldr	r1, [pc, #448]	@ (80020a8 <HAL_I2C_Master_Transmit+0x1f4>)
 8001ee6:	68f8      	ldr	r0, [r7, #12]
 8001ee8:	f000 fa92 	bl	8002410 <I2C_WaitOnFlagUntilTimeout>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	e0d3      	b.n	800209e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d101      	bne.n	8001f04 <HAL_I2C_Master_Transmit+0x50>
 8001f00:	2302      	movs	r3, #2
 8001f02:	e0cc      	b.n	800209e <HAL_I2C_Master_Transmit+0x1ea>
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d007      	beq.n	8001f2a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f042 0201 	orr.w	r2, r2, #1
 8001f28:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f38:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2221      	movs	r2, #33	@ 0x21
 8001f3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2210      	movs	r2, #16
 8001f46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	893a      	ldrh	r2, [r7, #8]
 8001f5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f60:	b29a      	uxth	r2, r3
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	4a50      	ldr	r2, [pc, #320]	@ (80020ac <HAL_I2C_Master_Transmit+0x1f8>)
 8001f6a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001f6c:	8979      	ldrh	r1, [r7, #10]
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	6a3a      	ldr	r2, [r7, #32]
 8001f72:	68f8      	ldr	r0, [r7, #12]
 8001f74:	f000 f9ca 	bl	800230c <I2C_MasterRequestWrite>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e08d      	b.n	800209e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f82:	2300      	movs	r3, #0
 8001f84:	613b      	str	r3, [r7, #16]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	695b      	ldr	r3, [r3, #20]
 8001f8c:	613b      	str	r3, [r7, #16]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	613b      	str	r3, [r7, #16]
 8001f96:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001f98:	e066      	b.n	8002068 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f9a:	697a      	ldr	r2, [r7, #20]
 8001f9c:	6a39      	ldr	r1, [r7, #32]
 8001f9e:	68f8      	ldr	r0, [r7, #12]
 8001fa0:	f000 fb50 	bl	8002644 <I2C_WaitOnTXEFlagUntilTimeout>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d00d      	beq.n	8001fc6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fae:	2b04      	cmp	r3, #4
 8001fb0:	d107      	bne.n	8001fc2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fc0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e06b      	b.n	800209e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fca:	781a      	ldrb	r2, [r3, #0]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd6:	1c5a      	adds	r2, r3, #1
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	b29a      	uxth	r2, r3
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	b29a      	uxth	r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	695b      	ldr	r3, [r3, #20]
 8001ffc:	f003 0304 	and.w	r3, r3, #4
 8002000:	2b04      	cmp	r3, #4
 8002002:	d11b      	bne.n	800203c <HAL_I2C_Master_Transmit+0x188>
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002008:	2b00      	cmp	r3, #0
 800200a:	d017      	beq.n	800203c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002010:	781a      	ldrb	r2, [r3, #0]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800201c:	1c5a      	adds	r2, r3, #1
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002026:	b29b      	uxth	r3, r3
 8002028:	3b01      	subs	r3, #1
 800202a:	b29a      	uxth	r2, r3
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002034:	3b01      	subs	r3, #1
 8002036:	b29a      	uxth	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800203c:	697a      	ldr	r2, [r7, #20]
 800203e:	6a39      	ldr	r1, [r7, #32]
 8002040:	68f8      	ldr	r0, [r7, #12]
 8002042:	f000 fb47 	bl	80026d4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d00d      	beq.n	8002068 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002050:	2b04      	cmp	r3, #4
 8002052:	d107      	bne.n	8002064 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002062:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e01a      	b.n	800209e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800206c:	2b00      	cmp	r3, #0
 800206e:	d194      	bne.n	8001f9a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800207e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2220      	movs	r2, #32
 8002084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002098:	2300      	movs	r3, #0
 800209a:	e000      	b.n	800209e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800209c:	2302      	movs	r3, #2
  }
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3718      	adds	r7, #24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	00100002 	.word	0x00100002
 80020ac:	ffff0000 	.word	0xffff0000

080020b0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b08a      	sub	sp, #40	@ 0x28
 80020b4:	af02      	add	r7, sp, #8
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	607a      	str	r2, [r7, #4]
 80020ba:	603b      	str	r3, [r7, #0]
 80020bc:	460b      	mov	r3, r1
 80020be:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80020c0:	f7ff f9c8 	bl	8001454 <HAL_GetTick>
 80020c4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80020c6:	2300      	movs	r3, #0
 80020c8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b20      	cmp	r3, #32
 80020d4:	f040 8111 	bne.w	80022fa <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	9300      	str	r3, [sp, #0]
 80020dc:	2319      	movs	r3, #25
 80020de:	2201      	movs	r2, #1
 80020e0:	4988      	ldr	r1, [pc, #544]	@ (8002304 <HAL_I2C_IsDeviceReady+0x254>)
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	f000 f994 	bl	8002410 <I2C_WaitOnFlagUntilTimeout>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80020ee:	2302      	movs	r3, #2
 80020f0:	e104      	b.n	80022fc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d101      	bne.n	8002100 <HAL_I2C_IsDeviceReady+0x50>
 80020fc:	2302      	movs	r3, #2
 80020fe:	e0fd      	b.n	80022fc <HAL_I2C_IsDeviceReady+0x24c>
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	2b01      	cmp	r3, #1
 8002114:	d007      	beq.n	8002126 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f042 0201 	orr.w	r2, r2, #1
 8002124:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002134:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2224      	movs	r2, #36	@ 0x24
 800213a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2200      	movs	r2, #0
 8002142:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	4a70      	ldr	r2, [pc, #448]	@ (8002308 <HAL_I2C_IsDeviceReady+0x258>)
 8002148:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002158:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	9300      	str	r3, [sp, #0]
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	2200      	movs	r2, #0
 8002162:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002166:	68f8      	ldr	r0, [r7, #12]
 8002168:	f000 f952 	bl	8002410 <I2C_WaitOnFlagUntilTimeout>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00d      	beq.n	800218e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800217c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002180:	d103      	bne.n	800218a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002188:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e0b6      	b.n	80022fc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800218e:	897b      	ldrh	r3, [r7, #10]
 8002190:	b2db      	uxtb	r3, r3
 8002192:	461a      	mov	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800219c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800219e:	f7ff f959 	bl	8001454 <HAL_GetTick>
 80021a2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	bf0c      	ite	eq
 80021b2:	2301      	moveq	r3, #1
 80021b4:	2300      	movne	r3, #0
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	695b      	ldr	r3, [r3, #20]
 80021c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021c8:	bf0c      	ite	eq
 80021ca:	2301      	moveq	r3, #1
 80021cc:	2300      	movne	r3, #0
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80021d2:	e025      	b.n	8002220 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80021d4:	f7ff f93e 	bl	8001454 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	683a      	ldr	r2, [r7, #0]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d302      	bcc.n	80021ea <HAL_I2C_IsDeviceReady+0x13a>
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d103      	bne.n	80021f2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	22a0      	movs	r2, #160	@ 0xa0
 80021ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	695b      	ldr	r3, [r3, #20]
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	bf0c      	ite	eq
 8002200:	2301      	moveq	r3, #1
 8002202:	2300      	movne	r3, #0
 8002204:	b2db      	uxtb	r3, r3
 8002206:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	695b      	ldr	r3, [r3, #20]
 800220e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002212:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002216:	bf0c      	ite	eq
 8002218:	2301      	moveq	r3, #1
 800221a:	2300      	movne	r3, #0
 800221c:	b2db      	uxtb	r3, r3
 800221e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002226:	b2db      	uxtb	r3, r3
 8002228:	2ba0      	cmp	r3, #160	@ 0xa0
 800222a:	d005      	beq.n	8002238 <HAL_I2C_IsDeviceReady+0x188>
 800222c:	7dfb      	ldrb	r3, [r7, #23]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d102      	bne.n	8002238 <HAL_I2C_IsDeviceReady+0x188>
 8002232:	7dbb      	ldrb	r3, [r7, #22]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d0cd      	beq.n	80021d4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2220      	movs	r2, #32
 800223c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b02      	cmp	r3, #2
 800224c:	d129      	bne.n	80022a2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800225c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800225e:	2300      	movs	r3, #0
 8002260:	613b      	str	r3, [r7, #16]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	695b      	ldr	r3, [r3, #20]
 8002268:	613b      	str	r3, [r7, #16]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	699b      	ldr	r3, [r3, #24]
 8002270:	613b      	str	r3, [r7, #16]
 8002272:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	9300      	str	r3, [sp, #0]
 8002278:	2319      	movs	r3, #25
 800227a:	2201      	movs	r2, #1
 800227c:	4921      	ldr	r1, [pc, #132]	@ (8002304 <HAL_I2C_IsDeviceReady+0x254>)
 800227e:	68f8      	ldr	r0, [r7, #12]
 8002280:	f000 f8c6 	bl	8002410 <I2C_WaitOnFlagUntilTimeout>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e036      	b.n	80022fc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2220      	movs	r2, #32
 8002292:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800229e:	2300      	movs	r3, #0
 80022a0:	e02c      	b.n	80022fc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022b0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80022ba:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	9300      	str	r3, [sp, #0]
 80022c0:	2319      	movs	r3, #25
 80022c2:	2201      	movs	r2, #1
 80022c4:	490f      	ldr	r1, [pc, #60]	@ (8002304 <HAL_I2C_IsDeviceReady+0x254>)
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	f000 f8a2 	bl	8002410 <I2C_WaitOnFlagUntilTimeout>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e012      	b.n	80022fc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	3301      	adds	r3, #1
 80022da:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	f4ff af32 	bcc.w	800214a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2220      	movs	r2, #32
 80022ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e000      	b.n	80022fc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80022fa:	2302      	movs	r3, #2
  }
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3720      	adds	r7, #32
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	00100002 	.word	0x00100002
 8002308:	ffff0000 	.word	0xffff0000

0800230c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b088      	sub	sp, #32
 8002310:	af02      	add	r7, sp, #8
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	607a      	str	r2, [r7, #4]
 8002316:	603b      	str	r3, [r7, #0]
 8002318:	460b      	mov	r3, r1
 800231a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002320:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	2b08      	cmp	r3, #8
 8002326:	d006      	beq.n	8002336 <I2C_MasterRequestWrite+0x2a>
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d003      	beq.n	8002336 <I2C_MasterRequestWrite+0x2a>
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002334:	d108      	bne.n	8002348 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002344:	601a      	str	r2, [r3, #0]
 8002346:	e00b      	b.n	8002360 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234c:	2b12      	cmp	r3, #18
 800234e:	d107      	bne.n	8002360 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800235e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	9300      	str	r3, [sp, #0]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800236c:	68f8      	ldr	r0, [r7, #12]
 800236e:	f000 f84f 	bl	8002410 <I2C_WaitOnFlagUntilTimeout>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d00d      	beq.n	8002394 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002382:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002386:	d103      	bne.n	8002390 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800238e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e035      	b.n	8002400 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800239c:	d108      	bne.n	80023b0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800239e:	897b      	ldrh	r3, [r7, #10]
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	461a      	mov	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80023ac:	611a      	str	r2, [r3, #16]
 80023ae:	e01b      	b.n	80023e8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80023b0:	897b      	ldrh	r3, [r7, #10]
 80023b2:	11db      	asrs	r3, r3, #7
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	f003 0306 	and.w	r3, r3, #6
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	f063 030f 	orn	r3, r3, #15
 80023c0:	b2da      	uxtb	r2, r3
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	490e      	ldr	r1, [pc, #56]	@ (8002408 <I2C_MasterRequestWrite+0xfc>)
 80023ce:	68f8      	ldr	r0, [r7, #12]
 80023d0:	f000 f898 	bl	8002504 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e010      	b.n	8002400 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80023de:	897b      	ldrh	r3, [r7, #10]
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	4907      	ldr	r1, [pc, #28]	@ (800240c <I2C_MasterRequestWrite+0x100>)
 80023ee:	68f8      	ldr	r0, [r7, #12]
 80023f0:	f000 f888 	bl	8002504 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e000      	b.n	8002400 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	3718      	adds	r7, #24
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	00010008 	.word	0x00010008
 800240c:	00010002 	.word	0x00010002

08002410 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	603b      	str	r3, [r7, #0]
 800241c:	4613      	mov	r3, r2
 800241e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002420:	e048      	b.n	80024b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002428:	d044      	beq.n	80024b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800242a:	f7ff f813 	bl	8001454 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	429a      	cmp	r2, r3
 8002438:	d302      	bcc.n	8002440 <I2C_WaitOnFlagUntilTimeout+0x30>
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d139      	bne.n	80024b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	0c1b      	lsrs	r3, r3, #16
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b01      	cmp	r3, #1
 8002448:	d10d      	bne.n	8002466 <I2C_WaitOnFlagUntilTimeout+0x56>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	695b      	ldr	r3, [r3, #20]
 8002450:	43da      	mvns	r2, r3
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	4013      	ands	r3, r2
 8002456:	b29b      	uxth	r3, r3
 8002458:	2b00      	cmp	r3, #0
 800245a:	bf0c      	ite	eq
 800245c:	2301      	moveq	r3, #1
 800245e:	2300      	movne	r3, #0
 8002460:	b2db      	uxtb	r3, r3
 8002462:	461a      	mov	r2, r3
 8002464:	e00c      	b.n	8002480 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	43da      	mvns	r2, r3
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	4013      	ands	r3, r2
 8002472:	b29b      	uxth	r3, r3
 8002474:	2b00      	cmp	r3, #0
 8002476:	bf0c      	ite	eq
 8002478:	2301      	moveq	r3, #1
 800247a:	2300      	movne	r3, #0
 800247c:	b2db      	uxtb	r3, r3
 800247e:	461a      	mov	r2, r3
 8002480:	79fb      	ldrb	r3, [r7, #7]
 8002482:	429a      	cmp	r2, r3
 8002484:	d116      	bne.n	80024b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2220      	movs	r2, #32
 8002490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a0:	f043 0220 	orr.w	r2, r3, #32
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e023      	b.n	80024fc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	0c1b      	lsrs	r3, r3, #16
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d10d      	bne.n	80024da <I2C_WaitOnFlagUntilTimeout+0xca>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	695b      	ldr	r3, [r3, #20]
 80024c4:	43da      	mvns	r2, r3
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	4013      	ands	r3, r2
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	bf0c      	ite	eq
 80024d0:	2301      	moveq	r3, #1
 80024d2:	2300      	movne	r3, #0
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	461a      	mov	r2, r3
 80024d8:	e00c      	b.n	80024f4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	43da      	mvns	r2, r3
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	4013      	ands	r3, r2
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	bf0c      	ite	eq
 80024ec:	2301      	moveq	r3, #1
 80024ee:	2300      	movne	r3, #0
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	461a      	mov	r2, r3
 80024f4:	79fb      	ldrb	r3, [r7, #7]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d093      	beq.n	8002422 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3710      	adds	r7, #16
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
 8002510:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002512:	e071      	b.n	80025f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800251e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002522:	d123      	bne.n	800256c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002532:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800253c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2200      	movs	r2, #0
 8002542:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2220      	movs	r2, #32
 8002548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002558:	f043 0204 	orr.w	r2, r3, #4
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e067      	b.n	800263c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002572:	d041      	beq.n	80025f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002574:	f7fe ff6e 	bl	8001454 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	429a      	cmp	r2, r3
 8002582:	d302      	bcc.n	800258a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d136      	bne.n	80025f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	0c1b      	lsrs	r3, r3, #16
 800258e:	b2db      	uxtb	r3, r3
 8002590:	2b01      	cmp	r3, #1
 8002592:	d10c      	bne.n	80025ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	43da      	mvns	r2, r3
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	4013      	ands	r3, r2
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	bf14      	ite	ne
 80025a6:	2301      	movne	r3, #1
 80025a8:	2300      	moveq	r3, #0
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	e00b      	b.n	80025c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	43da      	mvns	r2, r3
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	4013      	ands	r3, r2
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	2b00      	cmp	r3, #0
 80025be:	bf14      	ite	ne
 80025c0:	2301      	movne	r3, #1
 80025c2:	2300      	moveq	r3, #0
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d016      	beq.n	80025f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2220      	movs	r2, #32
 80025d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e4:	f043 0220 	orr.w	r2, r3, #32
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e021      	b.n	800263c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	0c1b      	lsrs	r3, r3, #16
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d10c      	bne.n	800261c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	695b      	ldr	r3, [r3, #20]
 8002608:	43da      	mvns	r2, r3
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	4013      	ands	r3, r2
 800260e:	b29b      	uxth	r3, r3
 8002610:	2b00      	cmp	r3, #0
 8002612:	bf14      	ite	ne
 8002614:	2301      	movne	r3, #1
 8002616:	2300      	moveq	r3, #0
 8002618:	b2db      	uxtb	r3, r3
 800261a:	e00b      	b.n	8002634 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	43da      	mvns	r2, r3
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	4013      	ands	r3, r2
 8002628:	b29b      	uxth	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	bf14      	ite	ne
 800262e:	2301      	movne	r3, #1
 8002630:	2300      	moveq	r3, #0
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b00      	cmp	r3, #0
 8002636:	f47f af6d 	bne.w	8002514 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3710      	adds	r7, #16
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002650:	e034      	b.n	80026bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	f000 f886 	bl	8002764 <I2C_IsAcknowledgeFailed>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e034      	b.n	80026cc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002668:	d028      	beq.n	80026bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800266a:	f7fe fef3 	bl	8001454 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	68ba      	ldr	r2, [r7, #8]
 8002676:	429a      	cmp	r2, r3
 8002678:	d302      	bcc.n	8002680 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d11d      	bne.n	80026bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800268a:	2b80      	cmp	r3, #128	@ 0x80
 800268c:	d016      	beq.n	80026bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2200      	movs	r2, #0
 8002692:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2220      	movs	r2, #32
 8002698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a8:	f043 0220 	orr.w	r2, r3, #32
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e007      	b.n	80026cc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026c6:	2b80      	cmp	r3, #128	@ 0x80
 80026c8:	d1c3      	bne.n	8002652 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80026ca:	2300      	movs	r3, #0
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3710      	adds	r7, #16
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026e0:	e034      	b.n	800274c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80026e2:	68f8      	ldr	r0, [r7, #12]
 80026e4:	f000 f83e 	bl	8002764 <I2C_IsAcknowledgeFailed>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e034      	b.n	800275c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f8:	d028      	beq.n	800274c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026fa:	f7fe feab 	bl	8001454 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	68ba      	ldr	r2, [r7, #8]
 8002706:	429a      	cmp	r2, r3
 8002708:	d302      	bcc.n	8002710 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d11d      	bne.n	800274c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	f003 0304 	and.w	r3, r3, #4
 800271a:	2b04      	cmp	r3, #4
 800271c:	d016      	beq.n	800274c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2200      	movs	r2, #0
 8002722:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2220      	movs	r2, #32
 8002728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002738:	f043 0220 	orr.w	r2, r3, #32
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e007      	b.n	800275c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	f003 0304 	and.w	r3, r3, #4
 8002756:	2b04      	cmp	r3, #4
 8002758:	d1c3      	bne.n	80026e2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	3710      	adds	r7, #16
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002776:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800277a:	d11b      	bne.n	80027b4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002784:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2220      	movs	r2, #32
 8002790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a0:	f043 0204 	orr.w	r2, r3, #4
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e000      	b.n	80027b6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	370c      	adds	r7, #12
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bc80      	pop	{r7}
 80027be:	4770      	bx	lr

080027c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d101      	bne.n	80027d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e272      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f000 8087 	beq.w	80028ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027e0:	4b92      	ldr	r3, [pc, #584]	@ (8002a2c <HAL_RCC_OscConfig+0x26c>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f003 030c 	and.w	r3, r3, #12
 80027e8:	2b04      	cmp	r3, #4
 80027ea:	d00c      	beq.n	8002806 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027ec:	4b8f      	ldr	r3, [pc, #572]	@ (8002a2c <HAL_RCC_OscConfig+0x26c>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f003 030c 	and.w	r3, r3, #12
 80027f4:	2b08      	cmp	r3, #8
 80027f6:	d112      	bne.n	800281e <HAL_RCC_OscConfig+0x5e>
 80027f8:	4b8c      	ldr	r3, [pc, #560]	@ (8002a2c <HAL_RCC_OscConfig+0x26c>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002800:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002804:	d10b      	bne.n	800281e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002806:	4b89      	ldr	r3, [pc, #548]	@ (8002a2c <HAL_RCC_OscConfig+0x26c>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d06c      	beq.n	80028ec <HAL_RCC_OscConfig+0x12c>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d168      	bne.n	80028ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e24c      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002826:	d106      	bne.n	8002836 <HAL_RCC_OscConfig+0x76>
 8002828:	4b80      	ldr	r3, [pc, #512]	@ (8002a2c <HAL_RCC_OscConfig+0x26c>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a7f      	ldr	r2, [pc, #508]	@ (8002a2c <HAL_RCC_OscConfig+0x26c>)
 800282e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002832:	6013      	str	r3, [r2, #0]
 8002834:	e02e      	b.n	8002894 <HAL_RCC_OscConfig+0xd4>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d10c      	bne.n	8002858 <HAL_RCC_OscConfig+0x98>
 800283e:	4b7b      	ldr	r3, [pc, #492]	@ (8002a2c <HAL_RCC_OscConfig+0x26c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a7a      	ldr	r2, [pc, #488]	@ (8002a2c <HAL_RCC_OscConfig+0x26c>)
 8002844:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002848:	6013      	str	r3, [r2, #0]
 800284a:	4b78      	ldr	r3, [pc, #480]	@ (8002a2c <HAL_RCC_OscConfig+0x26c>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a77      	ldr	r2, [pc, #476]	@ (8002a2c <HAL_RCC_OscConfig+0x26c>)
 8002850:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002854:	6013      	str	r3, [r2, #0]
 8002856:	e01d      	b.n	8002894 <HAL_RCC_OscConfig+0xd4>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002860:	d10c      	bne.n	800287c <HAL_RCC_OscConfig+0xbc>
 8002862:	4b72      	ldr	r3, [pc, #456]	@ (8002a2c <HAL_RCC_OscConfig+0x26c>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a71      	ldr	r2, [pc, #452]	@ (8002a2c <HAL_RCC_OscConfig+0x26c>)
 8002868:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800286c:	6013      	str	r3, [r2, #0]
 800286e:	4b6f      	ldr	r3, [pc, #444]	@ (8002a2c <HAL_RCC_OscConfig+0x26c>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a6e      	ldr	r2, [pc, #440]	@ (8002a2c <HAL_RCC_OscConfig+0x26c>)
 8002874:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002878:	6013      	str	r3, [r2, #0]
 800287a:	e00b      	b.n	8002894 <HAL_RCC_OscConfig+0xd4>
 800287c:	4b6b      	ldr	r3, [pc, #428]	@ (8002a2c <HAL_RCC_OscConfig+0x26c>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a6a      	ldr	r2, [pc, #424]	@ (8002a2c <HAL_RCC_OscConfig+0x26c>)
 8002882:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002886:	6013      	str	r3, [r2, #0]
 8002888:	4b68      	ldr	r3, [pc, #416]	@ (8002a2c <HAL_RCC_OscConfig+0x26c>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a67      	ldr	r2, [pc, #412]	@ (8002a2c <HAL_RCC_OscConfig+0x26c>)
 800288e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002892:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d013      	beq.n	80028c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289c:	f7fe fdda 	bl	8001454 <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028a4:	f7fe fdd6 	bl	8001454 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b64      	cmp	r3, #100	@ 0x64
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e200      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028b6:	4b5d      	ldr	r3, [pc, #372]	@ (8002a2c <HAL_RCC_OscConfig+0x26c>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d0f0      	beq.n	80028a4 <HAL_RCC_OscConfig+0xe4>
 80028c2:	e014      	b.n	80028ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c4:	f7fe fdc6 	bl	8001454 <HAL_GetTick>
 80028c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ca:	e008      	b.n	80028de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028cc:	f7fe fdc2 	bl	8001454 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b64      	cmp	r3, #100	@ 0x64
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e1ec      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028de:	4b53      	ldr	r3, [pc, #332]	@ (8002a2c <HAL_RCC_OscConfig+0x26c>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1f0      	bne.n	80028cc <HAL_RCC_OscConfig+0x10c>
 80028ea:	e000      	b.n	80028ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d063      	beq.n	80029c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028fa:	4b4c      	ldr	r3, [pc, #304]	@ (8002a2c <HAL_RCC_OscConfig+0x26c>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f003 030c 	and.w	r3, r3, #12
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00b      	beq.n	800291e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002906:	4b49      	ldr	r3, [pc, #292]	@ (8002a2c <HAL_RCC_OscConfig+0x26c>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f003 030c 	and.w	r3, r3, #12
 800290e:	2b08      	cmp	r3, #8
 8002910:	d11c      	bne.n	800294c <HAL_RCC_OscConfig+0x18c>
 8002912:	4b46      	ldr	r3, [pc, #280]	@ (8002a2c <HAL_RCC_OscConfig+0x26c>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d116      	bne.n	800294c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800291e:	4b43      	ldr	r3, [pc, #268]	@ (8002a2c <HAL_RCC_OscConfig+0x26c>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d005      	beq.n	8002936 <HAL_RCC_OscConfig+0x176>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d001      	beq.n	8002936 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e1c0      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002936:	4b3d      	ldr	r3, [pc, #244]	@ (8002a2c <HAL_RCC_OscConfig+0x26c>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	4939      	ldr	r1, [pc, #228]	@ (8002a2c <HAL_RCC_OscConfig+0x26c>)
 8002946:	4313      	orrs	r3, r2
 8002948:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800294a:	e03a      	b.n	80029c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d020      	beq.n	8002996 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002954:	4b36      	ldr	r3, [pc, #216]	@ (8002a30 <HAL_RCC_OscConfig+0x270>)
 8002956:	2201      	movs	r2, #1
 8002958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295a:	f7fe fd7b 	bl	8001454 <HAL_GetTick>
 800295e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002960:	e008      	b.n	8002974 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002962:	f7fe fd77 	bl	8001454 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d901      	bls.n	8002974 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e1a1      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002974:	4b2d      	ldr	r3, [pc, #180]	@ (8002a2c <HAL_RCC_OscConfig+0x26c>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d0f0      	beq.n	8002962 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002980:	4b2a      	ldr	r3, [pc, #168]	@ (8002a2c <HAL_RCC_OscConfig+0x26c>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	695b      	ldr	r3, [r3, #20]
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	4927      	ldr	r1, [pc, #156]	@ (8002a2c <HAL_RCC_OscConfig+0x26c>)
 8002990:	4313      	orrs	r3, r2
 8002992:	600b      	str	r3, [r1, #0]
 8002994:	e015      	b.n	80029c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002996:	4b26      	ldr	r3, [pc, #152]	@ (8002a30 <HAL_RCC_OscConfig+0x270>)
 8002998:	2200      	movs	r2, #0
 800299a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800299c:	f7fe fd5a 	bl	8001454 <HAL_GetTick>
 80029a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029a4:	f7fe fd56 	bl	8001454 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e180      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029b6:	4b1d      	ldr	r3, [pc, #116]	@ (8002a2c <HAL_RCC_OscConfig+0x26c>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1f0      	bne.n	80029a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0308 	and.w	r3, r3, #8
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d03a      	beq.n	8002a44 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d019      	beq.n	8002a0a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029d6:	4b17      	ldr	r3, [pc, #92]	@ (8002a34 <HAL_RCC_OscConfig+0x274>)
 80029d8:	2201      	movs	r2, #1
 80029da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029dc:	f7fe fd3a 	bl	8001454 <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029e2:	e008      	b.n	80029f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029e4:	f7fe fd36 	bl	8001454 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e160      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029f6:	4b0d      	ldr	r3, [pc, #52]	@ (8002a2c <HAL_RCC_OscConfig+0x26c>)
 80029f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d0f0      	beq.n	80029e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a02:	2001      	movs	r0, #1
 8002a04:	f000 fad0 	bl	8002fa8 <RCC_Delay>
 8002a08:	e01c      	b.n	8002a44 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a0a:	4b0a      	ldr	r3, [pc, #40]	@ (8002a34 <HAL_RCC_OscConfig+0x274>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a10:	f7fe fd20 	bl	8001454 <HAL_GetTick>
 8002a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a16:	e00f      	b.n	8002a38 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a18:	f7fe fd1c 	bl	8001454 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d908      	bls.n	8002a38 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e146      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4f8>
 8002a2a:	bf00      	nop
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	42420000 	.word	0x42420000
 8002a34:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a38:	4b92      	ldr	r3, [pc, #584]	@ (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1e9      	bne.n	8002a18 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0304 	and.w	r3, r3, #4
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 80a6 	beq.w	8002b9e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a52:	2300      	movs	r3, #0
 8002a54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a56:	4b8b      	ldr	r3, [pc, #556]	@ (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002a58:	69db      	ldr	r3, [r3, #28]
 8002a5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d10d      	bne.n	8002a7e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a62:	4b88      	ldr	r3, [pc, #544]	@ (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	4a87      	ldr	r2, [pc, #540]	@ (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002a68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a6c:	61d3      	str	r3, [r2, #28]
 8002a6e:	4b85      	ldr	r3, [pc, #532]	@ (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002a70:	69db      	ldr	r3, [r3, #28]
 8002a72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a76:	60bb      	str	r3, [r7, #8]
 8002a78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a7e:	4b82      	ldr	r3, [pc, #520]	@ (8002c88 <HAL_RCC_OscConfig+0x4c8>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d118      	bne.n	8002abc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a8a:	4b7f      	ldr	r3, [pc, #508]	@ (8002c88 <HAL_RCC_OscConfig+0x4c8>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a7e      	ldr	r2, [pc, #504]	@ (8002c88 <HAL_RCC_OscConfig+0x4c8>)
 8002a90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a96:	f7fe fcdd 	bl	8001454 <HAL_GetTick>
 8002a9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a9c:	e008      	b.n	8002ab0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a9e:	f7fe fcd9 	bl	8001454 <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	2b64      	cmp	r3, #100	@ 0x64
 8002aaa:	d901      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e103      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab0:	4b75      	ldr	r3, [pc, #468]	@ (8002c88 <HAL_RCC_OscConfig+0x4c8>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d0f0      	beq.n	8002a9e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d106      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x312>
 8002ac4:	4b6f      	ldr	r3, [pc, #444]	@ (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002ac6:	6a1b      	ldr	r3, [r3, #32]
 8002ac8:	4a6e      	ldr	r2, [pc, #440]	@ (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002aca:	f043 0301 	orr.w	r3, r3, #1
 8002ace:	6213      	str	r3, [r2, #32]
 8002ad0:	e02d      	b.n	8002b2e <HAL_RCC_OscConfig+0x36e>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d10c      	bne.n	8002af4 <HAL_RCC_OscConfig+0x334>
 8002ada:	4b6a      	ldr	r3, [pc, #424]	@ (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	4a69      	ldr	r2, [pc, #420]	@ (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002ae0:	f023 0301 	bic.w	r3, r3, #1
 8002ae4:	6213      	str	r3, [r2, #32]
 8002ae6:	4b67      	ldr	r3, [pc, #412]	@ (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	4a66      	ldr	r2, [pc, #408]	@ (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002aec:	f023 0304 	bic.w	r3, r3, #4
 8002af0:	6213      	str	r3, [r2, #32]
 8002af2:	e01c      	b.n	8002b2e <HAL_RCC_OscConfig+0x36e>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	2b05      	cmp	r3, #5
 8002afa:	d10c      	bne.n	8002b16 <HAL_RCC_OscConfig+0x356>
 8002afc:	4b61      	ldr	r3, [pc, #388]	@ (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002afe:	6a1b      	ldr	r3, [r3, #32]
 8002b00:	4a60      	ldr	r2, [pc, #384]	@ (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002b02:	f043 0304 	orr.w	r3, r3, #4
 8002b06:	6213      	str	r3, [r2, #32]
 8002b08:	4b5e      	ldr	r3, [pc, #376]	@ (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002b0a:	6a1b      	ldr	r3, [r3, #32]
 8002b0c:	4a5d      	ldr	r2, [pc, #372]	@ (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002b0e:	f043 0301 	orr.w	r3, r3, #1
 8002b12:	6213      	str	r3, [r2, #32]
 8002b14:	e00b      	b.n	8002b2e <HAL_RCC_OscConfig+0x36e>
 8002b16:	4b5b      	ldr	r3, [pc, #364]	@ (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002b18:	6a1b      	ldr	r3, [r3, #32]
 8002b1a:	4a5a      	ldr	r2, [pc, #360]	@ (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002b1c:	f023 0301 	bic.w	r3, r3, #1
 8002b20:	6213      	str	r3, [r2, #32]
 8002b22:	4b58      	ldr	r3, [pc, #352]	@ (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	4a57      	ldr	r2, [pc, #348]	@ (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002b28:	f023 0304 	bic.w	r3, r3, #4
 8002b2c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d015      	beq.n	8002b62 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b36:	f7fe fc8d 	bl	8001454 <HAL_GetTick>
 8002b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b3c:	e00a      	b.n	8002b54 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b3e:	f7fe fc89 	bl	8001454 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d901      	bls.n	8002b54 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e0b1      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b54:	4b4b      	ldr	r3, [pc, #300]	@ (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002b56:	6a1b      	ldr	r3, [r3, #32]
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d0ee      	beq.n	8002b3e <HAL_RCC_OscConfig+0x37e>
 8002b60:	e014      	b.n	8002b8c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b62:	f7fe fc77 	bl	8001454 <HAL_GetTick>
 8002b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b68:	e00a      	b.n	8002b80 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b6a:	f7fe fc73 	bl	8001454 <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d901      	bls.n	8002b80 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e09b      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b80:	4b40      	ldr	r3, [pc, #256]	@ (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002b82:	6a1b      	ldr	r3, [r3, #32]
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d1ee      	bne.n	8002b6a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b8c:	7dfb      	ldrb	r3, [r7, #23]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d105      	bne.n	8002b9e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b92:	4b3c      	ldr	r3, [pc, #240]	@ (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002b94:	69db      	ldr	r3, [r3, #28]
 8002b96:	4a3b      	ldr	r2, [pc, #236]	@ (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002b98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b9c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	69db      	ldr	r3, [r3, #28]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f000 8087 	beq.w	8002cb6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ba8:	4b36      	ldr	r3, [pc, #216]	@ (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f003 030c 	and.w	r3, r3, #12
 8002bb0:	2b08      	cmp	r3, #8
 8002bb2:	d061      	beq.n	8002c78 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	69db      	ldr	r3, [r3, #28]
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d146      	bne.n	8002c4a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bbc:	4b33      	ldr	r3, [pc, #204]	@ (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc2:	f7fe fc47 	bl	8001454 <HAL_GetTick>
 8002bc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bc8:	e008      	b.n	8002bdc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bca:	f7fe fc43 	bl	8001454 <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d901      	bls.n	8002bdc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e06d      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bdc:	4b29      	ldr	r3, [pc, #164]	@ (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d1f0      	bne.n	8002bca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bf0:	d108      	bne.n	8002c04 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002bf2:	4b24      	ldr	r3, [pc, #144]	@ (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	4921      	ldr	r1, [pc, #132]	@ (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c04:	4b1f      	ldr	r3, [pc, #124]	@ (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a19      	ldr	r1, [r3, #32]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c14:	430b      	orrs	r3, r1
 8002c16:	491b      	ldr	r1, [pc, #108]	@ (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c1c:	4b1b      	ldr	r3, [pc, #108]	@ (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002c1e:	2201      	movs	r2, #1
 8002c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c22:	f7fe fc17 	bl	8001454 <HAL_GetTick>
 8002c26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c28:	e008      	b.n	8002c3c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c2a:	f7fe fc13 	bl	8001454 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d901      	bls.n	8002c3c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e03d      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c3c:	4b11      	ldr	r3, [pc, #68]	@ (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d0f0      	beq.n	8002c2a <HAL_RCC_OscConfig+0x46a>
 8002c48:	e035      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c4a:	4b10      	ldr	r3, [pc, #64]	@ (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c50:	f7fe fc00 	bl	8001454 <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c58:	f7fe fbfc 	bl	8001454 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e026      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c6a:	4b06      	ldr	r3, [pc, #24]	@ (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1f0      	bne.n	8002c58 <HAL_RCC_OscConfig+0x498>
 8002c76:	e01e      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	69db      	ldr	r3, [r3, #28]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d107      	bne.n	8002c90 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e019      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4f8>
 8002c84:	40021000 	.word	0x40021000
 8002c88:	40007000 	.word	0x40007000
 8002c8c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c90:	4b0b      	ldr	r3, [pc, #44]	@ (8002cc0 <HAL_RCC_OscConfig+0x500>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d106      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d001      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e000      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002cb6:	2300      	movs	r3, #0
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3718      	adds	r7, #24
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	40021000 	.word	0x40021000

08002cc4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d101      	bne.n	8002cd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e0d0      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cd8:	4b6a      	ldr	r3, [pc, #424]	@ (8002e84 <HAL_RCC_ClockConfig+0x1c0>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0307 	and.w	r3, r3, #7
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d910      	bls.n	8002d08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ce6:	4b67      	ldr	r3, [pc, #412]	@ (8002e84 <HAL_RCC_ClockConfig+0x1c0>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f023 0207 	bic.w	r2, r3, #7
 8002cee:	4965      	ldr	r1, [pc, #404]	@ (8002e84 <HAL_RCC_ClockConfig+0x1c0>)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cf6:	4b63      	ldr	r3, [pc, #396]	@ (8002e84 <HAL_RCC_ClockConfig+0x1c0>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0307 	and.w	r3, r3, #7
 8002cfe:	683a      	ldr	r2, [r7, #0]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d001      	beq.n	8002d08 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e0b8      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d020      	beq.n	8002d56 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0304 	and.w	r3, r3, #4
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d005      	beq.n	8002d2c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d20:	4b59      	ldr	r3, [pc, #356]	@ (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	4a58      	ldr	r2, [pc, #352]	@ (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002d26:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002d2a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0308 	and.w	r3, r3, #8
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d005      	beq.n	8002d44 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d38:	4b53      	ldr	r3, [pc, #332]	@ (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	4a52      	ldr	r2, [pc, #328]	@ (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002d3e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002d42:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d44:	4b50      	ldr	r3, [pc, #320]	@ (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	494d      	ldr	r1, [pc, #308]	@ (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d040      	beq.n	8002de4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d107      	bne.n	8002d7a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d6a:	4b47      	ldr	r3, [pc, #284]	@ (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d115      	bne.n	8002da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e07f      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d107      	bne.n	8002d92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d82:	4b41      	ldr	r3, [pc, #260]	@ (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d109      	bne.n	8002da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e073      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d92:	4b3d      	ldr	r3, [pc, #244]	@ (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e06b      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002da2:	4b39      	ldr	r3, [pc, #228]	@ (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f023 0203 	bic.w	r2, r3, #3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	4936      	ldr	r1, [pc, #216]	@ (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002db4:	f7fe fb4e 	bl	8001454 <HAL_GetTick>
 8002db8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dba:	e00a      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dbc:	f7fe fb4a 	bl	8001454 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e053      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dd2:	4b2d      	ldr	r3, [pc, #180]	@ (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f003 020c 	and.w	r2, r3, #12
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d1eb      	bne.n	8002dbc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002de4:	4b27      	ldr	r3, [pc, #156]	@ (8002e84 <HAL_RCC_ClockConfig+0x1c0>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0307 	and.w	r3, r3, #7
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d210      	bcs.n	8002e14 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002df2:	4b24      	ldr	r3, [pc, #144]	@ (8002e84 <HAL_RCC_ClockConfig+0x1c0>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f023 0207 	bic.w	r2, r3, #7
 8002dfa:	4922      	ldr	r1, [pc, #136]	@ (8002e84 <HAL_RCC_ClockConfig+0x1c0>)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e02:	4b20      	ldr	r3, [pc, #128]	@ (8002e84 <HAL_RCC_ClockConfig+0x1c0>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0307 	and.w	r3, r3, #7
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d001      	beq.n	8002e14 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e032      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0304 	and.w	r3, r3, #4
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d008      	beq.n	8002e32 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e20:	4b19      	ldr	r3, [pc, #100]	@ (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	4916      	ldr	r1, [pc, #88]	@ (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0308 	and.w	r3, r3, #8
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d009      	beq.n	8002e52 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e3e:	4b12      	ldr	r3, [pc, #72]	@ (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	490e      	ldr	r1, [pc, #56]	@ (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e52:	f000 f821 	bl	8002e98 <HAL_RCC_GetSysClockFreq>
 8002e56:	4602      	mov	r2, r0
 8002e58:	4b0b      	ldr	r3, [pc, #44]	@ (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	091b      	lsrs	r3, r3, #4
 8002e5e:	f003 030f 	and.w	r3, r3, #15
 8002e62:	490a      	ldr	r1, [pc, #40]	@ (8002e8c <HAL_RCC_ClockConfig+0x1c8>)
 8002e64:	5ccb      	ldrb	r3, [r1, r3]
 8002e66:	fa22 f303 	lsr.w	r3, r2, r3
 8002e6a:	4a09      	ldr	r2, [pc, #36]	@ (8002e90 <HAL_RCC_ClockConfig+0x1cc>)
 8002e6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e6e:	4b09      	ldr	r3, [pc, #36]	@ (8002e94 <HAL_RCC_ClockConfig+0x1d0>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7fe faac 	bl	80013d0 <HAL_InitTick>

  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	40022000 	.word	0x40022000
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	08007dcc 	.word	0x08007dcc
 8002e90:	20000000 	.word	0x20000000
 8002e94:	20000004 	.word	0x20000004

08002e98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b087      	sub	sp, #28
 8002e9c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	60fb      	str	r3, [r7, #12]
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	60bb      	str	r3, [r7, #8]
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	617b      	str	r3, [r7, #20]
 8002eaa:	2300      	movs	r3, #0
 8002eac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002eb2:	4b1e      	ldr	r3, [pc, #120]	@ (8002f2c <HAL_RCC_GetSysClockFreq+0x94>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f003 030c 	and.w	r3, r3, #12
 8002ebe:	2b04      	cmp	r3, #4
 8002ec0:	d002      	beq.n	8002ec8 <HAL_RCC_GetSysClockFreq+0x30>
 8002ec2:	2b08      	cmp	r3, #8
 8002ec4:	d003      	beq.n	8002ece <HAL_RCC_GetSysClockFreq+0x36>
 8002ec6:	e027      	b.n	8002f18 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ec8:	4b19      	ldr	r3, [pc, #100]	@ (8002f30 <HAL_RCC_GetSysClockFreq+0x98>)
 8002eca:	613b      	str	r3, [r7, #16]
      break;
 8002ecc:	e027      	b.n	8002f1e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	0c9b      	lsrs	r3, r3, #18
 8002ed2:	f003 030f 	and.w	r3, r3, #15
 8002ed6:	4a17      	ldr	r2, [pc, #92]	@ (8002f34 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ed8:	5cd3      	ldrb	r3, [r2, r3]
 8002eda:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d010      	beq.n	8002f08 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ee6:	4b11      	ldr	r3, [pc, #68]	@ (8002f2c <HAL_RCC_GetSysClockFreq+0x94>)
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	0c5b      	lsrs	r3, r3, #17
 8002eec:	f003 0301 	and.w	r3, r3, #1
 8002ef0:	4a11      	ldr	r2, [pc, #68]	@ (8002f38 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002ef2:	5cd3      	ldrb	r3, [r2, r3]
 8002ef4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a0d      	ldr	r2, [pc, #52]	@ (8002f30 <HAL_RCC_GetSysClockFreq+0x98>)
 8002efa:	fb03 f202 	mul.w	r2, r3, r2
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f04:	617b      	str	r3, [r7, #20]
 8002f06:	e004      	b.n	8002f12 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a0c      	ldr	r2, [pc, #48]	@ (8002f3c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002f0c:	fb02 f303 	mul.w	r3, r2, r3
 8002f10:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	613b      	str	r3, [r7, #16]
      break;
 8002f16:	e002      	b.n	8002f1e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f18:	4b09      	ldr	r3, [pc, #36]	@ (8002f40 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002f1a:	613b      	str	r3, [r7, #16]
      break;
 8002f1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f1e:	693b      	ldr	r3, [r7, #16]
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	371c      	adds	r7, #28
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bc80      	pop	{r7}
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	00f42400 	.word	0x00f42400
 8002f34:	08007de4 	.word	0x08007de4
 8002f38:	08007df4 	.word	0x08007df4
 8002f3c:	003d0900 	.word	0x003d0900
 8002f40:	007a1200 	.word	0x007a1200

08002f44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f48:	4b02      	ldr	r3, [pc, #8]	@ (8002f54 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bc80      	pop	{r7}
 8002f52:	4770      	bx	lr
 8002f54:	20000000 	.word	0x20000000

08002f58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f5c:	f7ff fff2 	bl	8002f44 <HAL_RCC_GetHCLKFreq>
 8002f60:	4602      	mov	r2, r0
 8002f62:	4b05      	ldr	r3, [pc, #20]	@ (8002f78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	0a1b      	lsrs	r3, r3, #8
 8002f68:	f003 0307 	and.w	r3, r3, #7
 8002f6c:	4903      	ldr	r1, [pc, #12]	@ (8002f7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f6e:	5ccb      	ldrb	r3, [r1, r3]
 8002f70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	08007ddc 	.word	0x08007ddc

08002f80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f84:	f7ff ffde 	bl	8002f44 <HAL_RCC_GetHCLKFreq>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	4b05      	ldr	r3, [pc, #20]	@ (8002fa0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	0adb      	lsrs	r3, r3, #11
 8002f90:	f003 0307 	and.w	r3, r3, #7
 8002f94:	4903      	ldr	r1, [pc, #12]	@ (8002fa4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f96:	5ccb      	ldrb	r3, [r1, r3]
 8002f98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	08007ddc 	.word	0x08007ddc

08002fa8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002fb0:	4b0a      	ldr	r3, [pc, #40]	@ (8002fdc <RCC_Delay+0x34>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a0a      	ldr	r2, [pc, #40]	@ (8002fe0 <RCC_Delay+0x38>)
 8002fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fba:	0a5b      	lsrs	r3, r3, #9
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	fb02 f303 	mul.w	r3, r2, r3
 8002fc2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002fc4:	bf00      	nop
  }
  while (Delay --);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	1e5a      	subs	r2, r3, #1
 8002fca:	60fa      	str	r2, [r7, #12]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d1f9      	bne.n	8002fc4 <RCC_Delay+0x1c>
}
 8002fd0:	bf00      	nop
 8002fd2:	bf00      	nop
 8002fd4:	3714      	adds	r7, #20
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bc80      	pop	{r7}
 8002fda:	4770      	bx	lr
 8002fdc:	20000000 	.word	0x20000000
 8002fe0:	10624dd3 	.word	0x10624dd3

08002fe4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e076      	b.n	80030e4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d108      	bne.n	8003010 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003006:	d009      	beq.n	800301c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	61da      	str	r2, [r3, #28]
 800300e:	e005      	b.n	800301c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d106      	bne.n	800303c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f7fd ff86 	bl	8000f48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2202      	movs	r2, #2
 8003040:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003052:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003064:	431a      	orrs	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800306e:	431a      	orrs	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	f003 0302 	and.w	r3, r3, #2
 8003078:	431a      	orrs	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	431a      	orrs	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800308c:	431a      	orrs	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003096:	431a      	orrs	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a1b      	ldr	r3, [r3, #32]
 800309c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030a0:	ea42 0103 	orr.w	r1, r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030a8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	430a      	orrs	r2, r1
 80030b2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	0c1a      	lsrs	r2, r3, #16
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f002 0204 	and.w	r2, r2, #4
 80030c2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	69da      	ldr	r2, [r3, #28]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030d2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3708      	adds	r7, #8
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b088      	sub	sp, #32
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	603b      	str	r3, [r7, #0]
 80030f8:	4613      	mov	r3, r2
 80030fa:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030fc:	f7fe f9aa 	bl	8001454 <HAL_GetTick>
 8003100:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003102:	88fb      	ldrh	r3, [r7, #6]
 8003104:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b01      	cmp	r3, #1
 8003110:	d001      	beq.n	8003116 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003112:	2302      	movs	r3, #2
 8003114:	e12a      	b.n	800336c <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d002      	beq.n	8003122 <HAL_SPI_Transmit+0x36>
 800311c:	88fb      	ldrh	r3, [r7, #6]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e122      	b.n	800336c <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800312c:	2b01      	cmp	r3, #1
 800312e:	d101      	bne.n	8003134 <HAL_SPI_Transmit+0x48>
 8003130:	2302      	movs	r3, #2
 8003132:	e11b      	b.n	800336c <HAL_SPI_Transmit+0x280>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2203      	movs	r2, #3
 8003140:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	68ba      	ldr	r2, [r7, #8]
 800314e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	88fa      	ldrh	r2, [r7, #6]
 8003154:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	88fa      	ldrh	r2, [r7, #6]
 800315a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003182:	d10f      	bne.n	80031a4 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003192:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80031a2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031ae:	2b40      	cmp	r3, #64	@ 0x40
 80031b0:	d007      	beq.n	80031c2 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80031c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80031ca:	d152      	bne.n	8003272 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d002      	beq.n	80031da <HAL_SPI_Transmit+0xee>
 80031d4:	8b7b      	ldrh	r3, [r7, #26]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d145      	bne.n	8003266 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031de:	881a      	ldrh	r2, [r3, #0]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ea:	1c9a      	adds	r2, r3, #2
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	3b01      	subs	r3, #1
 80031f8:	b29a      	uxth	r2, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80031fe:	e032      	b.n	8003266 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b02      	cmp	r3, #2
 800320c:	d112      	bne.n	8003234 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003212:	881a      	ldrh	r2, [r3, #0]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800321e:	1c9a      	adds	r2, r3, #2
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003228:	b29b      	uxth	r3, r3
 800322a:	3b01      	subs	r3, #1
 800322c:	b29a      	uxth	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003232:	e018      	b.n	8003266 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003234:	f7fe f90e 	bl	8001454 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	683a      	ldr	r2, [r7, #0]
 8003240:	429a      	cmp	r2, r3
 8003242:	d803      	bhi.n	800324c <HAL_SPI_Transmit+0x160>
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800324a:	d102      	bne.n	8003252 <HAL_SPI_Transmit+0x166>
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d109      	bne.n	8003266 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2201      	movs	r2, #1
 8003256:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e082      	b.n	800336c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800326a:	b29b      	uxth	r3, r3
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1c7      	bne.n	8003200 <HAL_SPI_Transmit+0x114>
 8003270:	e053      	b.n	800331a <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d002      	beq.n	8003280 <HAL_SPI_Transmit+0x194>
 800327a:	8b7b      	ldrh	r3, [r7, #26]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d147      	bne.n	8003310 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	330c      	adds	r3, #12
 800328a:	7812      	ldrb	r2, [r2, #0]
 800328c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003292:	1c5a      	adds	r2, r3, #1
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800329c:	b29b      	uxth	r3, r3
 800329e:	3b01      	subs	r3, #1
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80032a6:	e033      	b.n	8003310 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d113      	bne.n	80032de <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	330c      	adds	r3, #12
 80032c0:	7812      	ldrb	r2, [r2, #0]
 80032c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c8:	1c5a      	adds	r2, r3, #1
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	3b01      	subs	r3, #1
 80032d6:	b29a      	uxth	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	86da      	strh	r2, [r3, #54]	@ 0x36
 80032dc:	e018      	b.n	8003310 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032de:	f7fe f8b9 	bl	8001454 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	683a      	ldr	r2, [r7, #0]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d803      	bhi.n	80032f6 <HAL_SPI_Transmit+0x20a>
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f4:	d102      	bne.n	80032fc <HAL_SPI_Transmit+0x210>
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d109      	bne.n	8003310 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e02d      	b.n	800336c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003314:	b29b      	uxth	r3, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1c6      	bne.n	80032a8 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800331a:	69fa      	ldr	r2, [r7, #28]
 800331c:	6839      	ldr	r1, [r7, #0]
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f000 f8be 	bl	80034a0 <SPI_EndRxTxTransaction>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d002      	beq.n	8003330 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2220      	movs	r2, #32
 800332e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d10a      	bne.n	800334e <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003338:	2300      	movs	r3, #0
 800333a:	617b      	str	r3, [r7, #20]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	617b      	str	r3, [r7, #20]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	617b      	str	r3, [r7, #20]
 800334c:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2201      	movs	r2, #1
 8003352:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e000      	b.n	800336c <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800336a:	2300      	movs	r3, #0
  }
}
 800336c:	4618      	mov	r0, r3
 800336e:	3720      	adds	r7, #32
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003382:	b2db      	uxtb	r3, r3
}
 8003384:	4618      	mov	r0, r3
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	bc80      	pop	{r7}
 800338c:	4770      	bx	lr
	...

08003390 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b088      	sub	sp, #32
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	603b      	str	r3, [r7, #0]
 800339c:	4613      	mov	r3, r2
 800339e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80033a0:	f7fe f858 	bl	8001454 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033a8:	1a9b      	subs	r3, r3, r2
 80033aa:	683a      	ldr	r2, [r7, #0]
 80033ac:	4413      	add	r3, r2
 80033ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80033b0:	f7fe f850 	bl	8001454 <HAL_GetTick>
 80033b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80033b6:	4b39      	ldr	r3, [pc, #228]	@ (800349c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	015b      	lsls	r3, r3, #5
 80033bc:	0d1b      	lsrs	r3, r3, #20
 80033be:	69fa      	ldr	r2, [r7, #28]
 80033c0:	fb02 f303 	mul.w	r3, r2, r3
 80033c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033c6:	e054      	b.n	8003472 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ce:	d050      	beq.n	8003472 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80033d0:	f7fe f840 	bl	8001454 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	69fa      	ldr	r2, [r7, #28]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d902      	bls.n	80033e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d13d      	bne.n	8003462 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	685a      	ldr	r2, [r3, #4]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80033f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80033fe:	d111      	bne.n	8003424 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003408:	d004      	beq.n	8003414 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003412:	d107      	bne.n	8003424 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003422:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003428:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800342c:	d10f      	bne.n	800344e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800343c:	601a      	str	r2, [r3, #0]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800344c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e017      	b.n	8003492 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d101      	bne.n	800346c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003468:	2300      	movs	r3, #0
 800346a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	3b01      	subs	r3, #1
 8003470:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	689a      	ldr	r2, [r3, #8]
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	4013      	ands	r3, r2
 800347c:	68ba      	ldr	r2, [r7, #8]
 800347e:	429a      	cmp	r2, r3
 8003480:	bf0c      	ite	eq
 8003482:	2301      	moveq	r3, #1
 8003484:	2300      	movne	r3, #0
 8003486:	b2db      	uxtb	r3, r3
 8003488:	461a      	mov	r2, r3
 800348a:	79fb      	ldrb	r3, [r7, #7]
 800348c:	429a      	cmp	r2, r3
 800348e:	d19b      	bne.n	80033c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3720      	adds	r7, #32
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	20000000 	.word	0x20000000

080034a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b086      	sub	sp, #24
 80034a4:	af02      	add	r7, sp, #8
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	9300      	str	r3, [sp, #0]
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	2201      	movs	r2, #1
 80034b4:	2102      	movs	r1, #2
 80034b6:	68f8      	ldr	r0, [r7, #12]
 80034b8:	f7ff ff6a 	bl	8003390 <SPI_WaitFlagStateUntilTimeout>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d007      	beq.n	80034d2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034c6:	f043 0220 	orr.w	r2, r3, #32
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e013      	b.n	80034fa <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	9300      	str	r3, [sp, #0]
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	2200      	movs	r2, #0
 80034da:	2180      	movs	r1, #128	@ 0x80
 80034dc:	68f8      	ldr	r0, [r7, #12]
 80034de:	f7ff ff57 	bl	8003390 <SPI_WaitFlagStateUntilTimeout>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d007      	beq.n	80034f8 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ec:	f043 0220 	orr.w	r2, r3, #32
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e000      	b.n	80034fa <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b082      	sub	sp, #8
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d101      	bne.n	8003514 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e042      	b.n	800359a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800351a:	b2db      	uxtb	r3, r3
 800351c:	2b00      	cmp	r3, #0
 800351e:	d106      	bne.n	800352e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f7fd fec1 	bl	80012b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2224      	movs	r2, #36	@ 0x24
 8003532:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68da      	ldr	r2, [r3, #12]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003544:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 fd80 	bl	800404c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	691a      	ldr	r2, [r3, #16]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800355a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	695a      	ldr	r2, [r3, #20]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800356a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68da      	ldr	r2, [r3, #12]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800357a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2220      	movs	r2, #32
 8003586:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2220      	movs	r2, #32
 800358e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b08a      	sub	sp, #40	@ 0x28
 80035a6:	af02      	add	r7, sp, #8
 80035a8:	60f8      	str	r0, [r7, #12]
 80035aa:	60b9      	str	r1, [r7, #8]
 80035ac:	603b      	str	r3, [r7, #0]
 80035ae:	4613      	mov	r3, r2
 80035b0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80035b2:	2300      	movs	r3, #0
 80035b4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b20      	cmp	r3, #32
 80035c0:	d175      	bne.n	80036ae <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d002      	beq.n	80035ce <HAL_UART_Transmit+0x2c>
 80035c8:	88fb      	ldrh	r3, [r7, #6]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e06e      	b.n	80036b0 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2200      	movs	r2, #0
 80035d6:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2221      	movs	r2, #33	@ 0x21
 80035dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035e0:	f7fd ff38 	bl	8001454 <HAL_GetTick>
 80035e4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	88fa      	ldrh	r2, [r7, #6]
 80035ea:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	88fa      	ldrh	r2, [r7, #6]
 80035f0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035fa:	d108      	bne.n	800360e <HAL_UART_Transmit+0x6c>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d104      	bne.n	800360e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003604:	2300      	movs	r3, #0
 8003606:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	61bb      	str	r3, [r7, #24]
 800360c:	e003      	b.n	8003616 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003612:	2300      	movs	r3, #0
 8003614:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003616:	e02e      	b.n	8003676 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	9300      	str	r3, [sp, #0]
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	2200      	movs	r2, #0
 8003620:	2180      	movs	r1, #128	@ 0x80
 8003622:	68f8      	ldr	r0, [r7, #12]
 8003624:	f000 fb1d 	bl	8003c62 <UART_WaitOnFlagUntilTimeout>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d005      	beq.n	800363a <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2220      	movs	r2, #32
 8003632:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e03a      	b.n	80036b0 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d10b      	bne.n	8003658 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	881b      	ldrh	r3, [r3, #0]
 8003644:	461a      	mov	r2, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800364e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	3302      	adds	r3, #2
 8003654:	61bb      	str	r3, [r7, #24]
 8003656:	e007      	b.n	8003668 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	781a      	ldrb	r2, [r3, #0]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	3301      	adds	r3, #1
 8003666:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800366c:	b29b      	uxth	r3, r3
 800366e:	3b01      	subs	r3, #1
 8003670:	b29a      	uxth	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800367a:	b29b      	uxth	r3, r3
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1cb      	bne.n	8003618 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	2200      	movs	r2, #0
 8003688:	2140      	movs	r1, #64	@ 0x40
 800368a:	68f8      	ldr	r0, [r7, #12]
 800368c:	f000 fae9 	bl	8003c62 <UART_WaitOnFlagUntilTimeout>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d005      	beq.n	80036a2 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2220      	movs	r2, #32
 800369a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e006      	b.n	80036b0 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2220      	movs	r2, #32
 80036a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80036aa:	2300      	movs	r3, #0
 80036ac:	e000      	b.n	80036b0 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80036ae:	2302      	movs	r3, #2
  }
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3720      	adds	r7, #32
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b0ba      	sub	sp, #232	@ 0xe8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80036de:	2300      	movs	r3, #0
 80036e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80036e4:	2300      	movs	r3, #0
 80036e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80036ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036ee:	f003 030f 	and.w	r3, r3, #15
 80036f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80036f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d10f      	bne.n	800371e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003702:	f003 0320 	and.w	r3, r3, #32
 8003706:	2b00      	cmp	r3, #0
 8003708:	d009      	beq.n	800371e <HAL_UART_IRQHandler+0x66>
 800370a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800370e:	f003 0320 	and.w	r3, r3, #32
 8003712:	2b00      	cmp	r3, #0
 8003714:	d003      	beq.n	800371e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 fbd9 	bl	8003ece <UART_Receive_IT>
      return;
 800371c:	e25b      	b.n	8003bd6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800371e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003722:	2b00      	cmp	r3, #0
 8003724:	f000 80de 	beq.w	80038e4 <HAL_UART_IRQHandler+0x22c>
 8003728:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800372c:	f003 0301 	and.w	r3, r3, #1
 8003730:	2b00      	cmp	r3, #0
 8003732:	d106      	bne.n	8003742 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003734:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003738:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800373c:	2b00      	cmp	r3, #0
 800373e:	f000 80d1 	beq.w	80038e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00b      	beq.n	8003766 <HAL_UART_IRQHandler+0xae>
 800374e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003752:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003756:	2b00      	cmp	r3, #0
 8003758:	d005      	beq.n	8003766 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800375e:	f043 0201 	orr.w	r2, r3, #1
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800376a:	f003 0304 	and.w	r3, r3, #4
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00b      	beq.n	800378a <HAL_UART_IRQHandler+0xd2>
 8003772:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b00      	cmp	r3, #0
 800377c:	d005      	beq.n	800378a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003782:	f043 0202 	orr.w	r2, r3, #2
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800378a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00b      	beq.n	80037ae <HAL_UART_IRQHandler+0xf6>
 8003796:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d005      	beq.n	80037ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037a6:	f043 0204 	orr.w	r2, r3, #4
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80037ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037b2:	f003 0308 	and.w	r3, r3, #8
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d011      	beq.n	80037de <HAL_UART_IRQHandler+0x126>
 80037ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037be:	f003 0320 	and.w	r3, r3, #32
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d105      	bne.n	80037d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80037c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d005      	beq.n	80037de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037d6:	f043 0208 	orr.w	r2, r3, #8
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	f000 81f2 	beq.w	8003bcc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037ec:	f003 0320 	and.w	r3, r3, #32
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d008      	beq.n	8003806 <HAL_UART_IRQHandler+0x14e>
 80037f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037f8:	f003 0320 	and.w	r3, r3, #32
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d002      	beq.n	8003806 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 fb64 	bl	8003ece <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	695b      	ldr	r3, [r3, #20]
 800380c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003810:	2b00      	cmp	r3, #0
 8003812:	bf14      	ite	ne
 8003814:	2301      	movne	r3, #1
 8003816:	2300      	moveq	r3, #0
 8003818:	b2db      	uxtb	r3, r3
 800381a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003822:	f003 0308 	and.w	r3, r3, #8
 8003826:	2b00      	cmp	r3, #0
 8003828:	d103      	bne.n	8003832 <HAL_UART_IRQHandler+0x17a>
 800382a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800382e:	2b00      	cmp	r3, #0
 8003830:	d04f      	beq.n	80038d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 fa6e 	bl	8003d14 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003842:	2b00      	cmp	r3, #0
 8003844:	d041      	beq.n	80038ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	3314      	adds	r3, #20
 800384c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003850:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003854:	e853 3f00 	ldrex	r3, [r3]
 8003858:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800385c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003860:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003864:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	3314      	adds	r3, #20
 800386e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003872:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003876:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800387a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800387e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003882:	e841 2300 	strex	r3, r2, [r1]
 8003886:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800388a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1d9      	bne.n	8003846 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003896:	2b00      	cmp	r3, #0
 8003898:	d013      	beq.n	80038c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800389e:	4a7e      	ldr	r2, [pc, #504]	@ (8003a98 <HAL_UART_IRQHandler+0x3e0>)
 80038a0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7fd ff7c 	bl	80017a4 <HAL_DMA_Abort_IT>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d016      	beq.n	80038e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80038bc:	4610      	mov	r0, r2
 80038be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038c0:	e00e      	b.n	80038e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 f99c 	bl	8003c00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038c8:	e00a      	b.n	80038e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f998 	bl	8003c00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038d0:	e006      	b.n	80038e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 f994 	bl	8003c00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80038de:	e175      	b.n	8003bcc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038e0:	bf00      	nop
    return;
 80038e2:	e173      	b.n	8003bcc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	f040 814f 	bne.w	8003b8c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80038ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038f2:	f003 0310 	and.w	r3, r3, #16
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f000 8148 	beq.w	8003b8c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80038fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003900:	f003 0310 	and.w	r3, r3, #16
 8003904:	2b00      	cmp	r3, #0
 8003906:	f000 8141 	beq.w	8003b8c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800390a:	2300      	movs	r3, #0
 800390c:	60bb      	str	r3, [r7, #8]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	60bb      	str	r3, [r7, #8]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	60bb      	str	r3, [r7, #8]
 800391e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800392a:	2b00      	cmp	r3, #0
 800392c:	f000 80b6 	beq.w	8003a9c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800393c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003940:	2b00      	cmp	r3, #0
 8003942:	f000 8145 	beq.w	8003bd0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800394a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800394e:	429a      	cmp	r2, r3
 8003950:	f080 813e 	bcs.w	8003bd0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800395a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	2b20      	cmp	r3, #32
 8003964:	f000 8088 	beq.w	8003a78 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	330c      	adds	r3, #12
 800396e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003972:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003976:	e853 3f00 	ldrex	r3, [r3]
 800397a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800397e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003982:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003986:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	330c      	adds	r3, #12
 8003990:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003994:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003998:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800399c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80039a0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80039a4:	e841 2300 	strex	r3, r2, [r1]
 80039a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80039ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1d9      	bne.n	8003968 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	3314      	adds	r3, #20
 80039ba:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039be:	e853 3f00 	ldrex	r3, [r3]
 80039c2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80039c4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80039c6:	f023 0301 	bic.w	r3, r3, #1
 80039ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	3314      	adds	r3, #20
 80039d4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80039d8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80039dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039de:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80039e0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80039e4:	e841 2300 	strex	r3, r2, [r1]
 80039e8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80039ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d1e1      	bne.n	80039b4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	3314      	adds	r3, #20
 80039f6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80039fa:	e853 3f00 	ldrex	r3, [r3]
 80039fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003a00:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a06:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	3314      	adds	r3, #20
 8003a10:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003a14:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003a16:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a18:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003a1a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003a1c:	e841 2300 	strex	r3, r2, [r1]
 8003a20:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003a22:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1e3      	bne.n	80039f0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2220      	movs	r2, #32
 8003a2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	330c      	adds	r3, #12
 8003a3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a40:	e853 3f00 	ldrex	r3, [r3]
 8003a44:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003a46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a48:	f023 0310 	bic.w	r3, r3, #16
 8003a4c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	330c      	adds	r3, #12
 8003a56:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003a5a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003a5c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a5e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003a60:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003a62:	e841 2300 	strex	r3, r2, [r1]
 8003a66:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003a68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1e3      	bne.n	8003a36 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7fd fe5b 	bl	800172e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2202      	movs	r2, #2
 8003a7c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 f8bf 	bl	8003c12 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a94:	e09c      	b.n	8003bd0 <HAL_UART_IRQHandler+0x518>
 8003a96:	bf00      	nop
 8003a98:	08003dd9 	.word	0x08003dd9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f000 808e 	beq.w	8003bd4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003ab8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	f000 8089 	beq.w	8003bd4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	330c      	adds	r3, #12
 8003ac8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003acc:	e853 3f00 	ldrex	r3, [r3]
 8003ad0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003ad2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ad4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ad8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	330c      	adds	r3, #12
 8003ae2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003ae6:	647a      	str	r2, [r7, #68]	@ 0x44
 8003ae8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003aec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003aee:	e841 2300 	strex	r3, r2, [r1]
 8003af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003af4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d1e3      	bne.n	8003ac2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	3314      	adds	r3, #20
 8003b00:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b04:	e853 3f00 	ldrex	r3, [r3]
 8003b08:	623b      	str	r3, [r7, #32]
   return(result);
 8003b0a:	6a3b      	ldr	r3, [r7, #32]
 8003b0c:	f023 0301 	bic.w	r3, r3, #1
 8003b10:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	3314      	adds	r3, #20
 8003b1a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003b1e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003b20:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b26:	e841 2300 	strex	r3, r2, [r1]
 8003b2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1e3      	bne.n	8003afa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2220      	movs	r2, #32
 8003b36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	330c      	adds	r3, #12
 8003b46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	e853 3f00 	ldrex	r3, [r3]
 8003b4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f023 0310 	bic.w	r3, r3, #16
 8003b56:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	330c      	adds	r3, #12
 8003b60:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003b64:	61fa      	str	r2, [r7, #28]
 8003b66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b68:	69b9      	ldr	r1, [r7, #24]
 8003b6a:	69fa      	ldr	r2, [r7, #28]
 8003b6c:	e841 2300 	strex	r3, r2, [r1]
 8003b70:	617b      	str	r3, [r7, #20]
   return(result);
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1e3      	bne.n	8003b40 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b7e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b82:	4619      	mov	r1, r3
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f000 f844 	bl	8003c12 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b8a:	e023      	b.n	8003bd4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d009      	beq.n	8003bac <HAL_UART_IRQHandler+0x4f4>
 8003b98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d003      	beq.n	8003bac <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 f92b 	bl	8003e00 <UART_Transmit_IT>
    return;
 8003baa:	e014      	b.n	8003bd6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003bac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00e      	beq.n	8003bd6 <HAL_UART_IRQHandler+0x51e>
 8003bb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d008      	beq.n	8003bd6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f000 f96a 	bl	8003e9e <UART_EndTransmit_IT>
    return;
 8003bca:	e004      	b.n	8003bd6 <HAL_UART_IRQHandler+0x51e>
    return;
 8003bcc:	bf00      	nop
 8003bce:	e002      	b.n	8003bd6 <HAL_UART_IRQHandler+0x51e>
      return;
 8003bd0:	bf00      	nop
 8003bd2:	e000      	b.n	8003bd6 <HAL_UART_IRQHandler+0x51e>
      return;
 8003bd4:	bf00      	nop
  }
}
 8003bd6:	37e8      	adds	r7, #232	@ 0xe8
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bc80      	pop	{r7}
 8003bec:	4770      	bx	lr

08003bee <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bee:	b480      	push	{r7}
 8003bf0:	b083      	sub	sp, #12
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003bf6:	bf00      	nop
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bc80      	pop	{r7}
 8003bfe:	4770      	bx	lr

08003c00 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bc80      	pop	{r7}
 8003c10:	4770      	bx	lr

08003c12 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c12:	b480      	push	{r7}
 8003c14:	b083      	sub	sp, #12
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c1e:	bf00      	nop
 8003c20:	370c      	adds	r7, #12
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bc80      	pop	{r7}
 8003c26:	4770      	bx	lr

08003c28 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8003c30:	2300      	movs	r3, #0
 8003c32:	60fb      	str	r3, [r7, #12]
 8003c34:	2300      	movs	r3, #0
 8003c36:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	b2da      	uxtb	r2, r3
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	4313      	orrs	r3, r2
 8003c56:	b2db      	uxtb	r3, r3
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3714      	adds	r7, #20
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bc80      	pop	{r7}
 8003c60:	4770      	bx	lr

08003c62 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b086      	sub	sp, #24
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	60f8      	str	r0, [r7, #12]
 8003c6a:	60b9      	str	r1, [r7, #8]
 8003c6c:	603b      	str	r3, [r7, #0]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c72:	e03b      	b.n	8003cec <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c74:	6a3b      	ldr	r3, [r7, #32]
 8003c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c7a:	d037      	beq.n	8003cec <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c7c:	f7fd fbea 	bl	8001454 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	6a3a      	ldr	r2, [r7, #32]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d302      	bcc.n	8003c92 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c8c:	6a3b      	ldr	r3, [r7, #32]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d101      	bne.n	8003c96 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e03a      	b.n	8003d0c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	f003 0304 	and.w	r3, r3, #4
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d023      	beq.n	8003cec <UART_WaitOnFlagUntilTimeout+0x8a>
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	2b80      	cmp	r3, #128	@ 0x80
 8003ca8:	d020      	beq.n	8003cec <UART_WaitOnFlagUntilTimeout+0x8a>
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	2b40      	cmp	r3, #64	@ 0x40
 8003cae:	d01d      	beq.n	8003cec <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0308 	and.w	r3, r3, #8
 8003cba:	2b08      	cmp	r3, #8
 8003cbc:	d116      	bne.n	8003cec <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	617b      	str	r3, [r7, #20]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	617b      	str	r3, [r7, #20]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	617b      	str	r3, [r7, #20]
 8003cd2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	f000 f81d 	bl	8003d14 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2208      	movs	r2, #8
 8003cde:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e00f      	b.n	8003d0c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	68ba      	ldr	r2, [r7, #8]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	bf0c      	ite	eq
 8003cfc:	2301      	moveq	r3, #1
 8003cfe:	2300      	movne	r3, #0
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	461a      	mov	r2, r3
 8003d04:	79fb      	ldrb	r3, [r7, #7]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d0b4      	beq.n	8003c74 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3718      	adds	r7, #24
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b095      	sub	sp, #84	@ 0x54
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	330c      	adds	r3, #12
 8003d22:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d26:	e853 3f00 	ldrex	r3, [r3]
 8003d2a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d2e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	330c      	adds	r3, #12
 8003d3a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d3c:	643a      	str	r2, [r7, #64]	@ 0x40
 8003d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d40:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d42:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d44:	e841 2300 	strex	r3, r2, [r1]
 8003d48:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1e5      	bne.n	8003d1c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	3314      	adds	r3, #20
 8003d56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d58:	6a3b      	ldr	r3, [r7, #32]
 8003d5a:	e853 3f00 	ldrex	r3, [r3]
 8003d5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	f023 0301 	bic.w	r3, r3, #1
 8003d66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	3314      	adds	r3, #20
 8003d6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d70:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d72:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d78:	e841 2300 	strex	r3, r2, [r1]
 8003d7c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1e5      	bne.n	8003d50 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d119      	bne.n	8003dc0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	330c      	adds	r3, #12
 8003d92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	e853 3f00 	ldrex	r3, [r3]
 8003d9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	f023 0310 	bic.w	r3, r3, #16
 8003da2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	330c      	adds	r3, #12
 8003daa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003dac:	61ba      	str	r2, [r7, #24]
 8003dae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db0:	6979      	ldr	r1, [r7, #20]
 8003db2:	69ba      	ldr	r2, [r7, #24]
 8003db4:	e841 2300 	strex	r3, r2, [r1]
 8003db8:	613b      	str	r3, [r7, #16]
   return(result);
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d1e5      	bne.n	8003d8c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2220      	movs	r2, #32
 8003dc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003dce:	bf00      	nop
 8003dd0:	3754      	adds	r7, #84	@ 0x54
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bc80      	pop	{r7}
 8003dd6:	4770      	bx	lr

08003dd8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003df2:	68f8      	ldr	r0, [r7, #12]
 8003df4:	f7ff ff04 	bl	8003c00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003df8:	bf00      	nop
 8003dfa:	3710      	adds	r7, #16
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b085      	sub	sp, #20
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	2b21      	cmp	r3, #33	@ 0x21
 8003e12:	d13e      	bne.n	8003e92 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e1c:	d114      	bne.n	8003e48 <UART_Transmit_IT+0x48>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d110      	bne.n	8003e48 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	881b      	ldrh	r3, [r3, #0]
 8003e30:	461a      	mov	r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e3a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	1c9a      	adds	r2, r3, #2
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	621a      	str	r2, [r3, #32]
 8003e46:	e008      	b.n	8003e5a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a1b      	ldr	r3, [r3, #32]
 8003e4c:	1c59      	adds	r1, r3, #1
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	6211      	str	r1, [r2, #32]
 8003e52:	781a      	ldrb	r2, [r3, #0]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	3b01      	subs	r3, #1
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	4619      	mov	r1, r3
 8003e68:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d10f      	bne.n	8003e8e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68da      	ldr	r2, [r3, #12]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e7c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68da      	ldr	r2, [r3, #12]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e8c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	e000      	b.n	8003e94 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e92:	2302      	movs	r3, #2
  }
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3714      	adds	r7, #20
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bc80      	pop	{r7}
 8003e9c:	4770      	bx	lr

08003e9e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b082      	sub	sp, #8
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68da      	ldr	r2, [r3, #12]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003eb4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2220      	movs	r2, #32
 8003eba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f7ff fe8c 	bl	8003bdc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3708      	adds	r7, #8
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b08c      	sub	sp, #48	@ 0x30
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	2b22      	cmp	r3, #34	@ 0x22
 8003ee0:	f040 80ae 	bne.w	8004040 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eec:	d117      	bne.n	8003f1e <UART_Receive_IT+0x50>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d113      	bne.n	8003f1e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003efe:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f10:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f16:	1c9a      	adds	r2, r3, #2
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f1c:	e026      	b.n	8003f6c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f22:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003f24:	2300      	movs	r3, #0
 8003f26:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f30:	d007      	beq.n	8003f42 <UART_Receive_IT+0x74>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d10a      	bne.n	8003f50 <UART_Receive_IT+0x82>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d106      	bne.n	8003f50 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	b2da      	uxtb	r2, r3
 8003f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f4c:	701a      	strb	r2, [r3, #0]
 8003f4e:	e008      	b.n	8003f62 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f5c:	b2da      	uxtb	r2, r3
 8003f5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f60:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f66:	1c5a      	adds	r2, r3, #1
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	3b01      	subs	r3, #1
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	4619      	mov	r1, r3
 8003f7a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d15d      	bne.n	800403c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68da      	ldr	r2, [r3, #12]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f022 0220 	bic.w	r2, r2, #32
 8003f8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68da      	ldr	r2, [r3, #12]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	695a      	ldr	r2, [r3, #20]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f022 0201 	bic.w	r2, r2, #1
 8003fae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2220      	movs	r2, #32
 8003fb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d135      	bne.n	8004032 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	330c      	adds	r3, #12
 8003fd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	e853 3f00 	ldrex	r3, [r3]
 8003fda:	613b      	str	r3, [r7, #16]
   return(result);
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	f023 0310 	bic.w	r3, r3, #16
 8003fe2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	330c      	adds	r3, #12
 8003fea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fec:	623a      	str	r2, [r7, #32]
 8003fee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff0:	69f9      	ldr	r1, [r7, #28]
 8003ff2:	6a3a      	ldr	r2, [r7, #32]
 8003ff4:	e841 2300 	strex	r3, r2, [r1]
 8003ff8:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d1e5      	bne.n	8003fcc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0310 	and.w	r3, r3, #16
 800400a:	2b10      	cmp	r3, #16
 800400c:	d10a      	bne.n	8004024 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800400e:	2300      	movs	r3, #0
 8004010:	60fb      	str	r3, [r7, #12]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	60fb      	str	r3, [r7, #12]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	60fb      	str	r3, [r7, #12]
 8004022:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004028:	4619      	mov	r1, r3
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f7ff fdf1 	bl	8003c12 <HAL_UARTEx_RxEventCallback>
 8004030:	e002      	b.n	8004038 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f7ff fddb 	bl	8003bee <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004038:	2300      	movs	r3, #0
 800403a:	e002      	b.n	8004042 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800403c:	2300      	movs	r3, #0
 800403e:	e000      	b.n	8004042 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004040:	2302      	movs	r3, #2
  }
}
 8004042:	4618      	mov	r0, r3
 8004044:	3730      	adds	r7, #48	@ 0x30
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
	...

0800404c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68da      	ldr	r2, [r3, #12]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	430a      	orrs	r2, r1
 8004068:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	689a      	ldr	r2, [r3, #8]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	431a      	orrs	r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	695b      	ldr	r3, [r3, #20]
 8004078:	4313      	orrs	r3, r2
 800407a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004086:	f023 030c 	bic.w	r3, r3, #12
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	6812      	ldr	r2, [r2, #0]
 800408e:	68b9      	ldr	r1, [r7, #8]
 8004090:	430b      	orrs	r3, r1
 8004092:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	695b      	ldr	r3, [r3, #20]
 800409a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	699a      	ldr	r2, [r3, #24]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	430a      	orrs	r2, r1
 80040a8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a2c      	ldr	r2, [pc, #176]	@ (8004160 <UART_SetConfig+0x114>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d103      	bne.n	80040bc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80040b4:	f7fe ff64 	bl	8002f80 <HAL_RCC_GetPCLK2Freq>
 80040b8:	60f8      	str	r0, [r7, #12]
 80040ba:	e002      	b.n	80040c2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80040bc:	f7fe ff4c 	bl	8002f58 <HAL_RCC_GetPCLK1Freq>
 80040c0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	4613      	mov	r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	4413      	add	r3, r2
 80040ca:	009a      	lsls	r2, r3, #2
 80040cc:	441a      	add	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d8:	4a22      	ldr	r2, [pc, #136]	@ (8004164 <UART_SetConfig+0x118>)
 80040da:	fba2 2303 	umull	r2, r3, r2, r3
 80040de:	095b      	lsrs	r3, r3, #5
 80040e0:	0119      	lsls	r1, r3, #4
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	4613      	mov	r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	4413      	add	r3, r2
 80040ea:	009a      	lsls	r2, r3, #2
 80040ec:	441a      	add	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80040f8:	4b1a      	ldr	r3, [pc, #104]	@ (8004164 <UART_SetConfig+0x118>)
 80040fa:	fba3 0302 	umull	r0, r3, r3, r2
 80040fe:	095b      	lsrs	r3, r3, #5
 8004100:	2064      	movs	r0, #100	@ 0x64
 8004102:	fb00 f303 	mul.w	r3, r0, r3
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	011b      	lsls	r3, r3, #4
 800410a:	3332      	adds	r3, #50	@ 0x32
 800410c:	4a15      	ldr	r2, [pc, #84]	@ (8004164 <UART_SetConfig+0x118>)
 800410e:	fba2 2303 	umull	r2, r3, r2, r3
 8004112:	095b      	lsrs	r3, r3, #5
 8004114:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004118:	4419      	add	r1, r3
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	4613      	mov	r3, r2
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	4413      	add	r3, r2
 8004122:	009a      	lsls	r2, r3, #2
 8004124:	441a      	add	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004130:	4b0c      	ldr	r3, [pc, #48]	@ (8004164 <UART_SetConfig+0x118>)
 8004132:	fba3 0302 	umull	r0, r3, r3, r2
 8004136:	095b      	lsrs	r3, r3, #5
 8004138:	2064      	movs	r0, #100	@ 0x64
 800413a:	fb00 f303 	mul.w	r3, r0, r3
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	011b      	lsls	r3, r3, #4
 8004142:	3332      	adds	r3, #50	@ 0x32
 8004144:	4a07      	ldr	r2, [pc, #28]	@ (8004164 <UART_SetConfig+0x118>)
 8004146:	fba2 2303 	umull	r2, r3, r2, r3
 800414a:	095b      	lsrs	r3, r3, #5
 800414c:	f003 020f 	and.w	r2, r3, #15
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	440a      	add	r2, r1
 8004156:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004158:	bf00      	nop
 800415a:	3710      	adds	r7, #16
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	40013800 	.word	0x40013800
 8004164:	51eb851f 	.word	0x51eb851f

08004168 <dwt_initialise>:
#define VBAT_ADDRESS   (0x08)
#define VTEMP_ADDRESS  (0x09)
#define XTRIM_ADDRESS  (0x1E)

int dwt_initialise(int config)
{
 8004168:	b590      	push	{r4, r7, lr}
 800416a:	b087      	sub	sp, #28
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
    uint16 otp_xtaltrim_and_rev = 0;
 8004170:	2300      	movs	r3, #0
 8004172:	82fb      	strh	r3, [r7, #22]
    uint32 ldo_tune = 0;
 8004174:	2300      	movs	r3, #0
 8004176:	613b      	str	r3, [r7, #16]

    pdw1000local->dblbuffon = 0; // - set to 0 - meaning double buffer mode is off by default
 8004178:	4b9f      	ldr	r3, [pc, #636]	@ (80043f8 <dwt_initialise+0x290>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2200      	movs	r2, #0
 800417e:	751a      	strb	r2, [r3, #20]
    pdw1000local->wait4resp = 0; // - set to 0 - meaning wait for response not active
 8004180:	4b9d      	ldr	r3, [pc, #628]	@ (80043f8 <dwt_initialise+0x290>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2200      	movs	r2, #0
 8004186:	755a      	strb	r2, [r3, #21]
    pdw1000local->sleep_mode = 0; // - set to 0 - meaning sleep mode has not been configured
 8004188:	4b9b      	ldr	r3, [pc, #620]	@ (80043f8 <dwt_initialise+0x290>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2200      	movs	r2, #0
 800418e:	82da      	strh	r2, [r3, #22]

    pdw1000local->cbTxDone = NULL;
 8004190:	4b99      	ldr	r3, [pc, #612]	@ (80043f8 <dwt_initialise+0x290>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2200      	movs	r2, #0
 8004196:	629a      	str	r2, [r3, #40]	@ 0x28
    pdw1000local->cbRxOk = NULL;
 8004198:	4b97      	ldr	r3, [pc, #604]	@ (80043f8 <dwt_initialise+0x290>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2200      	movs	r2, #0
 800419e:	62da      	str	r2, [r3, #44]	@ 0x2c
    pdw1000local->cbRxTo = NULL;
 80041a0:	4b95      	ldr	r3, [pc, #596]	@ (80043f8 <dwt_initialise+0x290>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2200      	movs	r2, #0
 80041a6:	631a      	str	r2, [r3, #48]	@ 0x30
    pdw1000local->cbRxErr = NULL;
 80041a8:	4b93      	ldr	r3, [pc, #588]	@ (80043f8 <dwt_initialise+0x290>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2200      	movs	r2, #0
 80041ae:	635a      	str	r2, [r3, #52]	@ 0x34
#if DWT_API_ERROR_CHECK
    pdw1000local->otp_mask = config ; // Save the READ_OTP config mask
#endif

    // Read and validate device ID, return -1 if not recognised
    if (DWT_DEVICE_ID != dwt_readdevid()) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
 80041b0:	f000 f926 	bl	8004400 <dwt_readdevid>
 80041b4:	4603      	mov	r3, r0
 80041b6:	4a91      	ldr	r2, [pc, #580]	@ (80043fc <dwt_initialise+0x294>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d002      	beq.n	80041c2 <dwt_initialise+0x5a>
    {
        return DWT_ERROR ;
 80041bc:	f04f 33ff 	mov.w	r3, #4294967295
 80041c0:	e115      	b.n	80043ee <dwt_initialise+0x286>
    }

    if(!(DWT_DW_WAKE_UP & config)) // Don't reset the device if DWT_DW_WAKE_UP bit is set, e.g. when calling this API after wake up
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f003 0302 	and.w	r3, r3, #2
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d101      	bne.n	80041d0 <dwt_initialise+0x68>
    {
        dwt_softreset(); // Make sure the device is completely reset before starting initialisation
 80041cc:	f000 fd32 	bl	8004c34 <dwt_softreset>
    }

    if(!((DWT_DW_WAKE_UP & config) && ((DWT_READ_OTP_TMP | DWT_READ_OTP_BAT | DWT_READ_OTP_LID | DWT_READ_OTP_PID | DWT_DW_WUP_RD_OTPREV)& config)))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f003 0302 	and.w	r3, r3, #2
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d004      	beq.n	80041e4 <dwt_initialise+0x7c>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d102      	bne.n	80041ea <dwt_initialise+0x82>
    {
        _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
 80041e4:	2000      	movs	r0, #0
 80041e6:	f000 fc7f 	bl	8004ae8 <_dwt_enableclocks>
    }                                  // when not reading from OTP, clocks don't need to change.

    // Configure the CPLL lock detect
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
 80041ea:	2204      	movs	r2, #4
 80041ec:	2100      	movs	r1, #0
 80041ee:	2024      	movs	r0, #36	@ 0x24
 80041f0:	f000 fb67 	bl	80048c2 <dwt_write8bitoffsetreg>

    // When DW1000 IC is initialised from power up, then the LDO value should be kicked from OTP, otherwise if this API is called after
    // DW1000 IC has been woken up (DWT_DW_WAKE_UP bit is set) this can be skipped as LDO would have already been automatically
    // kicked/loaded on wake up
    if(!(DWT_DW_WAKE_UP & config))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f003 0302 	and.w	r3, r3, #2
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d116      	bne.n	800422c <dwt_initialise+0xc4>
    {
        // Load LDO tune from OTP and kick it if there is a value actually programmed.
        ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
 80041fe:	2004      	movs	r0, #4
 8004200:	f000 fbb5 	bl	800496e <_dwt_otpread>
 8004204:	6138      	str	r0, [r7, #16]
        if((ldo_tune & 0xFF) != 0)
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	b2db      	uxtb	r3, r3
 800420a:	2b00      	cmp	r3, #0
 800420c:	d01f      	beq.n	800424e <dwt_initialise+0xe6>
        {
            // Kick LDO tune
            dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDO kick bit
 800420e:	2202      	movs	r2, #2
 8004210:	2112      	movs	r1, #18
 8004212:	202d      	movs	r0, #45	@ 0x2d
 8004214:	f000 fb55 	bl	80048c2 <dwt_write8bitoffsetreg>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
 8004218:	4b77      	ldr	r3, [pc, #476]	@ (80043f8 <dwt_initialise+0x290>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	8ada      	ldrh	r2, [r3, #22]
 800421e:	4b76      	ldr	r3, [pc, #472]	@ (80043f8 <dwt_initialise+0x290>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004226:	b292      	uxth	r2, r2
 8004228:	82da      	strh	r2, [r3, #22]
 800422a:	e010      	b.n	800424e <dwt_initialise+0xe6>
        }
    }
    else
    {   //if LDOTUNE reg contains value different from default it means it was kicked from OTP and thus set AON_WCFG_ONW_LLDO.
        if(dwt_read32bitoffsetreg(RF_CONF_ID, LDOTUNE) != LDOTUNE_DEFAULT)
 800422c:	2130      	movs	r1, #48	@ 0x30
 800422e:	2028      	movs	r0, #40	@ 0x28
 8004230:	f000 fb05 	bl	800483e <dwt_read32bitoffsetreg>
 8004234:	4603      	mov	r3, r0
 8004236:	f1b3 3f88 	cmp.w	r3, #2290649224	@ 0x88888888
 800423a:	d008      	beq.n	800424e <dwt_initialise+0xe6>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO;
 800423c:	4b6e      	ldr	r3, [pc, #440]	@ (80043f8 <dwt_initialise+0x290>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	8ada      	ldrh	r2, [r3, #22]
 8004242:	4b6d      	ldr	r3, [pc, #436]	@ (80043f8 <dwt_initialise+0x290>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800424a:	b292      	uxth	r2, r2
 800424c:	82da      	strh	r2, [r3, #22]
    }

    if((!(DWT_DW_WAKE_UP & config)) || ((DWT_DW_WAKE_UP & config) && (DWT_DW_WUP_RD_OTPREV & config)))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f003 0302 	and.w	r3, r3, #2
 8004254:	2b00      	cmp	r3, #0
 8004256:	d009      	beq.n	800426c <dwt_initialise+0x104>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f003 0302 	and.w	r3, r3, #2
 800425e:	2b00      	cmp	r3, #0
 8004260:	d011      	beq.n	8004286 <dwt_initialise+0x11e>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f003 0308 	and.w	r3, r3, #8
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00c      	beq.n	8004286 <dwt_initialise+0x11e>
    {
        // Read OTP revision number
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 800426c:	201e      	movs	r0, #30
 800426e:	f000 fb7e 	bl	800496e <_dwt_otpread>
 8004272:	4603      	mov	r3, r0
 8004274:	82fb      	strh	r3, [r7, #22]
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
 8004276:	8afb      	ldrh	r3, [r7, #22]
 8004278:	0a1b      	lsrs	r3, r3, #8
 800427a:	b29a      	uxth	r2, r3
 800427c:	4b5e      	ldr	r3, [pc, #376]	@ (80043f8 <dwt_initialise+0x290>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	b2d2      	uxtb	r2, r2
 8004282:	72da      	strb	r2, [r3, #11]
 8004284:	e003      	b.n	800428e <dwt_initialise+0x126>
    }
    else
        pdw1000local->otprev = 0; // If OTP valuse are not used, if this API is called after DW1000 IC has been woken up
 8004286:	4b5c      	ldr	r3, [pc, #368]	@ (80043f8 <dwt_initialise+0x290>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2200      	movs	r2, #0
 800428c:	72da      	strb	r2, [r3, #11]
                                  // (DWT_DW_WAKE_UP bit is set), set otprev to 0

    if(!(DWT_DW_WAKE_UP & config))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f003 0302 	and.w	r3, r3, #2
 8004294:	2b00      	cmp	r3, #0
 8004296:	d10b      	bne.n	80042b0 <dwt_initialise+0x148>
    {
        // XTAL trim value is set in OTP for DW1000 module and EVK/TREK boards but that might not be the case in a custom design
        if ((otp_xtaltrim_and_rev & 0x1F) == 0) // A value of 0 means that the crystal has not been trimmed
 8004298:	8afb      	ldrh	r3, [r7, #22]
 800429a:	f003 031f 	and.w	r3, r3, #31
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d101      	bne.n	80042a6 <dwt_initialise+0x13e>
        {
            otp_xtaltrim_and_rev = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
 80042a2:	2310      	movs	r3, #16
 80042a4:	82fb      	strh	r3, [r7, #22]
        }
        // Configure XTAL trim
        dwt_setxtaltrim((uint8)otp_xtaltrim_and_rev);
 80042a6:	8afb      	ldrh	r3, [r7, #22]
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	4618      	mov	r0, r3
 80042ac:	f000 fce8 	bl	8004c80 <dwt_setxtaltrim>
    }

    if(DWT_READ_OTP_PID & config)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f003 0310 	and.w	r3, r3, #16
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d007      	beq.n	80042ca <dwt_initialise+0x162>
    {
        // Load Part from OTP
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
 80042ba:	4b4f      	ldr	r3, [pc, #316]	@ (80043f8 <dwt_initialise+0x290>)
 80042bc:	681c      	ldr	r4, [r3, #0]
 80042be:	2006      	movs	r0, #6
 80042c0:	f000 fb55 	bl	800496e <_dwt_otpread>
 80042c4:	4603      	mov	r3, r0
 80042c6:	6023      	str	r3, [r4, #0]
 80042c8:	e003      	b.n	80042d2 <dwt_initialise+0x16a>
    }
    else
    {
        pdw1000local->partID = 0;
 80042ca:	4b4b      	ldr	r3, [pc, #300]	@ (80043f8 <dwt_initialise+0x290>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2200      	movs	r2, #0
 80042d0:	601a      	str	r2, [r3, #0]
    }

    if(DWT_READ_OTP_LID & config)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f003 0320 	and.w	r3, r3, #32
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d007      	beq.n	80042ec <dwt_initialise+0x184>
    {
        // Load Lot ID from OTP
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
 80042dc:	4b46      	ldr	r3, [pc, #280]	@ (80043f8 <dwt_initialise+0x290>)
 80042de:	681c      	ldr	r4, [r3, #0]
 80042e0:	2007      	movs	r0, #7
 80042e2:	f000 fb44 	bl	800496e <_dwt_otpread>
 80042e6:	4603      	mov	r3, r0
 80042e8:	6063      	str	r3, [r4, #4]
 80042ea:	e003      	b.n	80042f4 <dwt_initialise+0x18c>
    }
    else
    {
        pdw1000local->lotID = 0;
 80042ec:	4b42      	ldr	r3, [pc, #264]	@ (80043f8 <dwt_initialise+0x290>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2200      	movs	r2, #0
 80042f2:	605a      	str	r2, [r3, #4]
    }

    if(DWT_READ_OTP_BAT & config)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d008      	beq.n	8004310 <dwt_initialise+0x1a8>
    {
        // Load VBAT from OTP
        pdw1000local->vBatP = _dwt_otpread(VBAT_ADDRESS) & 0xff;
 80042fe:	2008      	movs	r0, #8
 8004300:	f000 fb35 	bl	800496e <_dwt_otpread>
 8004304:	4602      	mov	r2, r0
 8004306:	4b3c      	ldr	r3, [pc, #240]	@ (80043f8 <dwt_initialise+0x290>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	b2d2      	uxtb	r2, r2
 800430c:	721a      	strb	r2, [r3, #8]
 800430e:	e003      	b.n	8004318 <dwt_initialise+0x1b0>
    }
    else
    {
        pdw1000local->vBatP = 0;
 8004310:	4b39      	ldr	r3, [pc, #228]	@ (80043f8 <dwt_initialise+0x290>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2200      	movs	r2, #0
 8004316:	721a      	strb	r2, [r3, #8]
    }

    if(DWT_READ_OTP_TMP & config)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800431e:	2b00      	cmp	r3, #0
 8004320:	d008      	beq.n	8004334 <dwt_initialise+0x1cc>
    {
        // Load TEMP from OTP
        pdw1000local->tempP = _dwt_otpread(VTEMP_ADDRESS) & 0xff;
 8004322:	2009      	movs	r0, #9
 8004324:	f000 fb23 	bl	800496e <_dwt_otpread>
 8004328:	4602      	mov	r2, r0
 800432a:	4b33      	ldr	r3, [pc, #204]	@ (80043f8 <dwt_initialise+0x290>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	b2d2      	uxtb	r2, r2
 8004330:	725a      	strb	r2, [r3, #9]
 8004332:	e003      	b.n	800433c <dwt_initialise+0x1d4>
    }
    else
    {
        pdw1000local->tempP = 0;
 8004334:	4b30      	ldr	r3, [pc, #192]	@ (80043f8 <dwt_initialise+0x290>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2200      	movs	r2, #0
 800433a:	725a      	strb	r2, [r3, #9]
    }

    // Load leading edge detect code (LDE/microcode)
    if(!(DWT_DW_WAKE_UP & config))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	2b00      	cmp	r3, #0
 8004344:	d121      	bne.n	800438a <dwt_initialise+0x222>
    {
        if(DWT_LOADUCODE & config)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f003 0301 	and.w	r3, r3, #1
 800434c:	2b00      	cmp	r3, #0
 800434e:	d00b      	beq.n	8004368 <dwt_initialise+0x200>
        {
            _dwt_loaducodefromrom();
 8004350:	f000 fb5a 	bl	8004a08 <_dwt_loaducodefromrom>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up if loaded on initialisation
 8004354:	4b28      	ldr	r3, [pc, #160]	@ (80043f8 <dwt_initialise+0x290>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	8ada      	ldrh	r2, [r3, #22]
 800435a:	4b27      	ldr	r3, [pc, #156]	@ (80043f8 <dwt_initialise+0x290>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004362:	b292      	uxth	r2, r2
 8004364:	82da      	strh	r2, [r3, #22]
 8004366:	e01e      	b.n	80043a6 <dwt_initialise+0x23e>
        }
        else // Should disable the LDERUN bit enable if LDE has not been loaded
        {
            uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
 8004368:	2105      	movs	r1, #5
 800436a:	2036      	movs	r0, #54	@ 0x36
 800436c:	f000 fa8e 	bl	800488c <dwt_read16bitoffsetreg>
 8004370:	4603      	mov	r3, r0
 8004372:	81fb      	strh	r3, [r7, #14]
            rega &= 0xFDFF ; // Clear LDERUN bit
 8004374:	89fb      	ldrh	r3, [r7, #14]
 8004376:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800437a:	81fb      	strh	r3, [r7, #14]
            dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
 800437c:	89fb      	ldrh	r3, [r7, #14]
 800437e:	461a      	mov	r2, r3
 8004380:	2105      	movs	r1, #5
 8004382:	2036      	movs	r0, #54	@ 0x36
 8004384:	f000 fab0 	bl	80048e8 <dwt_write16bitoffsetreg>
 8004388:	e00d      	b.n	80043a6 <dwt_initialise+0x23e>
        }
    }
    else //if DWT_DW_WUP_NO_UCODE is set then assume that the UCODE was loaded from ROM (i.e. DWT_LOADUCODE was set on power up),
    {     //thus set AON_WCFG_ONW_LLDE, otherwise don't set the AON_WCFG_ONW_LLDE bit in the sleep_mode configuration
        if((DWT_DW_WUP_NO_UCODE & config) == 0)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f003 0304 	and.w	r3, r3, #4
 8004390:	2b00      	cmp	r3, #0
 8004392:	d108      	bne.n	80043a6 <dwt_initialise+0x23e>
        {
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE;
 8004394:	4b18      	ldr	r3, [pc, #96]	@ (80043f8 <dwt_initialise+0x290>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	8ada      	ldrh	r2, [r3, #22]
 800439a:	4b17      	ldr	r3, [pc, #92]	@ (80043f8 <dwt_initialise+0x290>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043a2:	b292      	uxth	r2, r2
 80043a4:	82da      	strh	r2, [r3, #22]
        }
    }

    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 80043a6:	2001      	movs	r0, #1
 80043a8:	f000 fb9e 	bl	8004ae8 <_dwt_enableclocks>

    // The 3 bits in AON CFG1 register must be cleared to ensure proper operation of the DW1000 in DEEPSLEEP mode.
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
 80043ac:	2200      	movs	r2, #0
 80043ae:	210a      	movs	r1, #10
 80043b0:	202c      	movs	r0, #44	@ 0x2c
 80043b2:	f000 fa86 	bl	80048c2 <dwt_write8bitoffsetreg>

    // Read system register / store local copy
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 80043b6:	4b10      	ldr	r3, [pc, #64]	@ (80043f8 <dwt_initialise+0x290>)
 80043b8:	681c      	ldr	r4, [r3, #0]
 80043ba:	2100      	movs	r1, #0
 80043bc:	2004      	movs	r0, #4
 80043be:	f000 fa3e 	bl	800483e <dwt_read32bitoffsetreg>
 80043c2:	4603      	mov	r3, r0
 80043c4:	6123      	str	r3, [r4, #16]
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
 80043c6:	4b0c      	ldr	r3, [pc, #48]	@ (80043f8 <dwt_initialise+0x290>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	0c1b      	lsrs	r3, r3, #16
 80043ce:	b2da      	uxtb	r2, r3
 80043d0:	4b09      	ldr	r3, [pc, #36]	@ (80043f8 <dwt_initialise+0x290>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f002 0203 	and.w	r2, r2, #3
 80043d8:	b2d2      	uxtb	r2, r2
 80043da:	729a      	strb	r2, [r3, #10]

    pdw1000local->txFCTRL = dwt_read32bitreg(TX_FCTRL_ID) ;
 80043dc:	4b06      	ldr	r3, [pc, #24]	@ (80043f8 <dwt_initialise+0x290>)
 80043de:	681c      	ldr	r4, [r3, #0]
 80043e0:	2100      	movs	r1, #0
 80043e2:	2008      	movs	r0, #8
 80043e4:	f000 fa2b 	bl	800483e <dwt_read32bitoffsetreg>
 80043e8:	4603      	mov	r3, r0
 80043ea:	60e3      	str	r3, [r4, #12]

    return DWT_SUCCESS ;
 80043ec:	2300      	movs	r3, #0

} // end dwt_initialise()
 80043ee:	4618      	mov	r0, r3
 80043f0:	371c      	adds	r7, #28
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd90      	pop	{r4, r7, pc}
 80043f6:	bf00      	nop
 80043f8:	2000000c 	.word	0x2000000c
 80043fc:	deca0130 	.word	0xdeca0130

08004400 <dwt_readdevid>:
 * output parameters
 *
 * returns the read value which for DW1000 is 0xDECA0130
 */
uint32 dwt_readdevid(void)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
    return dwt_read32bitoffsetreg(DEV_ID_ID,0);
 8004404:	2100      	movs	r1, #0
 8004406:	2000      	movs	r0, #0
 8004408:	f000 fa19 	bl	800483e <dwt_read32bitoffsetreg>
 800440c:	4603      	mov	r3, r0
}
 800440e:	4618      	mov	r0, r3
 8004410:	bd80      	pop	{r7, pc}
	...

08004414 <dwt_configure>:
 * output parameters
 *
 * no return value
 */
void dwt_configure(dwt_config_t *config)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b086      	sub	sp, #24
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
    uint8 nsSfd_result  = 0;
 800441c:	2300      	movs	r3, #0
 800441e:	75fb      	strb	r3, [r7, #23]
    uint8 useDWnsSFD = 0;
 8004420:	2300      	movs	r3, #0
 8004422:	75bb      	strb	r3, [r7, #22]
    uint8 chan = config->chan ;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	74fb      	strb	r3, [r7, #19]
    uint32 regval ;
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	795b      	ldrb	r3, [r3, #5]
 800442e:	461a      	mov	r2, r3
 8004430:	4ba1      	ldr	r3, [pc, #644]	@ (80046b8 <dwt_configure+0x2a4>)
 8004432:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004436:	82bb      	strh	r3, [r7, #20]
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	785b      	ldrb	r3, [r3, #1]
 800443c:	3b01      	subs	r3, #1
 800443e:	74bb      	strb	r3, [r7, #18]
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 8004440:	7cfb      	ldrb	r3, [r7, #19]
 8004442:	2b04      	cmp	r3, #4
 8004444:	d002      	beq.n	800444c <dwt_configure+0x38>
 8004446:	7cfb      	ldrb	r3, [r7, #19]
 8004448:	2b07      	cmp	r3, #7
 800444a:	d101      	bne.n	8004450 <dwt_configure+0x3c>
 800444c:	2301      	movs	r3, #1
 800444e:	e000      	b.n	8004452 <dwt_configure+0x3e>
 8004450:	2300      	movs	r3, #0
 8004452:	747b      	strb	r3, [r7, #17]
           || (config->txPreambLength == DWT_PLEN_2048) || (config->txPreambLength == DWT_PLEN_4096));
    assert((config->phrMode == DWT_PHRMODE_STD) || (config->phrMode == DWT_PHRMODE_EXT));
#endif

    // For 110 kbps we need a special setup
    if(DWT_BR_110K == config->dataRate)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	79db      	ldrb	r3, [r3, #7]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d10b      	bne.n	8004474 <dwt_configure+0x60>
    {
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
 800445c:	4b97      	ldr	r3, [pc, #604]	@ (80046bc <dwt_configure+0x2a8>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	691a      	ldr	r2, [r3, #16]
 8004462:	4b96      	ldr	r3, [pc, #600]	@ (80046bc <dwt_configure+0x2a8>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 800446a:	611a      	str	r2, [r3, #16]
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
 800446c:	8abb      	ldrh	r3, [r7, #20]
 800446e:	08db      	lsrs	r3, r3, #3
 8004470:	82bb      	strh	r3, [r7, #20]
 8004472:	e007      	b.n	8004484 <dwt_configure+0x70>
    }
    else
    {
        pdw1000local->sysCFGreg &= (~SYS_CFG_RXM110K) ;
 8004474:	4b91      	ldr	r3, [pc, #580]	@ (80046bc <dwt_configure+0x2a8>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	691a      	ldr	r2, [r3, #16]
 800447a:	4b90      	ldr	r3, [pc, #576]	@ (80046bc <dwt_configure+0x2a8>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f422 0280 	bic.w	r2, r2, #4194304	@ 0x400000
 8004482:	611a      	str	r2, [r3, #16]
    }

    pdw1000local->longFrames = config->phrMode ;
 8004484:	4b8d      	ldr	r3, [pc, #564]	@ (80046bc <dwt_configure+0x2a8>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	7a12      	ldrb	r2, [r2, #8]
 800448c:	729a      	strb	r2, [r3, #10]

    pdw1000local->sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
 800448e:	4b8b      	ldr	r3, [pc, #556]	@ (80046bc <dwt_configure+0x2a8>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	691a      	ldr	r2, [r3, #16]
 8004494:	4b89      	ldr	r3, [pc, #548]	@ (80046bc <dwt_configure+0x2a8>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 800449c:	611a      	str	r2, [r3, #16]
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & ((uint32)config->phrMode << SYS_CFG_PHR_MODE_SHFT));
 800449e:	4b87      	ldr	r3, [pc, #540]	@ (80046bc <dwt_configure+0x2a8>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	6919      	ldr	r1, [r3, #16]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	7a1b      	ldrb	r3, [r3, #8]
 80044a8:	041b      	lsls	r3, r3, #16
 80044aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80044ae:	4b83      	ldr	r3, [pc, #524]	@ (80046bc <dwt_configure+0x2a8>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	430a      	orrs	r2, r1
 80044b4:	611a      	str	r2, [r3, #16]

    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
 80044b6:	4b81      	ldr	r3, [pc, #516]	@ (80046bc <dwt_configure+0x2a8>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	461a      	mov	r2, r3
 80044be:	2100      	movs	r1, #0
 80044c0:	2004      	movs	r0, #4
 80044c2:	f000 fa2d 	bl	8004920 <dwt_write32bitoffsetreg>
    // Set the lde_replicaCoeff
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_REPC_OFFSET, reg16) ;
 80044c6:	8abb      	ldrh	r3, [r7, #20]
 80044c8:	461a      	mov	r2, r3
 80044ca:	f642 0104 	movw	r1, #10244	@ 0x2804
 80044ce:	202e      	movs	r0, #46	@ 0x2e
 80044d0:	f000 fa0a 	bl	80048e8 <dwt_write16bitoffsetreg>

    _dwt_configlde(prfIndex);
 80044d4:	7cbb      	ldrb	r3, [r7, #18]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f000 fa76 	bl	80049c8 <_dwt_configlde>

    // Configure PLL2/RF PLL block CFG/TUNE (for a given channel)
    dwt_write32bitoffsetreg(FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]]);
 80044dc:	7cfb      	ldrb	r3, [r7, #19]
 80044de:	4a78      	ldr	r2, [pc, #480]	@ (80046c0 <dwt_configure+0x2ac>)
 80044e0:	5cd3      	ldrb	r3, [r2, r3]
 80044e2:	461a      	mov	r2, r3
 80044e4:	4b77      	ldr	r3, [pc, #476]	@ (80046c4 <dwt_configure+0x2b0>)
 80044e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044ea:	461a      	mov	r2, r3
 80044ec:	2107      	movs	r1, #7
 80044ee:	202b      	movs	r0, #43	@ 0x2b
 80044f0:	f000 fa16 	bl	8004920 <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]]);
 80044f4:	7cfb      	ldrb	r3, [r7, #19]
 80044f6:	4a72      	ldr	r2, [pc, #456]	@ (80046c0 <dwt_configure+0x2ac>)
 80044f8:	5cd3      	ldrb	r3, [r2, r3]
 80044fa:	461a      	mov	r2, r3
 80044fc:	4b72      	ldr	r3, [pc, #456]	@ (80046c8 <dwt_configure+0x2b4>)
 80044fe:	5c9b      	ldrb	r3, [r3, r2]
 8004500:	461a      	mov	r2, r3
 8004502:	210b      	movs	r1, #11
 8004504:	202b      	movs	r0, #43	@ 0x2b
 8004506:	f000 f9dc 	bl	80048c2 <dwt_write8bitoffsetreg>

    // Configure RF RX blocks (for specified channel/bandwidth)
    dwt_write8bitoffsetreg(RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw]);
 800450a:	7c7b      	ldrb	r3, [r7, #17]
 800450c:	4a6f      	ldr	r2, [pc, #444]	@ (80046cc <dwt_configure+0x2b8>)
 800450e:	5cd3      	ldrb	r3, [r2, r3]
 8004510:	461a      	mov	r2, r3
 8004512:	210b      	movs	r1, #11
 8004514:	2028      	movs	r0, #40	@ 0x28
 8004516:	f000 f9d4 	bl	80048c2 <dwt_write8bitoffsetreg>

    // Configure RF TX blocks (for specified channel and PRF)
    // Configure RF TX control
    dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]]);
 800451a:	7cfb      	ldrb	r3, [r7, #19]
 800451c:	4a68      	ldr	r2, [pc, #416]	@ (80046c0 <dwt_configure+0x2ac>)
 800451e:	5cd3      	ldrb	r3, [r2, r3]
 8004520:	461a      	mov	r2, r3
 8004522:	4b6b      	ldr	r3, [pc, #428]	@ (80046d0 <dwt_configure+0x2bc>)
 8004524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004528:	461a      	mov	r2, r3
 800452a:	210c      	movs	r1, #12
 800452c:	2028      	movs	r0, #40	@ 0x28
 800452e:	f000 f9f7 	bl	8004920 <dwt_write32bitoffsetreg>

    // Configure the baseband parameters (for specified PRF, bit rate, PAC, and SFD settings)
    // DTUNE0
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->nsSFD]);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	79db      	ldrb	r3, [r3, #7]
 8004536:	4618      	mov	r0, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	799b      	ldrb	r3, [r3, #6]
 800453c:	4619      	mov	r1, r3
 800453e:	4a65      	ldr	r2, [pc, #404]	@ (80046d4 <dwt_configure+0x2c0>)
 8004540:	0043      	lsls	r3, r0, #1
 8004542:	440b      	add	r3, r1
 8004544:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004548:	461a      	mov	r2, r3
 800454a:	2102      	movs	r1, #2
 800454c:	2027      	movs	r0, #39	@ 0x27
 800454e:	f000 f9cb 	bl	80048e8 <dwt_write16bitoffsetreg>

    // DTUNE1
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex]);
 8004552:	7cbb      	ldrb	r3, [r7, #18]
 8004554:	4a60      	ldr	r2, [pc, #384]	@ (80046d8 <dwt_configure+0x2c4>)
 8004556:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800455a:	461a      	mov	r2, r3
 800455c:	2104      	movs	r1, #4
 800455e:	2027      	movs	r0, #39	@ 0x27
 8004560:	f000 f9c2 	bl	80048e8 <dwt_write16bitoffsetreg>

    if(config->dataRate == DWT_BR_110K)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	79db      	ldrb	r3, [r3, #7]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d105      	bne.n	8004578 <dwt_configure+0x164>
    {
        dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K);
 800456c:	2264      	movs	r2, #100	@ 0x64
 800456e:	2106      	movs	r1, #6
 8004570:	2027      	movs	r0, #39	@ 0x27
 8004572:	f000 f9b9 	bl	80048e8 <dwt_write16bitoffsetreg>
 8004576:	e018      	b.n	80045aa <dwt_configure+0x196>
    }
    else
    {
        if(config->txPreambLength == DWT_PLEN_64)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	789b      	ldrb	r3, [r3, #2]
 800457c:	2b04      	cmp	r3, #4
 800457e:	d10a      	bne.n	8004596 <dwt_configure+0x182>
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64);
 8004580:	2210      	movs	r2, #16
 8004582:	2106      	movs	r1, #6
 8004584:	2027      	movs	r0, #39	@ 0x27
 8004586:	f000 f9af 	bl	80048e8 <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64);
 800458a:	2210      	movs	r2, #16
 800458c:	2126      	movs	r1, #38	@ 0x26
 800458e:	2027      	movs	r0, #39	@ 0x27
 8004590:	f000 f997 	bl	80048c2 <dwt_write8bitoffsetreg>
 8004594:	e009      	b.n	80045aa <dwt_configure+0x196>
        }
        else
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8);
 8004596:	2220      	movs	r2, #32
 8004598:	2106      	movs	r1, #6
 800459a:	2027      	movs	r0, #39	@ 0x27
 800459c:	f000 f9a4 	bl	80048e8 <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
 80045a0:	2228      	movs	r2, #40	@ 0x28
 80045a2:	2126      	movs	r1, #38	@ 0x26
 80045a4:	2027      	movs	r0, #39	@ 0x27
 80045a6:	f000 f98c 	bl	80048c2 <dwt_write8bitoffsetreg>
        }
    }

    // DTUNE2
    dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET, digital_bb_config[prfIndex][config->rxPAC]);
 80045aa:	7cbb      	ldrb	r3, [r7, #18]
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	78d2      	ldrb	r2, [r2, #3]
 80045b0:	4611      	mov	r1, r2
 80045b2:	4a4a      	ldr	r2, [pc, #296]	@ (80046dc <dwt_configure+0x2c8>)
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	440b      	add	r3, r1
 80045b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045bc:	461a      	mov	r2, r3
 80045be:	2108      	movs	r1, #8
 80045c0:	2027      	movs	r0, #39	@ 0x27
 80045c2:	f000 f9ad 	bl	8004920 <dwt_write32bitoffsetreg>

    // DTUNE3 (SFD timeout)
    // Don't allow 0 - SFD timeout will always be enabled
    if(config->sfdTO == 0)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	895b      	ldrh	r3, [r3, #10]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d103      	bne.n	80045d6 <dwt_configure+0x1c2>
    {
        config->sfdTO = DWT_SFDTOC_DEF;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f241 0241 	movw	r2, #4161	@ 0x1041
 80045d4:	815a      	strh	r2, [r3, #10]
    }
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	895b      	ldrh	r3, [r3, #10]
 80045da:	461a      	mov	r2, r3
 80045dc:	2120      	movs	r1, #32
 80045de:	2027      	movs	r0, #39	@ 0x27
 80045e0:	f000 f982 	bl	80048e8 <dwt_write16bitoffsetreg>

    // Configure AGC parameters
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
 80045e4:	4b3e      	ldr	r3, [pc, #248]	@ (80046e0 <dwt_configure+0x2cc>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	461a      	mov	r2, r3
 80045ea:	210c      	movs	r1, #12
 80045ec:	2023      	movs	r0, #35	@ 0x23
 80045ee:	f000 f997 	bl	8004920 <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
 80045f2:	7cbb      	ldrb	r3, [r7, #18]
 80045f4:	4a3a      	ldr	r2, [pc, #232]	@ (80046e0 <dwt_configure+0x2cc>)
 80045f6:	005b      	lsls	r3, r3, #1
 80045f8:	4413      	add	r3, r2
 80045fa:	889b      	ldrh	r3, [r3, #4]
 80045fc:	461a      	mov	r2, r3
 80045fe:	2104      	movs	r1, #4
 8004600:	2023      	movs	r0, #35	@ 0x23
 8004602:	f000 f971 	bl	80048e8 <dwt_write16bitoffsetreg>

    // Set (non-standard) user SFD for improved performance,
    if(config->nsSFD)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	799b      	ldrb	r3, [r3, #6]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00d      	beq.n	800462a <dwt_configure+0x216>
    {
        // Write non standard (DW) SFD length
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	79db      	ldrb	r3, [r3, #7]
 8004612:	461a      	mov	r2, r3
 8004614:	4b33      	ldr	r3, [pc, #204]	@ (80046e4 <dwt_configure+0x2d0>)
 8004616:	5c9b      	ldrb	r3, [r3, r2]
 8004618:	461a      	mov	r2, r3
 800461a:	2100      	movs	r1, #0
 800461c:	2021      	movs	r0, #33	@ 0x21
 800461e:	f000 f950 	bl	80048c2 <dwt_write8bitoffsetreg>
        nsSfd_result = 3 ;
 8004622:	2303      	movs	r3, #3
 8004624:	75fb      	strb	r3, [r7, #23]
        useDWnsSFD = 1 ;
 8004626:	2301      	movs	r3, #1
 8004628:	75bb      	strb	r3, [r7, #22]
    }
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 800462a:	7cfb      	ldrb	r3, [r7, #19]
 800462c:	f003 020f 	and.w	r2, r3, #15
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 8004630:	7cfb      	ldrb	r3, [r7, #19]
 8004632:	011b      	lsls	r3, r3, #4
 8004634:	b2db      	uxtb	r3, r3
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8004636:	431a      	orrs	r2, r3
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	785b      	ldrb	r3, [r3, #1]
 800463c:	049b      	lsls	r3, r3, #18
 800463e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 8004642:	431a      	orrs	r2, r3
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 8004644:	7dfb      	ldrb	r3, [r7, #23]
 8004646:	051b      	lsls	r3, r3, #20
 8004648:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 800464c:	431a      	orrs	r2, r3
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 800464e:	7dbb      	ldrb	r3, [r7, #22]
 8004650:	045b      	lsls	r3, r3, #17
 8004652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 8004656:	431a      	orrs	r2, r3
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	791b      	ldrb	r3, [r3, #4]
 800465c:	059b      	lsls	r3, r3, #22
 800465e:	f003 63f8 	and.w	r3, r3, #130023424	@ 0x7c00000
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 8004662:	431a      	orrs	r2, r3
              (CHAN_CTRL_RX_PCOD_MASK & ((uint32)config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	795b      	ldrb	r3, [r3, #5]
 8004668:	06db      	lsls	r3, r3, #27
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 800466a:	4313      	orrs	r3, r2
 800466c:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(CHAN_CTRL_ID,regval) ;
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	2100      	movs	r1, #0
 8004672:	201f      	movs	r0, #31
 8004674:	f000 f954 	bl	8004920 <dwt_write32bitoffsetreg>

    // Set up TX Preamble Size, PRF and Data Rate
    pdw1000local->txFCTRL = ((uint32)(config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | ((uint32)config->dataRate << TX_FCTRL_TXBR_SHFT);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	789a      	ldrb	r2, [r3, #2]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	785b      	ldrb	r3, [r3, #1]
 8004680:	4313      	orrs	r3, r2
 8004682:	b2db      	uxtb	r3, r3
 8004684:	0419      	lsls	r1, r3, #16
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	79db      	ldrb	r3, [r3, #7]
 800468a:	035a      	lsls	r2, r3, #13
 800468c:	4b0b      	ldr	r3, [pc, #44]	@ (80046bc <dwt_configure+0x2a8>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	430a      	orrs	r2, r1
 8004692:	60da      	str	r2, [r3, #12]
    dwt_write32bitreg(TX_FCTRL_ID, pdw1000local->txFCTRL);
 8004694:	4b09      	ldr	r3, [pc, #36]	@ (80046bc <dwt_configure+0x2a8>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	461a      	mov	r2, r3
 800469c:	2100      	movs	r1, #0
 800469e:	2008      	movs	r0, #8
 80046a0:	f000 f93e 	bl	8004920 <dwt_write32bitoffsetreg>

    // The SFD transmit pattern is initialised by the DW1000 upon a user TX request, but (due to an IC issue) it is not done for an auto-ACK TX. The
    // SYS_CTRL write below works around this issue, by simultaneously initiating and aborting a transmission, which correctly initialises the SFD
    // after its configuration or reconfiguration.
    // This issue is not documented at the time of writing this code. It should be in next release of DW1000 User Manual (v2.09, from July 2016).
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF); // Request TX start and TRX off at the same time
 80046a4:	2242      	movs	r2, #66	@ 0x42
 80046a6:	2100      	movs	r1, #0
 80046a8:	200d      	movs	r0, #13
 80046aa:	f000 f90a 	bl	80048c2 <dwt_write8bitoffsetreg>
} // end dwt_configure()
 80046ae:	bf00      	nop
 80046b0:	3718      	adds	r7, #24
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	08007e78 	.word	0x08007e78
 80046bc:	2000000c 	.word	0x2000000c
 80046c0:	08007df8 	.word	0x08007df8
 80046c4:	08007e18 	.word	0x08007e18
 80046c8:	08007e30 	.word	0x08007e30
 80046cc:	08007e38 	.word	0x08007e38
 80046d0:	08007e00 	.word	0x08007e00
 80046d4:	08007e48 	.word	0x08007e48
 80046d8:	08007e54 	.word	0x08007e54
 80046dc:	08007e58 	.word	0x08007e58
 80046e0:	08007e3c 	.word	0x08007e3c
 80046e4:	08007e44 	.word	0x08007e44

080046e8 <dwt_writetodevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    const uint8   *buffer
)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60ba      	str	r2, [r7, #8]
 80046f0:	607b      	str	r3, [r7, #4]
 80046f2:	4603      	mov	r3, r0
 80046f4:	81fb      	strh	r3, [r7, #14]
 80046f6:	460b      	mov	r3, r1
 80046f8:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 80046fa:	2300      	movs	r3, #0
 80046fc:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting WRITE operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 80046fe:	89bb      	ldrh	r3, [r7, #12]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d10c      	bne.n	800471e <dwt_writetodevice+0x36>
    {
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8004704:	89fb      	ldrh	r3, [r7, #14]
 8004706:	b2da      	uxtb	r2, r3
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	1c59      	adds	r1, r3, #1
 800470c:	6179      	str	r1, [r7, #20]
 800470e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004712:	b2d2      	uxtb	r2, r2
 8004714:	3318      	adds	r3, #24
 8004716:	443b      	add	r3, r7
 8004718:	f803 2c08 	strb.w	r2, [r3, #-8]
 800471c:	e02f      	b.n	800477e <dwt_writetodevice+0x96>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 800471e:	89fb      	ldrh	r3, [r7, #14]
 8004720:	b2da      	uxtb	r2, r3
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	1c59      	adds	r1, r3, #1
 8004726:	6179      	str	r1, [r7, #20]
 8004728:	f062 023f 	orn	r2, r2, #63	@ 0x3f
 800472c:	b2d2      	uxtb	r2, r2
 800472e:	3318      	adds	r3, #24
 8004730:	443b      	add	r3, r7
 8004732:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8004736:	89bb      	ldrh	r3, [r7, #12]
 8004738:	2b7f      	cmp	r3, #127	@ 0x7f
 800473a:	d809      	bhi.n	8004750 <dwt_writetodevice+0x68>
        {
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	1c5a      	adds	r2, r3, #1
 8004740:	617a      	str	r2, [r7, #20]
 8004742:	89ba      	ldrh	r2, [r7, #12]
 8004744:	b2d2      	uxtb	r2, r2
 8004746:	3318      	adds	r3, #24
 8004748:	443b      	add	r3, r7
 800474a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800474e:	e016      	b.n	800477e <dwt_writetodevice+0x96>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8004750:	89bb      	ldrh	r3, [r7, #12]
 8004752:	b2da      	uxtb	r2, r3
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	1c59      	adds	r1, r3, #1
 8004758:	6179      	str	r1, [r7, #20]
 800475a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800475e:	b2d2      	uxtb	r2, r2
 8004760:	3318      	adds	r3, #24
 8004762:	443b      	add	r3, r7
 8004764:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8004768:	89bb      	ldrh	r3, [r7, #12]
 800476a:	09db      	lsrs	r3, r3, #7
 800476c:	b299      	uxth	r1, r3
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	1c5a      	adds	r2, r3, #1
 8004772:	617a      	str	r2, [r7, #20]
 8004774:	b2ca      	uxtb	r2, r1
 8004776:	3318      	adds	r3, #24
 8004778:	443b      	add	r3, r7
 800477a:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Write it to the SPI
    writetospi(cnt,header,length,buffer);
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	b298      	uxth	r0, r3
 8004782:	f107 0110 	add.w	r1, r7, #16
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	68ba      	ldr	r2, [r7, #8]
 800478a:	f000 fabb 	bl	8004d04 <writetospi>
} // end dwt_writetodevice()
 800478e:	bf00      	nop
 8004790:	3718      	adds	r7, #24
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <dwt_readfromdevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    uint8         *buffer
)
{
 8004796:	b580      	push	{r7, lr}
 8004798:	b086      	sub	sp, #24
 800479a:	af00      	add	r7, sp, #0
 800479c:	60ba      	str	r2, [r7, #8]
 800479e:	607b      	str	r3, [r7, #4]
 80047a0:	4603      	mov	r3, r0
 80047a2:	81fb      	strh	r3, [r7, #14]
 80047a4:	460b      	mov	r3, r1
 80047a6:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 80047a8:	2300      	movs	r3, #0
 80047aa:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting READ operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 80047ac:	89bb      	ldrh	r3, [r7, #12]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d109      	bne.n	80047c6 <dwt_readfromdevice+0x30>
    {
         header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	1c5a      	adds	r2, r3, #1
 80047b6:	617a      	str	r2, [r7, #20]
 80047b8:	89fa      	ldrh	r2, [r7, #14]
 80047ba:	b2d2      	uxtb	r2, r2
 80047bc:	3318      	adds	r3, #24
 80047be:	443b      	add	r3, r7
 80047c0:	f803 2c08 	strb.w	r2, [r3, #-8]
 80047c4:	e02f      	b.n	8004826 <dwt_readfromdevice+0x90>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 80047c6:	89fb      	ldrh	r3, [r7, #14]
 80047c8:	b2da      	uxtb	r2, r3
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	1c59      	adds	r1, r3, #1
 80047ce:	6179      	str	r1, [r7, #20]
 80047d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80047d4:	b2d2      	uxtb	r2, r2
 80047d6:	3318      	adds	r3, #24
 80047d8:	443b      	add	r3, r7
 80047da:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 80047de:	89bb      	ldrh	r3, [r7, #12]
 80047e0:	2b7f      	cmp	r3, #127	@ 0x7f
 80047e2:	d809      	bhi.n	80047f8 <dwt_readfromdevice+0x62>
        {
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	1c5a      	adds	r2, r3, #1
 80047e8:	617a      	str	r2, [r7, #20]
 80047ea:	89ba      	ldrh	r2, [r7, #12]
 80047ec:	b2d2      	uxtb	r2, r2
 80047ee:	3318      	adds	r3, #24
 80047f0:	443b      	add	r3, r7
 80047f2:	f803 2c08 	strb.w	r2, [r3, #-8]
 80047f6:	e016      	b.n	8004826 <dwt_readfromdevice+0x90>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 80047f8:	89bb      	ldrh	r3, [r7, #12]
 80047fa:	b2da      	uxtb	r2, r3
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	1c59      	adds	r1, r3, #1
 8004800:	6179      	str	r1, [r7, #20]
 8004802:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004806:	b2d2      	uxtb	r2, r2
 8004808:	3318      	adds	r3, #24
 800480a:	443b      	add	r3, r7
 800480c:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8004810:	89bb      	ldrh	r3, [r7, #12]
 8004812:	09db      	lsrs	r3, r3, #7
 8004814:	b299      	uxth	r1, r3
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	1c5a      	adds	r2, r3, #1
 800481a:	617a      	str	r2, [r7, #20]
 800481c:	b2ca      	uxtb	r2, r1
 800481e:	3318      	adds	r3, #24
 8004820:	443b      	add	r3, r7
 8004822:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Do the read from the SPI
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	b298      	uxth	r0, r3
 800482a:	f107 0110 	add.w	r1, r7, #16
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	68ba      	ldr	r2, [r7, #8]
 8004832:	f000 fa9b 	bl	8004d6c <readfromspi>
} // end dwt_readfromdevice()
 8004836:	bf00      	nop
 8004838:	3718      	adds	r7, #24
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}

0800483e <dwt_read32bitoffsetreg>:
 * output parameters
 *
 * returns 32 bit register value
 */
uint32 dwt_read32bitoffsetreg(int regFileID, int regOffset)
{
 800483e:	b580      	push	{r7, lr}
 8004840:	b086      	sub	sp, #24
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
 8004846:	6039      	str	r1, [r7, #0]
    uint32  regval = 0 ;
 8004848:	2300      	movs	r3, #0
 800484a:	617b      	str	r3, [r7, #20]
    int     j ;
    uint8   buffer[4] ;

    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	b298      	uxth	r0, r3
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	b299      	uxth	r1, r3
 8004854:	f107 030c 	add.w	r3, r7, #12
 8004858:	2204      	movs	r2, #4
 800485a:	f7ff ff9c 	bl	8004796 <dwt_readfromdevice>

    for (j = 3 ; j >= 0 ; j --)
 800485e:	2303      	movs	r3, #3
 8004860:	613b      	str	r3, [r7, #16]
 8004862:	e00b      	b.n	800487c <dwt_read32bitoffsetreg+0x3e>
    {
        regval = (regval << 8) + buffer[j] ;
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	021b      	lsls	r3, r3, #8
 8004868:	f107 010c 	add.w	r1, r7, #12
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	440a      	add	r2, r1
 8004870:	7812      	ldrb	r2, [r2, #0]
 8004872:	4413      	add	r3, r2
 8004874:	617b      	str	r3, [r7, #20]
    for (j = 3 ; j >= 0 ; j --)
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	3b01      	subs	r3, #1
 800487a:	613b      	str	r3, [r7, #16]
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	2b00      	cmp	r3, #0
 8004880:	daf0      	bge.n	8004864 <dwt_read32bitoffsetreg+0x26>
    }
    return regval ;
 8004882:	697b      	ldr	r3, [r7, #20]

} // end dwt_read32bitoffsetreg()
 8004884:	4618      	mov	r0, r3
 8004886:	3718      	adds	r7, #24
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <dwt_read16bitoffsetreg>:
 * output parameters
 *
 * returns 16 bit register value
 */
uint16 dwt_read16bitoffsetreg(int regFileID, int regOffset)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
    uint16  regval = 0 ;
 8004896:	2300      	movs	r3, #0
 8004898:	81fb      	strh	r3, [r7, #14]
    uint8   buffer[2] ;

    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	b298      	uxth	r0, r3
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	b299      	uxth	r1, r3
 80048a2:	f107 030c 	add.w	r3, r7, #12
 80048a6:	2202      	movs	r2, #2
 80048a8:	f7ff ff75 	bl	8004796 <dwt_readfromdevice>

    regval = ((uint16)buffer[1] << 8) + buffer[0] ;
 80048ac:	7b7b      	ldrb	r3, [r7, #13]
 80048ae:	021b      	lsls	r3, r3, #8
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	7b3a      	ldrb	r2, [r7, #12]
 80048b4:	4413      	add	r3, r2
 80048b6:	81fb      	strh	r3, [r7, #14]
    return regval ;
 80048b8:	89fb      	ldrh	r3, [r7, #14]

} // end dwt_read16bitoffsetreg()
 80048ba:	4618      	mov	r0, r3
 80048bc:	3710      	adds	r7, #16
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <dwt_write8bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write8bitoffsetreg(int regFileID, int regOffset, uint8 regval)
{
 80048c2:	b580      	push	{r7, lr}
 80048c4:	b084      	sub	sp, #16
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	60f8      	str	r0, [r7, #12]
 80048ca:	60b9      	str	r1, [r7, #8]
 80048cc:	4613      	mov	r3, r2
 80048ce:	71fb      	strb	r3, [r7, #7]
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	b298      	uxth	r0, r3
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	b299      	uxth	r1, r3
 80048d8:	1dfb      	adds	r3, r7, #7
 80048da:	2201      	movs	r2, #1
 80048dc:	f7ff ff04 	bl	80046e8 <dwt_writetodevice>
}
 80048e0:	bf00      	nop
 80048e2:	3710      	adds	r7, #16
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <dwt_write16bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write16bitoffsetreg(int regFileID, int regOffset, uint16 regval)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b086      	sub	sp, #24
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	4613      	mov	r3, r2
 80048f4:	80fb      	strh	r3, [r7, #6]
    uint8   buffer[2] ;

    buffer[0] = regval & 0xFF;
 80048f6:	88fb      	ldrh	r3, [r7, #6]
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	753b      	strb	r3, [r7, #20]
    buffer[1] = regval >> 8 ;
 80048fc:	88fb      	ldrh	r3, [r7, #6]
 80048fe:	0a1b      	lsrs	r3, r3, #8
 8004900:	b29b      	uxth	r3, r3
 8004902:	b2db      	uxtb	r3, r3
 8004904:	757b      	strb	r3, [r7, #21]

    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	b298      	uxth	r0, r3
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	b299      	uxth	r1, r3
 800490e:	f107 0314 	add.w	r3, r7, #20
 8004912:	2202      	movs	r2, #2
 8004914:	f7ff fee8 	bl	80046e8 <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 8004918:	bf00      	nop
 800491a:	3718      	adds	r7, #24
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <dwt_write32bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write32bitoffsetreg(int regFileID, int regOffset, uint32 regval)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b086      	sub	sp, #24
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	607a      	str	r2, [r7, #4]
    int     j ;
    uint8   buffer[4] ;

    for ( j = 0 ; j < 4 ; j++ )
 800492c:	2300      	movs	r3, #0
 800492e:	617b      	str	r3, [r7, #20]
 8004930:	e00d      	b.n	800494e <dwt_write32bitoffsetreg+0x2e>
    {
        buffer[j] = regval & 0xff ;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	b2d9      	uxtb	r1, r3
 8004936:	f107 0210 	add.w	r2, r7, #16
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	4413      	add	r3, r2
 800493e:	460a      	mov	r2, r1
 8004940:	701a      	strb	r2, [r3, #0]
        regval >>= 8 ;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	0a1b      	lsrs	r3, r3, #8
 8004946:	607b      	str	r3, [r7, #4]
    for ( j = 0 ; j < 4 ; j++ )
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	3301      	adds	r3, #1
 800494c:	617b      	str	r3, [r7, #20]
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	2b03      	cmp	r3, #3
 8004952:	ddee      	ble.n	8004932 <dwt_write32bitoffsetreg+0x12>
    }

    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	b298      	uxth	r0, r3
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	b299      	uxth	r1, r3
 800495c:	f107 0310 	add.w	r3, r7, #16
 8004960:	2204      	movs	r2, #4
 8004962:	f7ff fec1 	bl	80046e8 <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 8004966:	bf00      	nop
 8004968:	3718      	adds	r7, #24
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}

0800496e <_dwt_otpread>:
 * output parameters
 *
 * returns the 32bit of read data
 */
uint32 _dwt_otpread(uint16 address)
{
 800496e:	b580      	push	{r7, lr}
 8004970:	b084      	sub	sp, #16
 8004972:	af00      	add	r7, sp, #0
 8004974:	4603      	mov	r3, r0
 8004976:	80fb      	strh	r3, [r7, #6]
    uint32 ret_data;

    // Write the address
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_ADDR, address);
 8004978:	88fb      	ldrh	r3, [r7, #6]
 800497a:	461a      	mov	r2, r3
 800497c:	2104      	movs	r1, #4
 800497e:	202d      	movs	r0, #45	@ 0x2d
 8004980:	f7ff ffb2 	bl	80048e8 <dwt_write16bitoffsetreg>

    // Perform OTP Read - Manual read mode has to be set
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN);
 8004984:	2203      	movs	r2, #3
 8004986:	2106      	movs	r1, #6
 8004988:	202d      	movs	r0, #45	@ 0x2d
 800498a:	f7ff ff9a 	bl	80048c2 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00); // OTPREAD is self clearing but OTPRDEN is not
 800498e:	2200      	movs	r2, #0
 8004990:	2106      	movs	r1, #6
 8004992:	202d      	movs	r0, #45	@ 0x2d
 8004994:	f7ff ff95 	bl	80048c2 <dwt_write8bitoffsetreg>

    // Read read data, available 40ns after rising edge of OTP_READ
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);
 8004998:	210a      	movs	r1, #10
 800499a:	202d      	movs	r0, #45	@ 0x2d
 800499c:	f7ff ff4f 	bl	800483e <dwt_read32bitoffsetreg>
 80049a0:	60f8      	str	r0, [r7, #12]

    // Return the 32bit of read data
    return ret_data;
 80049a2:	68fb      	ldr	r3, [r7, #12]
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3710      	adds	r7, #16
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <_dwt_aonarrayupload>:
 * output parameters
 *
 * no return value
 */
void _dwt_aonarrayupload(void)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	af00      	add	r7, sp, #0
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00); // Clear the register
 80049b0:	2200      	movs	r2, #0
 80049b2:	2102      	movs	r1, #2
 80049b4:	202c      	movs	r0, #44	@ 0x2c
 80049b6:	f7ff ff84 	bl	80048c2 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
 80049ba:	2202      	movs	r2, #2
 80049bc:	2102      	movs	r1, #2
 80049be:	202c      	movs	r0, #44	@ 0x2c
 80049c0:	f7ff ff7f 	bl	80048c2 <dwt_write8bitoffsetreg>
}
 80049c4:	bf00      	nop
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <_dwt_configlde>:
 * output parameters
 *
 * no return value
 */
void _dwt_configlde(int prfIndex)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register
 80049d0:	226d      	movs	r2, #109	@ 0x6d
 80049d2:	f640 0106 	movw	r1, #2054	@ 0x806
 80049d6:	202e      	movs	r0, #46	@ 0x2e
 80049d8:	f7ff ff73 	bl	80048c2 <dwt_write8bitoffsetreg>

    if(prfIndex)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d007      	beq.n	80049f2 <_dwt_configlde+0x2a>
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_64); // 16-bit LDE configuration tuning register
 80049e2:	f240 6207 	movw	r2, #1543	@ 0x607
 80049e6:	f641 0106 	movw	r1, #6150	@ 0x1806
 80049ea:	202e      	movs	r0, #46	@ 0x2e
 80049ec:	f7ff ff7c 	bl	80048e8 <dwt_write16bitoffsetreg>
    }
    else
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
    }
}
 80049f0:	e006      	b.n	8004a00 <_dwt_configlde+0x38>
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
 80049f2:	f241 6207 	movw	r2, #5639	@ 0x1607
 80049f6:	f641 0106 	movw	r1, #6150	@ 0x1806
 80049fa:	202e      	movs	r0, #46	@ 0x2e
 80049fc:	f7ff ff74 	bl	80048e8 <dwt_write16bitoffsetreg>
}
 8004a00:	bf00      	nop
 8004a02:	3708      	adds	r7, #8
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <_dwt_loaducodefromrom>:
 * output parameters
 *
 * no return value
 */
void _dwt_loaducodefromrom(void)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	af00      	add	r7, sp, #0
    // Set up clocks
    _dwt_enableclocks(FORCE_LDE);
 8004a0c:	200e      	movs	r0, #14
 8004a0e:	f000 f86b 	bl	8004ae8 <_dwt_enableclocks>

    // Kick off the LDE load
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD); // Set load LDE kick bit
 8004a12:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004a16:	2106      	movs	r1, #6
 8004a18:	202d      	movs	r0, #45	@ 0x2d
 8004a1a:	f7ff ff65 	bl	80048e8 <dwt_write16bitoffsetreg>

    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
 8004a1e:	2001      	movs	r0, #1
 8004a20:	f000 f964 	bl	8004cec <deca_sleep>

    // Default clocks (ENABLE_ALL_SEQ)
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 8004a24:	2001      	movs	r0, #1
 8004a26:	f000 f85f 	bl	8004ae8 <_dwt_enableclocks>
}
 8004a2a:	bf00      	nop
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <dwt_setleds>:
 * output parameters none
 *
 * no return value
 */
void dwt_setleds(uint8 mode)
{
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	b084      	sub	sp, #16
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	4603      	mov	r3, r0
 8004a36:	71fb      	strb	r3, [r7, #7]
    uint32 reg;

    if (mode & DWT_LEDS_ENABLE)
 8004a38:	79fb      	ldrb	r3, [r7, #7]
 8004a3a:	f003 0301 	and.w	r3, r3, #1
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d03f      	beq.n	8004ac2 <dwt_setleds+0x94>
    {
        // Set up MFIO for LED output.
        reg = dwt_read32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET);
 8004a42:	2100      	movs	r1, #0
 8004a44:	2026      	movs	r0, #38	@ 0x26
 8004a46:	f7ff fefa 	bl	800483e <dwt_read32bitoffsetreg>
 8004a4a:	60f8      	str	r0, [r7, #12]
        reg &= ~(GPIO_MSGP2_MASK | GPIO_MSGP3_MASK);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 8004a52:	60fb      	str	r3, [r7, #12]
        reg |= (GPIO_PIN2_RXLED | GPIO_PIN3_TXLED);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 8004a5a:	60fb      	str	r3, [r7, #12]
        dwt_write32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg);
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	2100      	movs	r1, #0
 8004a60:	2026      	movs	r0, #38	@ 0x26
 8004a62:	f7ff ff5d 	bl	8004920 <dwt_write32bitoffsetreg>

        // Enable LP Oscillator to run from counter and turn on de-bounce clock.
        reg = dwt_read32bitoffsetreg(PMSC_ID, PMSC_CTRL0_OFFSET);
 8004a66:	2100      	movs	r1, #0
 8004a68:	2036      	movs	r0, #54	@ 0x36
 8004a6a:	f7ff fee8 	bl	800483e <dwt_read32bitoffsetreg>
 8004a6e:	60f8      	str	r0, [r7, #12]
        reg |= (PMSC_CTRL0_GPDCE | PMSC_CTRL0_KHZCLEN);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f443 0304 	orr.w	r3, r3, #8650752	@ 0x840000
 8004a76:	60fb      	str	r3, [r7, #12]
        dwt_write32bitoffsetreg(PMSC_ID, PMSC_CTRL0_OFFSET, reg);
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	2100      	movs	r1, #0
 8004a7c:	2036      	movs	r0, #54	@ 0x36
 8004a7e:	f7ff ff4f 	bl	8004920 <dwt_write32bitoffsetreg>

        // Enable LEDs to blink and set default blink time.
        reg = PMSC_LEDC_BLNKEN | PMSC_LEDC_BLINK_TIME_DEF;
 8004a82:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8004a86:	60fb      	str	r3, [r7, #12]
        // Make LEDs blink once if requested.
        if (mode & DWT_LEDS_INIT_BLINK)
 8004a88:	79fb      	ldrb	r3, [r7, #7]
 8004a8a:	f003 0302 	and.w	r3, r3, #2
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d003      	beq.n	8004a9a <dwt_setleds+0x6c>
        {
            reg |= PMSC_LEDC_BLINK_NOW_ALL;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f443 2370 	orr.w	r3, r3, #983040	@ 0xf0000
 8004a98:	60fb      	str	r3, [r7, #12]
        }
        dwt_write32bitoffsetreg(PMSC_ID, PMSC_LEDC_OFFSET, reg);
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	2128      	movs	r1, #40	@ 0x28
 8004a9e:	2036      	movs	r0, #54	@ 0x36
 8004aa0:	f7ff ff3e 	bl	8004920 <dwt_write32bitoffsetreg>
        // Clear force blink bits if needed.
        if(mode & DWT_LEDS_INIT_BLINK)
 8004aa4:	79fb      	ldrb	r3, [r7, #7]
 8004aa6:	f003 0302 	and.w	r3, r3, #2
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d017      	beq.n	8004ade <dwt_setleds+0xb0>
        {
            reg &= ~PMSC_LEDC_BLINK_NOW_ALL;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8004ab4:	60fb      	str	r3, [r7, #12]
            dwt_write32bitoffsetreg(PMSC_ID, PMSC_LEDC_OFFSET, reg);
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	2128      	movs	r1, #40	@ 0x28
 8004aba:	2036      	movs	r0, #54	@ 0x36
 8004abc:	f7ff ff30 	bl	8004920 <dwt_write32bitoffsetreg>
        // Clear the GPIO bits that are used for LED control.
        reg = dwt_read32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET);
        reg &= ~(GPIO_MSGP2_MASK | GPIO_MSGP3_MASK);
        dwt_write32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg);
    }
}
 8004ac0:	e00d      	b.n	8004ade <dwt_setleds+0xb0>
        reg = dwt_read32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET);
 8004ac2:	2100      	movs	r1, #0
 8004ac4:	2026      	movs	r0, #38	@ 0x26
 8004ac6:	f7ff feba 	bl	800483e <dwt_read32bitoffsetreg>
 8004aca:	60f8      	str	r0, [r7, #12]
        reg &= ~(GPIO_MSGP2_MASK | GPIO_MSGP3_MASK);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 8004ad2:	60fb      	str	r3, [r7, #12]
        dwt_write32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg);
 8004ad4:	68fa      	ldr	r2, [r7, #12]
 8004ad6:	2100      	movs	r1, #0
 8004ad8:	2026      	movs	r0, #38	@ 0x26
 8004ada:	f7ff ff21 	bl	8004920 <dwt_write32bitoffsetreg>
}
 8004ade:	bf00      	nop
 8004ae0:	3710      	adds	r7, #16
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
	...

08004ae8 <_dwt_enableclocks>:
 * output parameters none
 *
 * no return value
 */
void _dwt_enableclocks(int clocks)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
    uint8 reg[2];

    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
 8004af0:	f107 030c 	add.w	r3, r7, #12
 8004af4:	2202      	movs	r2, #2
 8004af6:	2100      	movs	r1, #0
 8004af8:	2036      	movs	r0, #54	@ 0x36
 8004afa:	f7ff fe4c 	bl	8004796 <dwt_readfromdevice>
    switch(clocks)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2b0e      	cmp	r3, #14
 8004b02:	d876      	bhi.n	8004bf2 <_dwt_enableclocks+0x10a>
 8004b04:	a201      	add	r2, pc, #4	@ (adr r2, 8004b0c <_dwt_enableclocks+0x24>)
 8004b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b0a:	bf00      	nop
 8004b0c:	08004b59 	.word	0x08004b59
 8004b10:	08004b49 	.word	0x08004b49
 8004b14:	08004b6f 	.word	0x08004b6f
 8004b18:	08004bf3 	.word	0x08004bf3
 8004b1c:	08004bf3 	.word	0x08004bf3
 8004b20:	08004bf3 	.word	0x08004bf3
 8004b24:	08004bf3 	.word	0x08004bf3
 8004b28:	08004b85 	.word	0x08004b85
 8004b2c:	08004ba5 	.word	0x08004ba5
 8004b30:	08004bf3 	.word	0x08004bf3
 8004b34:	08004bf3 	.word	0x08004bf3
 8004b38:	08004bbb 	.word	0x08004bbb
 8004b3c:	08004bc7 	.word	0x08004bc7
 8004b40:	08004bd3 	.word	0x08004bd3
 8004b44:	08004be9 	.word	0x08004be9
    {
        case ENABLE_ALL_SEQ:
        {
            reg[0] = 0x00 ;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	733b      	strb	r3, [r7, #12]
            reg[1] = reg[1] & 0xfe;
 8004b4c:	7b7b      	ldrb	r3, [r7, #13]
 8004b4e:	f023 0301 	bic.w	r3, r3, #1
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	737b      	strb	r3, [r7, #13]
        }
        break;
 8004b56:	e04d      	b.n	8004bf4 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_XTI:
        {
            // System and RX
            reg[0] = 0x01 | (reg[0] & 0xfc);
 8004b58:	7b3b      	ldrb	r3, [r7, #12]
 8004b5a:	b25b      	sxtb	r3, r3
 8004b5c:	f023 0303 	bic.w	r3, r3, #3
 8004b60:	b25b      	sxtb	r3, r3
 8004b62:	f043 0301 	orr.w	r3, r3, #1
 8004b66:	b25b      	sxtb	r3, r3
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	733b      	strb	r3, [r7, #12]
        }
        break;
 8004b6c:	e042      	b.n	8004bf4 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_PLL:
        {
            // System
            reg[0] = 0x02 | (reg[0] & 0xfc);
 8004b6e:	7b3b      	ldrb	r3, [r7, #12]
 8004b70:	b25b      	sxtb	r3, r3
 8004b72:	f023 0303 	bic.w	r3, r3, #3
 8004b76:	b25b      	sxtb	r3, r3
 8004b78:	f043 0302 	orr.w	r3, r3, #2
 8004b7c:	b25b      	sxtb	r3, r3
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	733b      	strb	r3, [r7, #12]
        }
        break;
 8004b82:	e037      	b.n	8004bf4 <_dwt_enableclocks+0x10c>
        case READ_ACC_ON:
        {
            reg[0] = 0x48 | (reg[0] & 0xb3);
 8004b84:	7b3b      	ldrb	r3, [r7, #12]
 8004b86:	b25b      	sxtb	r3, r3
 8004b88:	f023 034c 	bic.w	r3, r3, #76	@ 0x4c
 8004b8c:	b25b      	sxtb	r3, r3
 8004b8e:	f043 0348 	orr.w	r3, r3, #72	@ 0x48
 8004b92:	b25b      	sxtb	r3, r3
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x80 | reg[1];
 8004b98:	7b7b      	ldrb	r3, [r7, #13]
 8004b9a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	737b      	strb	r3, [r7, #13]
        }
        break;
 8004ba2:	e027      	b.n	8004bf4 <_dwt_enableclocks+0x10c>
        case READ_ACC_OFF:
        {
            reg[0] = reg[0] & 0xb3;
 8004ba4:	7b3b      	ldrb	r3, [r7, #12]
 8004ba6:	f023 034c 	bic.w	r3, r3, #76	@ 0x4c
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x7f & reg[1];
 8004bae:	7b7b      	ldrb	r3, [r7, #13]
 8004bb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	737b      	strb	r3, [r7, #13]
        }
        break;
 8004bb8:	e01c      	b.n	8004bf4 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_ON:
        {
            reg[1] = 0x02 | reg[1];
 8004bba:	7b7b      	ldrb	r3, [r7, #13]
 8004bbc:	f043 0302 	orr.w	r3, r3, #2
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	737b      	strb	r3, [r7, #13]
        }
        break;
 8004bc4:	e016      	b.n	8004bf4 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_OFF:
        {
            reg[1] = reg[1] & 0xfd;
 8004bc6:	7b7b      	ldrb	r3, [r7, #13]
 8004bc8:	f023 0302 	bic.w	r3, r3, #2
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	737b      	strb	r3, [r7, #13]
        }
        break;
 8004bd0:	e010      	b.n	8004bf4 <_dwt_enableclocks+0x10c>
        case FORCE_TX_PLL:
        {
            reg[0] = 0x20 | (reg[0] & 0xcf);
 8004bd2:	7b3b      	ldrb	r3, [r7, #12]
 8004bd4:	b25b      	sxtb	r3, r3
 8004bd6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8004bda:	b25b      	sxtb	r3, r3
 8004bdc:	f043 0320 	orr.w	r3, r3, #32
 8004be0:	b25b      	sxtb	r3, r3
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	733b      	strb	r3, [r7, #12]
        }
        break;
 8004be6:	e005      	b.n	8004bf4 <_dwt_enableclocks+0x10c>
        case FORCE_LDE:
        {
            reg[0] = 0x01;
 8004be8:	2301      	movs	r3, #1
 8004bea:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x03;
 8004bec:	2303      	movs	r3, #3
 8004bee:	737b      	strb	r3, [r7, #13]
        }
        break;
 8004bf0:	e000      	b.n	8004bf4 <_dwt_enableclocks+0x10c>
        default:
        break;
 8004bf2:	bf00      	nop
    }


    // Need to write lower byte separately before setting the higher byte(s)
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0]);
 8004bf4:	f107 030c 	add.w	r3, r7, #12
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	2100      	movs	r1, #0
 8004bfc:	2036      	movs	r0, #54	@ 0x36
 8004bfe:	f7ff fd73 	bl	80046e8 <dwt_writetodevice>
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1]);
 8004c02:	f107 030c 	add.w	r3, r7, #12
 8004c06:	3301      	adds	r3, #1
 8004c08:	2201      	movs	r2, #1
 8004c0a:	2101      	movs	r1, #1
 8004c0c:	2036      	movs	r0, #54	@ 0x36
 8004c0e:	f7ff fd6b 	bl	80046e8 <dwt_writetodevice>

} // end _dwt_enableclocks()
 8004c12:	bf00      	nop
 8004c14:	3710      	adds	r7, #16
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop

08004c1c <_dwt_disablesequencing>:
 * output parameters none
 *
 * no return value
 */
void _dwt_disablesequencing(void) // Disable sequencing and go to state "INIT"
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	af00      	add	r7, sp, #0
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
 8004c20:	2000      	movs	r0, #0
 8004c22:	f7ff ff61 	bl	8004ae8 <_dwt_enableclocks>

    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE); // Disable PMSC ctrl of RF and RX clk blocks
 8004c26:	2200      	movs	r2, #0
 8004c28:	2104      	movs	r1, #4
 8004c2a:	2036      	movs	r0, #54	@ 0x36
 8004c2c:	f7ff fe5c 	bl	80048e8 <dwt_write16bitoffsetreg>
}
 8004c30:	bf00      	nop
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <dwt_softreset>:
 * output parameters
 *
 * no return value
 */
void dwt_softreset(void)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	af00      	add	r7, sp, #0
    _dwt_disablesequencing();
 8004c38:	f7ff fff0 	bl	8004c1c <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	2100      	movs	r1, #0
 8004c40:	202c      	movs	r0, #44	@ 0x2c
 8004c42:	f7ff fe51 	bl	80048e8 <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
 8004c46:	2200      	movs	r2, #0
 8004c48:	2106      	movs	r1, #6
 8004c4a:	202c      	movs	r0, #44	@ 0x2c
 8004c4c:	f7ff fe39 	bl	80048c2 <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
 8004c50:	f7ff feac 	bl	80049ac <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC (set the reset bits)
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
 8004c54:	2200      	movs	r2, #0
 8004c56:	2103      	movs	r1, #3
 8004c58:	2036      	movs	r0, #54	@ 0x36
 8004c5a:	f7ff fe32 	bl	80048c2 <dwt_write8bitoffsetreg>

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
 8004c5e:	2001      	movs	r0, #1
 8004c60:	f000 f844 	bl	8004cec <deca_sleep>

    // Clear the reset bits
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 8004c64:	22f0      	movs	r2, #240	@ 0xf0
 8004c66:	2103      	movs	r1, #3
 8004c68:	2036      	movs	r0, #54	@ 0x36
 8004c6a:	f7ff fe2a 	bl	80048c2 <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
 8004c6e:	4b03      	ldr	r3, [pc, #12]	@ (8004c7c <dwt_softreset+0x48>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2200      	movs	r2, #0
 8004c74:	755a      	strb	r2, [r3, #21]
}
 8004c76:	bf00      	nop
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	2000000c 	.word	0x2000000c

08004c80 <dwt_setxtaltrim>:
 * output parameters
 *
 * no return value
 */
void dwt_setxtaltrim(uint8 value)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	4603      	mov	r3, r0
 8004c88:	71fb      	strb	r3, [r7, #7]
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
 8004c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c8e:	f003 031f 	and.w	r3, r3, #31
 8004c92:	b25b      	sxtb	r3, r3
 8004c94:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004c98:	b25b      	sxtb	r3, r3
 8004c9a:	73fb      	strb	r3, [r7, #15]
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
 8004c9c:	7bfb      	ldrb	r3, [r7, #15]
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	210e      	movs	r1, #14
 8004ca2:	202b      	movs	r0, #43	@ 0x2b
 8004ca4:	f7ff fe0d 	bl	80048c2 <dwt_write8bitoffsetreg>
}
 8004ca8:	bf00      	nop
 8004caa:	3710      	adds	r7, #16
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)           
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
	decaIrqStatus_t s = port_GetEXT_IRQStatus();
 8004cb6:	f000 f9ef 	bl	8005098 <port_GetEXT_IRQStatus>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	607b      	str	r3, [r7, #4]

	if(s) {
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d001      	beq.n	8004cc8 <decamutexon+0x18>
		port_DisableEXT_IRQ(); //disable the external interrupt line
 8004cc4:	f000 f9da 	bl	800507c <port_DisableEXT_IRQ>
	}
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
 8004cc8:	687b      	ldr	r3, [r7, #4]
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3708      	adds	r7, #8
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <decamutexoff>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b082      	sub	sp, #8
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
	if(s) { //need to check the port state as we can't use level sensitive interrupt on the STM ARM
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d001      	beq.n	8004ce4 <decamutexoff+0x12>
		port_EnableEXT_IRQ();
 8004ce0:	f000 f9d3 	bl	800508a <port_EnableEXT_IRQ>
	}
}
 8004ce4:	bf00      	nop
 8004ce6:	3708      	adds	r7, #8
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <deca_sleep>:
#include "sleep.h"
#include "port.h"

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
__INLINE void deca_sleep(unsigned int time_ms)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
	Sleep(time_ms);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 f8f3 	bl	8004ee0 <Sleep>
}
 8004cfa:	bf00      	nop
 8004cfc:	3708      	adds	r7, #8
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
	...

08004d04 <writetospi>:
#pragma GCC optimize ("O3")
int writetospi(uint16_t headerLength,
               const    uint8_t *headerBuffer,
               uint32_t bodyLength,
               const    uint8_t *bodyBuffer)
{
 8004d04:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 8004d08:	4683      	mov	fp, r0
 8004d0a:	468a      	mov	sl, r1
 8004d0c:	4690      	mov	r8, r2
 8004d0e:	4699      	mov	r9, r3
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 8004d10:	f7ff ffce 	bl	8004cb0 <decamutexon>
 8004d14:	4606      	mov	r6, r0

    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8004d16:	4d13      	ldr	r5, [pc, #76]	@ (8004d64 <writetospi+0x60>)
 8004d18:	4628      	mov	r0, r5
 8004d1a:	f7fe fb2b 	bl	8003374 <HAL_SPI_GetState>
 8004d1e:	2801      	cmp	r0, #1
 8004d20:	4604      	mov	r4, r0
 8004d22:	d1f9      	bne.n	8004d18 <writetospi+0x14>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 8004d24:	2200      	movs	r2, #0
 8004d26:	2110      	movs	r1, #16
 8004d28:	480f      	ldr	r0, [pc, #60]	@ (8004d68 <writetospi+0x64>)
 8004d2a:	f7fc ff4e 	bl	8001bca <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&headerBuffer[0], headerLength, HAL_MAX_DELAY);    /* Send header in polling mode */
 8004d2e:	465a      	mov	r2, fp
 8004d30:	4651      	mov	r1, sl
 8004d32:	f04f 33ff 	mov.w	r3, #4294967295
 8004d36:	480b      	ldr	r0, [pc, #44]	@ (8004d64 <writetospi+0x60>)
 8004d38:	f7fe f9d8 	bl	80030ec <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&bodyBuffer[0], bodyLength, HAL_MAX_DELAY);        /* Send data in polling mode */
 8004d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8004d40:	4649      	mov	r1, r9
 8004d42:	fa1f f288 	uxth.w	r2, r8
 8004d46:	4807      	ldr	r0, [pc, #28]	@ (8004d64 <writetospi+0x60>)
 8004d48:	f7fe f9d0 	bl	80030ec <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 8004d4c:	4622      	mov	r2, r4
 8004d4e:	2110      	movs	r1, #16
 8004d50:	4805      	ldr	r0, [pc, #20]	@ (8004d68 <writetospi+0x64>)
 8004d52:	f7fc ff3a 	bl	8001bca <HAL_GPIO_WritePin>

    decamutexoff(stat);
 8004d56:	4630      	mov	r0, r6
 8004d58:	f7ff ffbb 	bl	8004cd2 <decamutexoff>

    return 0;
} // end writetospi()
 8004d5c:	2000      	movs	r0, #0
 8004d5e:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
 8004d62:	bf00      	nop
 8004d64:	20000254 	.word	0x20000254
 8004d68:	40010800 	.word	0x40010800

08004d6c <readfromspi>:
#pragma GCC optimize ("O3")
int readfromspi(uint16_t headerLength,
                const uint8_t *headerBuffer,
                uint32_t readlength,
                uint8_t *readBuffer)
{
 8004d6c:	e92d 4778 	stmdb	sp!, {r3, r4, r5, r6, r8, r9, sl, lr}
 8004d70:	4681      	mov	r9, r0
 8004d72:	460c      	mov	r4, r1
 8004d74:	4690      	mov	r8, r2
 8004d76:	461d      	mov	r5, r3
    int i;
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 8004d78:	f7ff ff9a 	bl	8004cb0 <decamutexon>
 8004d7c:	4606      	mov	r6, r0

    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8004d7e:	f8df a078 	ldr.w	sl, [pc, #120]	@ 8004df8 <readfromspi+0x8c>
 8004d82:	4650      	mov	r0, sl
 8004d84:	f7fe faf6 	bl	8003374 <HAL_SPI_GetState>
 8004d88:	2801      	cmp	r0, #1
 8004d8a:	d1fa      	bne.n	8004d82 <readfromspi+0x16>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	2110      	movs	r1, #16
 8004d90:	481a      	ldr	r0, [pc, #104]	@ (8004dfc <readfromspi+0x90>)
 8004d92:	f7fc ff1a 	bl	8001bca <HAL_GPIO_WritePin>

    /* Send header */
    for(i=0; i<headerLength; i++)
 8004d96:	f1b9 0f00 	cmp.w	r9, #0
 8004d9a:	d00c      	beq.n	8004db6 <readfromspi+0x4a>
    {
        HAL_SPI_Transmit(&hspi1, &headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 8004d9c:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8004df8 <readfromspi+0x8c>
 8004da0:	44a1      	add	r9, r4
 8004da2:	4621      	mov	r1, r4
 8004da4:	f04f 33ff 	mov.w	r3, #4294967295
 8004da8:	2201      	movs	r2, #1
 8004daa:	4650      	mov	r0, sl
    for(i=0; i<headerLength; i++)
 8004dac:	3401      	adds	r4, #1
        HAL_SPI_Transmit(&hspi1, &headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 8004dae:	f7fe f99d 	bl	80030ec <HAL_SPI_Transmit>
    for(i=0; i<headerLength; i++)
 8004db2:	454c      	cmp	r4, r9
 8004db4:	d1f5      	bne.n	8004da2 <readfromspi+0x36>
    }

    /* for the data buffer use LL functions directly as the HAL SPI read function
     * has issue reading single bytes */
    while(readlength-- > 0)
 8004db6:	f1b8 0f00 	cmp.w	r8, #0
 8004dba:	d012      	beq.n	8004de2 <readfromspi+0x76>
        /* Wait until TXE flag is set to send data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
        {
        }

        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 8004dbc:	2400      	movs	r4, #0
 8004dbe:	f8df c038 	ldr.w	ip, [pc, #56]	@ 8004df8 <readfromspi+0x8c>
 8004dc2:	eb05 0008 	add.w	r0, r5, r8
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
 8004dc6:	f8dc 1000 	ldr.w	r1, [ip]
 8004dca:	688a      	ldr	r2, [r1, #8]
 8004dcc:	0792      	lsls	r2, r2, #30
 8004dce:	d5fc      	bpl.n	8004dca <readfromspi+0x5e>
        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 8004dd0:	60cc      	str	r4, [r1, #12]
        e.g. when waking up DW1000 from DEEPSLEEP via dwt_spicswakeup() function.
        */

        /* Wait until RXNE flag is set to read data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET)
 8004dd2:	688a      	ldr	r2, [r1, #8]
 8004dd4:	07d3      	lsls	r3, r2, #31
 8004dd6:	d5fc      	bpl.n	8004dd2 <readfromspi+0x66>
        {
        }

        (*readBuffer++) = hspi1.Instance->DR;  //copy data read form (MISO)
 8004dd8:	68cb      	ldr	r3, [r1, #12]
 8004dda:	f805 3b01 	strb.w	r3, [r5], #1
    while(readlength-- > 0)
 8004dde:	42a8      	cmp	r0, r5
 8004de0:	d1f1      	bne.n	8004dc6 <readfromspi+0x5a>
    }

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 8004de2:	2201      	movs	r2, #1
 8004de4:	2110      	movs	r1, #16
 8004de6:	4805      	ldr	r0, [pc, #20]	@ (8004dfc <readfromspi+0x90>)
 8004de8:	f7fc feef 	bl	8001bca <HAL_GPIO_WritePin>

    decamutexoff(stat);
 8004dec:	4630      	mov	r0, r6
 8004dee:	f7ff ff70 	bl	8004cd2 <decamutexoff>

    return 0;
} // end readfromspi()
 8004df2:	2000      	movs	r0, #0
 8004df4:	e8bd 8778 	ldmia.w	sp!, {r3, r4, r5, r6, r8, r9, sl, pc}
 8004df8:	20000254 	.word	0x20000254
 8004dfc:	40010800 	.word	0x40010800

08004e00 <__NVIC_EnableIRQ>:
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	4603      	mov	r3, r0
 8004e08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	db0b      	blt.n	8004e2a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e12:	79fb      	ldrb	r3, [r7, #7]
 8004e14:	f003 021f 	and.w	r2, r3, #31
 8004e18:	4906      	ldr	r1, [pc, #24]	@ (8004e34 <__NVIC_EnableIRQ+0x34>)
 8004e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e1e:	095b      	lsrs	r3, r3, #5
 8004e20:	2001      	movs	r0, #1
 8004e22:	fa00 f202 	lsl.w	r2, r0, r2
 8004e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004e2a:	bf00      	nop
 8004e2c:	370c      	adds	r7, #12
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bc80      	pop	{r7}
 8004e32:	4770      	bx	lr
 8004e34:	e000e100 	.word	0xe000e100

08004e38 <__NVIC_DisableIRQ>:
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	4603      	mov	r3, r0
 8004e40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	db12      	blt.n	8004e70 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e4a:	79fb      	ldrb	r3, [r7, #7]
 8004e4c:	f003 021f 	and.w	r2, r3, #31
 8004e50:	490a      	ldr	r1, [pc, #40]	@ (8004e7c <__NVIC_DisableIRQ+0x44>)
 8004e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e56:	095b      	lsrs	r3, r3, #5
 8004e58:	2001      	movs	r0, #1
 8004e5a:	fa00 f202 	lsl.w	r2, r0, r2
 8004e5e:	3320      	adds	r3, #32
 8004e60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004e64:	f3bf 8f4f 	dsb	sy
}
 8004e68:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004e6a:	f3bf 8f6f 	isb	sy
}
 8004e6e:	bf00      	nop
}
 8004e70:	bf00      	nop
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bc80      	pop	{r7}
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	e000e100 	.word	0xe000e100

08004e80 <usleep>:
/* @fn    usleep
 * @brief precise usleep() delay
 * */
#pragma GCC optimize ("O0")
int usleep(uint64_t usec)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b085      	sub	sp, #20
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	e9c7 0100 	strd	r0, r1, [r7]
    int i,j;
#pragma GCC ivdep
    for(i=0;i<usec;i++)
 8004e8a:	2100      	movs	r1, #0
 8004e8c:	60f9      	str	r1, [r7, #12]
 8004e8e:	e012      	b.n	8004eb6 <usleep+0x36>
    {
#pragma GCC ivdep
        for(j=0;j<2;j++)
 8004e90:	2100      	movs	r1, #0
 8004e92:	60b9      	str	r1, [r7, #8]
 8004e94:	e004      	b.n	8004ea0 <usleep+0x20>
        {
            __NOP();
 8004e96:	bf00      	nop
            __NOP();
 8004e98:	bf00      	nop
        for(j=0;j<2;j++)
 8004e9a:	68b9      	ldr	r1, [r7, #8]
 8004e9c:	3101      	adds	r1, #1
 8004e9e:	60b9      	str	r1, [r7, #8]
 8004ea0:	68b9      	ldr	r1, [r7, #8]
 8004ea2:	2901      	cmp	r1, #1
 8004ea4:	bfd4      	ite	le
 8004ea6:	2101      	movle	r1, #1
 8004ea8:	2100      	movgt	r1, #0
 8004eaa:	b2c9      	uxtb	r1, r1
 8004eac:	2900      	cmp	r1, #0
 8004eae:	d1f2      	bne.n	8004e96 <usleep+0x16>
    for(i=0;i<usec;i++)
 8004eb0:	68f9      	ldr	r1, [r7, #12]
 8004eb2:	3101      	adds	r1, #1
 8004eb4:	60f9      	str	r1, [r7, #12]
 8004eb6:	68f9      	ldr	r1, [r7, #12]
 8004eb8:	17c8      	asrs	r0, r1, #31
 8004eba:	460a      	mov	r2, r1
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ec2:	4282      	cmp	r2, r0
 8004ec4:	eb73 0101 	sbcs.w	r1, r3, r1
 8004ec8:	bf34      	ite	cc
 8004eca:	2101      	movcc	r1, #1
 8004ecc:	2100      	movcs	r1, #0
 8004ece:	b2c9      	uxtb	r1, r1
 8004ed0:	2900      	cmp	r1, #0
 8004ed2:	d1dd      	bne.n	8004e90 <usleep+0x10>
        }
    }
    return 0;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3714      	adds	r7, #20
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bc80      	pop	{r7}
 8004ede:	4770      	bx	lr

08004ee0 <Sleep>:
/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void
Sleep(uint32_t x)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f7fc fabd 	bl	8001468 <HAL_Delay>
}
 8004eee:	bf00      	nop
 8004ef0:	3708      	adds	r7, #8
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
	...

08004ef8 <EXTI_GetITEnStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The "enable" state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITEnStatus(uint32_t x)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
    return ((NVIC->ISER[(((uint32_t)x) >> 5UL)] &\
 8004f00:	4a0a      	ldr	r2, [pc, #40]	@ (8004f2c <EXTI_GetITEnStatus+0x34>)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	095b      	lsrs	r3, r3, #5
 8004f06:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
            (uint32_t)(1UL << (((uint32_t)x) & 0x1FUL)) ) == (uint32_t)RESET)?(RESET):(SET);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f003 031f 	and.w	r3, r3, #31
 8004f10:	fa22 f303 	lsr.w	r3, r2, r3
 8004f14:	f003 0301 	and.w	r3, r3, #1
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	bf14      	ite	ne
 8004f1c:	2301      	movne	r3, #1
 8004f1e:	2300      	moveq	r3, #0
 8004f20:	b2db      	uxtb	r3, r3
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	370c      	adds	r7, #12
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bc80      	pop	{r7}
 8004f2a:	4770      	bx	lr
 8004f2c:	e000e100 	.word	0xe000e100

08004f30 <reset_DW1000>:
 *          In general it is output, but it also can be used to reset the digital
 *          part of DW1000 by driving this pin low.
 *          Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DW1000(void)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef    GPIO_InitStruct;

    // Enable GPIO used for DW1000 reset as open collector output
    GPIO_InitStruct.Pin = DW_RST_Pin;
 8004f36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004f3a:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8004f3c:	2311      	movs	r3, #17
 8004f3e:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f40:	2302      	movs	r3, #2
 8004f42:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 8004f44:	463b      	mov	r3, r7
 8004f46:	4619      	mov	r1, r3
 8004f48:	480c      	ldr	r0, [pc, #48]	@ (8004f7c <reset_DW1000+0x4c>)
 8004f4a:	f7fc fca3 	bl	8001894 <HAL_GPIO_Init>

    //drive the RSTn pin low
    HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_RESET);
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004f54:	4809      	ldr	r0, [pc, #36]	@ (8004f7c <reset_DW1000+0x4c>)
 8004f56:	f7fc fe38 	bl	8001bca <HAL_GPIO_WritePin>

    usleep(1);
 8004f5a:	f04f 0001 	mov.w	r0, #1
 8004f5e:	f04f 0100 	mov.w	r1, #0
 8004f62:	f7ff ff8d 	bl	8004e80 <usleep>

    //put the pin back to output open-drain (not active)
    setup_DW1000RSTnIRQ(0);
 8004f66:	2000      	movs	r0, #0
 8004f68:	f000 f80a 	bl	8004f80 <setup_DW1000RSTnIRQ>



    Sleep(2);
 8004f6c:	2002      	movs	r0, #2
 8004f6e:	f7ff ffb7 	bl	8004ee0 <Sleep>
}
 8004f72:	bf00      	nop
 8004f74:	3710      	adds	r7, #16
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	40010c00 	.word	0x40010c00

08004f80 <setup_DW1000RSTnIRQ>:
 * @brief   setup the DW_RESET pin mode
 *          0 - output Open collector mode
 *          !0 - input mode with connected EXTI0 IRQ
 * */
void setup_DW1000RSTnIRQ(int enable)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b086      	sub	sp, #24
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    if(enable)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d015      	beq.n	8004fba <setup_DW1000RSTnIRQ+0x3a>
    {
        // Enable GPIO used as DECA RESET for interrupt
        GPIO_InitStruct.Pin = DW_RST_Pin;
 8004f8e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004f92:	60bb      	str	r3, [r7, #8]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004f94:	4b17      	ldr	r3, [pc, #92]	@ (8004ff4 <setup_DW1000RSTnIRQ+0x74>)
 8004f96:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	613b      	str	r3, [r7, #16]
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 8004f9c:	f107 0308 	add.w	r3, r7, #8
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	4815      	ldr	r0, [pc, #84]	@ (8004ff8 <setup_DW1000RSTnIRQ+0x78>)
 8004fa4:	f7fc fc76 	bl	8001894 <HAL_GPIO_Init>

        HAL_NVIC_EnableIRQ(EXTI0_IRQn);     //pin #0 -> EXTI #0
 8004fa8:	2006      	movs	r0, #6
 8004faa:	f7fc fb98 	bl	80016de <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8004fae:	2200      	movs	r2, #0
 8004fb0:	2105      	movs	r1, #5
 8004fb2:	2006      	movs	r0, #6
 8004fb4:	f7fc fb77 	bl	80016a6 <HAL_NVIC_SetPriority>
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
        HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_SET);
    }
}
 8004fb8:	e017      	b.n	8004fea <setup_DW1000RSTnIRQ+0x6a>
        HAL_NVIC_DisableIRQ(EXTI0_IRQn);    //pin #0 -> EXTI #0
 8004fba:	2006      	movs	r0, #6
 8004fbc:	f7fc fb9d 	bl	80016fa <HAL_NVIC_DisableIRQ>
        GPIO_InitStruct.Pin = DW_RST_Pin;
 8004fc0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004fc4:	60bb      	str	r3, [r7, #8]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8004fc6:	2311      	movs	r3, #17
 8004fc8:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	617b      	str	r3, [r7, #20]
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 8004fd2:	f107 0308 	add.w	r3, r7, #8
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	4807      	ldr	r0, [pc, #28]	@ (8004ff8 <setup_DW1000RSTnIRQ+0x78>)
 8004fda:	f7fc fc5b 	bl	8001894 <HAL_GPIO_Init>
        HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_SET);
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004fe4:	4804      	ldr	r0, [pc, #16]	@ (8004ff8 <setup_DW1000RSTnIRQ+0x78>)
 8004fe6:	f7fc fdf0 	bl	8001bca <HAL_GPIO_WritePin>
}
 8004fea:	bf00      	nop
 8004fec:	3718      	adds	r7, #24
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	10110000 	.word	0x10110000
 8004ff8:	40010c00 	.word	0x40010c00

08004ffc <port_set_dw1000_slowrate>:
/* @fn      port_set_dw1000_slowrate
 * @brief   set 2.25MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_slowrate(void)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8005000:	4b03      	ldr	r3, [pc, #12]	@ (8005010 <port_set_dw1000_slowrate+0x14>)
 8005002:	2220      	movs	r2, #32
 8005004:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 8005006:	4802      	ldr	r0, [pc, #8]	@ (8005010 <port_set_dw1000_slowrate+0x14>)
 8005008:	f7fd ffec 	bl	8002fe4 <HAL_SPI_Init>
}
 800500c:	bf00      	nop
 800500e:	bd80      	pop	{r7, pc}
 8005010:	20000254 	.word	0x20000254

08005014 <port_set_dw1000_fastrate>:
/* @fn      port_set_dw1000_fastrate
 * @brief   set 18MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_fastrate(void)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8005018:	4b03      	ldr	r3, [pc, #12]	@ (8005028 <port_set_dw1000_fastrate+0x14>)
 800501a:	2208      	movs	r2, #8
 800501c:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 800501e:	4802      	ldr	r0, [pc, #8]	@ (8005028 <port_set_dw1000_fastrate+0x14>)
 8005020:	f7fd ffe0 	bl	8002fe4 <HAL_SPI_Init>
}
 8005024:	bf00      	nop
 8005026:	bd80      	pop	{r7, pc}
 8005028:	20000254 	.word	0x20000254

0800502c <HAL_GPIO_EXTI_Callback>:
/* @fn      HAL_GPIO_EXTI_Callback
 * @brief   IRQ HAL call-back for all EXTI configured lines
 *          i.e. DW_RESET_Pin and DW_IRQn_Pin
 * */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b082      	sub	sp, #8
 8005030:	af00      	add	r7, sp, #0
 8005032:	4603      	mov	r3, r0
 8005034:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == DW_RST_Pin)
 8005036:	88fb      	ldrh	r3, [r7, #6]
 8005038:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800503c:	d103      	bne.n	8005046 <HAL_GPIO_EXTI_Callback+0x1a>
    {
        signalResetDone = 1;
 800503e:	4b06      	ldr	r3, [pc, #24]	@ (8005058 <HAL_GPIO_EXTI_Callback+0x2c>)
 8005040:	2201      	movs	r2, #1
 8005042:	601a      	str	r2, [r3, #0]
        process_deca_irq();
    }
    else
    {
    }
}
 8005044:	e004      	b.n	8005050 <HAL_GPIO_EXTI_Callback+0x24>
    else if (GPIO_Pin == DW_IRQn_Pin)
 8005046:	88fb      	ldrh	r3, [r7, #6]
 8005048:	2b01      	cmp	r3, #1
 800504a:	d101      	bne.n	8005050 <HAL_GPIO_EXTI_Callback+0x24>
        process_deca_irq();
 800504c:	f000 f806 	bl	800505c <process_deca_irq>
}
 8005050:	bf00      	nop
 8005052:	3708      	adds	r7, #8
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	20000334 	.word	0x20000334

0800505c <process_deca_irq>:
 * @brief   main call-back for processing of DW1000 IRQ
 *          it re-enters the IRQ routing and processes all events.
 *          After processing of all events, DW1000 will clear the IRQ line.
 * */
__INLINE void process_deca_irq(void)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	af00      	add	r7, sp, #0
    while(port_CheckEXT_IRQ() != 0)
 8005060:	e002      	b.n	8005068 <process_deca_irq+0xc>
    {

        port_deca_isr();
 8005062:	4b05      	ldr	r3, [pc, #20]	@ (8005078 <process_deca_irq+0x1c>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4798      	blx	r3
    while(port_CheckEXT_IRQ() != 0)
 8005068:	f000 f81e 	bl	80050a8 <port_CheckEXT_IRQ>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d1f7      	bne.n	8005062 <process_deca_irq+0x6>

    } //while DW1000 IRQ line active
}
 8005072:	bf00      	nop
 8005074:	bf00      	nop
 8005076:	bd80      	pop	{r7, pc}
 8005078:	20000338 	.word	0x20000338

0800507c <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	af00      	add	r7, sp, #0
    NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn);
 8005080:	2017      	movs	r0, #23
 8005082:	f7ff fed9 	bl	8004e38 <__NVIC_DisableIRQ>
}
 8005086:	bf00      	nop
 8005088:	bd80      	pop	{r7, pc}

0800508a <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 800508a:	b580      	push	{r7, lr}
 800508c:	af00      	add	r7, sp, #0
    NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn);
 800508e:	2017      	movs	r0, #23
 8005090:	f7ff feb6 	bl	8004e00 <__NVIC_EnableIRQ>
}
 8005094:	bf00      	nop
 8005096:	bd80      	pop	{r7, pc}

08005098 <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	af00      	add	r7, sp, #0
    return EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn);
 800509c:	2017      	movs	r0, #23
 800509e:	f7ff ff2b 	bl	8004ef8 <EXTI_GetITEnStatus>
 80050a2:	4603      	mov	r3, r0
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <port_CheckEXT_IRQ>:

/* @fn      port_CheckEXT_IRQ
 * @brief   wrapper to read DW_IRQ input pin state
 * */
__INLINE uint32_t port_CheckEXT_IRQ(void)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(DECAIRQ_GPIO, DW_IRQn_Pin);
 80050ac:	2101      	movs	r1, #1
 80050ae:	4803      	ldr	r0, [pc, #12]	@ (80050bc <port_CheckEXT_IRQ+0x14>)
 80050b0:	f7fc fd74 	bl	8001b9c <HAL_GPIO_ReadPin>
 80050b4:	4603      	mov	r3, r0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	40010c00 	.word	0x40010c00

080050c0 <initialise_dw1000>:
/**
 * \brief Функция для инициализации DW1000
 * \return TRUE: инициализация успешна
 */
uint8_t
initialise_dw1000(void) {
 80050c0:	b580      	push	{r7, lr}
 80050c2:	af00      	add	r7, sp, #0
    reset_DW1000();
 80050c4:	f7ff ff34 	bl	8004f30 <reset_DW1000>

    port_set_dw1000_slowrate();
 80050c8:	f7ff ff98 	bl	8004ffc <port_set_dw1000_slowrate>
    if (dwt_initialise(DWT_LOADUCODE) == DWT_ERROR) {
 80050cc:	2001      	movs	r0, #1
 80050ce:	f7ff f84b 	bl	8004168 <dwt_initialise>
 80050d2:	4603      	mov	r3, r0
 80050d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d8:	d105      	bne.n	80050e6 <initialise_dw1000+0x26>
        terminal_print("Initialise dw1000 failed\r\n", strlen("Initialise dw1000 failed\r\n"));
 80050da:	211a      	movs	r1, #26
 80050dc:	4804      	ldr	r0, [pc, #16]	@ (80050f0 <initialise_dw1000+0x30>)
 80050de:	f000 f897 	bl	8005210 <terminal_print>
        while (1) {};
 80050e2:	bf00      	nop
 80050e4:	e7fd      	b.n	80050e2 <initialise_dw1000+0x22>
    }
    port_set_dw1000_fastrate();
 80050e6:	f7ff ff95 	bl	8005014 <port_set_dw1000_fastrate>

    return TRUE;
 80050ea:	2301      	movs	r3, #1
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	08007d10 	.word	0x08007d10

080050f4 <configure_dw1000>:
/**
 * \brief Функция для конфигурирования DW1000
 * \return TRUE: конфигурирование успешно
 */
uint8_t
configure_dw1000(void) {
 80050f4:	b580      	push	{r7, lr}
 80050f6:	af00      	add	r7, sp, #0
    dwt_configure(&config);
 80050f8:	4804      	ldr	r0, [pc, #16]	@ (800510c <configure_dw1000+0x18>)
 80050fa:	f7ff f98b 	bl	8004414 <dwt_configure>
    dwt_setleds(1); /* Включить системные светодиоды (RX - красный, TX - синий) */
 80050fe:	2001      	movs	r0, #1
 8005100:	f7ff fc95 	bl	8004a2e <dwt_setleds>

    /* Возможно придется восстанавливать предыдущий panid, так как у tag и anchor он разный */
    //dwt_setpanid(0);
    //dwt_enableframefilter(DWT_FF_DATA_EN);

    return TRUE;
 8005104:	2301      	movs	r3, #1
}
 8005106:	4618      	mov	r0, r3
 8005108:	bd80      	pop	{r7, pc}
 800510a:	bf00      	nop
 800510c:	20000010 	.word	0x20000010

08005110 <lwshell_init_ex>:
 * \brief           Initialize shell interface
 * \param[in]       lwobj: LwSHELL object instance. Set to `NULL` to use default one
 * \return          \ref lwshellOK on success, member of \ref lwshellr_t otherwise
 */
lwshellr_t
lwshell_init_ex(lwshell_t* lwobj) {
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
    lwobj = LWSHELL_GET_LWOBJ(NULL);
 8005118:	4b06      	ldr	r3, [pc, #24]	@ (8005134 <lwshell_init_ex+0x24>)
 800511a:	607b      	str	r3, [r7, #4]
    LWSHELL_MEMSET(lwobj, 0x00, sizeof(*lwobj));
 800511c:	f44f 728a 	mov.w	r2, #276	@ 0x114
 8005120:	2100      	movs	r1, #0
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 fea9 	bl	8005e7a <memset>
    return lwshellOK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3708      	adds	r7, #8
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	2000033c 	.word	0x2000033c

08005138 <lwshell_set_output_fn_ex>:
 * \param[in]       out_fn: Output function to print library data.
 *                      Set to `NULL` to disable the feature
 * \return          \ref lwshellOK on success, member of \ref lwshellr_t otherwise
 */
lwshellr_t
lwshell_set_output_fn_ex(lwshell_t* lwobj, lwshell_output_fn out_fn) {
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
    lwobj = LWSHELL_GET_LWOBJ(lwobj);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d001      	beq.n	800514c <lwshell_set_output_fn_ex+0x14>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	e000      	b.n	800514e <lwshell_set_output_fn_ex+0x16>
 800514c:	4b05      	ldr	r3, [pc, #20]	@ (8005164 <lwshell_set_output_fn_ex+0x2c>)
 800514e:	607b      	str	r3, [r7, #4]
    lwobj->out_fn = out_fn;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	683a      	ldr	r2, [r7, #0]
 8005154:	601a      	str	r2, [r3, #0]
    return lwshellOK;
 8005156:	2300      	movs	r3, #0
}
 8005158:	4618      	mov	r0, r3
 800515a:	370c      	adds	r7, #12
 800515c:	46bd      	mov	sp, r7
 800515e:	bc80      	pop	{r7}
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop
 8005164:	2000033c 	.word	0x2000033c

08005168 <lwshell_register_cmd_ex>:
 * \param[in]       desc: Custom command description
 * \return          \ref lwshellOK on success, member of \ref lwshellr_t otherwise
 * \note            Available only when \ref LWSHELL_CFG_USE_DYNAMIC_COMMANDS is enabled
 */
lwshellr_t
lwshell_register_cmd_ex(lwshell_t* lwobj, const char* cmd_name, lwshell_cmd_fn cmd_fn, const char* desc) {
 8005168:	b480      	push	{r7}
 800516a:	b085      	sub	sp, #20
 800516c:	af00      	add	r7, sp, #0
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	607a      	str	r2, [r7, #4]
 8005174:	603b      	str	r3, [r7, #0]
    lwobj = LWSHELL_GET_LWOBJ(lwobj);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d001      	beq.n	8005180 <lwshell_register_cmd_ex+0x18>
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	e000      	b.n	8005182 <lwshell_register_cmd_ex+0x1a>
 8005180:	4b22      	ldr	r3, [pc, #136]	@ (800520c <lwshell_register_cmd_ex+0xa4>)
 8005182:	60fb      	str	r3, [r7, #12]

    if (cmd_name == NULL || cmd_fn == NULL || strlen(cmd_name) == 0) {
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d006      	beq.n	8005198 <lwshell_register_cmd_ex+0x30>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d003      	beq.n	8005198 <lwshell_register_cmd_ex+0x30>
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d101      	bne.n	800519c <lwshell_register_cmd_ex+0x34>
        return lwshellERRPAR;
 8005198:	2301      	movs	r3, #1
 800519a:	e032      	b.n	8005202 <lwshell_register_cmd_ex+0x9a>
    }

    /* Check for memory available */
    if (lwobj->dynamic_cmds_cnt < LWSHELL_ARRAYSIZE(lwobj->dynamic_cmds)) {
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80051a2:	2b07      	cmp	r3, #7
 80051a4:	d82c      	bhi.n	8005200 <lwshell_register_cmd_ex+0x98>
        lwobj->dynamic_cmds[lwobj->dynamic_cmds_cnt].name = cmd_name;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80051ac:	68f9      	ldr	r1, [r7, #12]
 80051ae:	4613      	mov	r3, r2
 80051b0:	005b      	lsls	r3, r3, #1
 80051b2:	4413      	add	r3, r2
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	440b      	add	r3, r1
 80051b8:	33b4      	adds	r3, #180	@ 0xb4
 80051ba:	68ba      	ldr	r2, [r7, #8]
 80051bc:	601a      	str	r2, [r3, #0]
        lwobj->dynamic_cmds[lwobj->dynamic_cmds_cnt].fn = cmd_fn;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80051c4:	68f9      	ldr	r1, [r7, #12]
 80051c6:	4613      	mov	r3, r2
 80051c8:	005b      	lsls	r3, r3, #1
 80051ca:	4413      	add	r3, r2
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	440b      	add	r3, r1
 80051d0:	33b0      	adds	r3, #176	@ 0xb0
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	601a      	str	r2, [r3, #0]
        lwobj->dynamic_cmds[lwobj->dynamic_cmds_cnt].desc = desc;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80051dc:	68f9      	ldr	r1, [r7, #12]
 80051de:	4613      	mov	r3, r2
 80051e0:	005b      	lsls	r3, r3, #1
 80051e2:	4413      	add	r3, r2
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	440b      	add	r3, r1
 80051e8:	33b8      	adds	r3, #184	@ 0xb8
 80051ea:	683a      	ldr	r2, [r7, #0]
 80051ec:	601a      	str	r2, [r3, #0]

        ++lwobj->dynamic_cmds_cnt;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80051f4:	1c5a      	adds	r2, r3, #1
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
        return lwshellOK;
 80051fc:	2300      	movs	r3, #0
 80051fe:	e000      	b.n	8005202 <lwshell_register_cmd_ex+0x9a>
    }
    return lwshellERRMEM;
 8005200:	2302      	movs	r3, #2
}
 8005202:	4618      	mov	r0, r3
 8005204:	3714      	adds	r7, #20
 8005206:	46bd      	mov	sp, r7
 8005208:	bc80      	pop	{r7}
 800520a:	4770      	bx	lr
 800520c:	2000033c 	.word	0x2000033c

08005210 <terminal_print>:
 * \param str Строка для вывода
 * \param len Размер строки для вывода
 * \return Статус завершения
 */
terminal_driver_status_t
terminal_print(uint8_t *str, uint16_t len) {
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	460b      	mov	r3, r1
 800521a:	807b      	strh	r3, [r7, #2]
    if (str == NULL || len == 0) {
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d002      	beq.n	8005228 <terminal_print+0x18>
 8005222:	887b      	ldrh	r3, [r7, #2]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d101      	bne.n	800522c <terminal_print+0x1c>
        return TERMINAL_DRIVER_NULL_ARGUMENT;
 8005228:	2304      	movs	r3, #4
 800522a:	e025      	b.n	8005278 <terminal_print+0x68>
    }

    HAL_StatusTypeDef hal_status = HAL_UART_Transmit(&huart1, str, len, 100);
 800522c:	887a      	ldrh	r2, [r7, #2]
 800522e:	2364      	movs	r3, #100	@ 0x64
 8005230:	6879      	ldr	r1, [r7, #4]
 8005232:	4813      	ldr	r0, [pc, #76]	@ (8005280 <terminal_print+0x70>)
 8005234:	f7fe f9b5 	bl	80035a2 <HAL_UART_Transmit>
 8005238:	4603      	mov	r3, r0
 800523a:	73fb      	strb	r3, [r7, #15]

    while (HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY) {};
 800523c:	bf00      	nop
 800523e:	4810      	ldr	r0, [pc, #64]	@ (8005280 <terminal_print+0x70>)
 8005240:	f7fe fcf2 	bl	8003c28 <HAL_UART_GetState>
 8005244:	4603      	mov	r3, r0
 8005246:	2b20      	cmp	r3, #32
 8005248:	d1f9      	bne.n	800523e <terminal_print+0x2e>

    switch (hal_status) {
 800524a:	7bfb      	ldrb	r3, [r7, #15]
 800524c:	2b03      	cmp	r3, #3
 800524e:	d813      	bhi.n	8005278 <terminal_print+0x68>
 8005250:	a201      	add	r2, pc, #4	@ (adr r2, 8005258 <terminal_print+0x48>)
 8005252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005256:	bf00      	nop
 8005258:	08005269 	.word	0x08005269
 800525c:	0800526d 	.word	0x0800526d
 8005260:	08005271 	.word	0x08005271
 8005264:	08005275 	.word	0x08005275
        case HAL_OK:
            return TERMINAL_DRIVER_OK;
 8005268:	2300      	movs	r3, #0
 800526a:	e005      	b.n	8005278 <terminal_print+0x68>
        case HAL_ERROR:
            return TERMINAL_DRIVER_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e003      	b.n	8005278 <terminal_print+0x68>
        case HAL_BUSY:
            return TERMINAL_DRIVER_BUSY;
 8005270:	2302      	movs	r3, #2
 8005272:	e001      	b.n	8005278 <terminal_print+0x68>
        case HAL_TIMEOUT:
            return TERMINAL_DRIVER_TIMEOUT;
 8005274:	2303      	movs	r3, #3
 8005276:	e7ff      	b.n	8005278 <terminal_print+0x68>
    }
}
 8005278:	4618      	mov	r0, r3
 800527a:	3710      	adds	r7, #16
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}
 8005280:	200002b0 	.word	0x200002b0

08005284 <terminal_settings_init>:

/**
 * \brief Инициализация настроек терминала
 */
void
terminal_settings_init(void) {
 8005284:	b480      	push	{r7}
 8005286:	af00      	add	r7, sp, #0
    terminal_settings.terminal_echo = false;
 8005288:	4b03      	ldr	r3, [pc, #12]	@ (8005298 <terminal_settings_init+0x14>)
 800528a:	2200      	movs	r2, #0
 800528c:	701a      	strb	r2, [r3, #0]
}
 800528e:	bf00      	nop
 8005290:	46bd      	mov	sp, r7
 8005292:	bc80      	pop	{r7}
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	20000450 	.word	0x20000450

0800529c <terminal_function_output>:
 * \brief Функция вывода, которая будет использоваться для печати данных из библиотеки LWSHELL пользователю
 * \param str Строка для вывода
 * \param lwobj LwSHELL объект
 */
void
terminal_function_output(const char *str, struct lwshell *lwobj) {
 800529c:	b580      	push	{r7, lr}
 800529e:	b082      	sub	sp, #8
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
    terminal_print((uint8_t *) str, strlen(str));
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f7fa ff52 	bl	8000150 <strlen>
 80052ac:	4603      	mov	r3, r0
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	4619      	mov	r1, r3
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f7ff ffac 	bl	8005210 <terminal_print>
}
 80052b8:	bf00      	nop
 80052ba:	3708      	adds	r7, #8
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <terminal_echo>:

/**
 * \brief Функция включения/выключения эхо терминала
 */
long int
terminal_echo(long int argc, char** argv) {
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
    if (terminal_settings.terminal_echo) {
 80052ca:	4b0c      	ldr	r3, [pc, #48]	@ (80052fc <terminal_echo+0x3c>)
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d007      	beq.n	80052e2 <terminal_echo+0x22>
        terminal_settings.terminal_echo = false;
 80052d2:	4b0a      	ldr	r3, [pc, #40]	@ (80052fc <terminal_echo+0x3c>)
 80052d4:	2200      	movs	r2, #0
 80052d6:	701a      	strb	r2, [r3, #0]
        terminal_print(TERMINAL_ECHO_OFF, strlen(TERMINAL_ECHO_OFF));
 80052d8:	2111      	movs	r1, #17
 80052da:	4809      	ldr	r0, [pc, #36]	@ (8005300 <terminal_echo+0x40>)
 80052dc:	f7ff ff98 	bl	8005210 <terminal_print>
 80052e0:	e006      	b.n	80052f0 <terminal_echo+0x30>
    } else {
        terminal_settings.terminal_echo = true;
 80052e2:	4b06      	ldr	r3, [pc, #24]	@ (80052fc <terminal_echo+0x3c>)
 80052e4:	2201      	movs	r2, #1
 80052e6:	701a      	strb	r2, [r3, #0]
        terminal_print(TERMINAL_ECHO_ON, strlen(TERMINAL_ECHO_ON));
 80052e8:	2110      	movs	r1, #16
 80052ea:	4806      	ldr	r0, [pc, #24]	@ (8005304 <terminal_echo+0x44>)
 80052ec:	f7ff ff90 	bl	8005210 <terminal_print>
    }

    return 0;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3708      	adds	r7, #8
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	20000450 	.word	0x20000450
 8005300:	08007d2c 	.word	0x08007d2c
 8005304:	08007d40 	.word	0x08007d40

08005308 <terminal_clear>:

/**
 * \brief Функция очистки терминала
 */
long int
terminal_clear(long int argc, char** argv) {
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
    terminal_print(TERMINAL_DISPLAY_CLEAR, strlen(TERMINAL_DISPLAY_CLEAR));
 8005312:	2104      	movs	r1, #4
 8005314:	4805      	ldr	r0, [pc, #20]	@ (800532c <terminal_clear+0x24>)
 8005316:	f7ff ff7b 	bl	8005210 <terminal_print>
    terminal_print(TERMINAL_RESET_CURSOR, strlen(TERMINAL_RESET_CURSOR));
 800531a:	2103      	movs	r1, #3
 800531c:	4804      	ldr	r0, [pc, #16]	@ (8005330 <terminal_clear+0x28>)
 800531e:	f7ff ff77 	bl	8005210 <terminal_print>

    return 0;
 8005322:	2300      	movs	r3, #0
}
 8005324:	4618      	mov	r0, r3
 8005326:	3708      	adds	r7, #8
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}
 800532c:	08007d54 	.word	0x08007d54
 8005330:	08007d5c 	.word	0x08007d5c

08005334 <terminal_test>:

/**
 * \brief Функция выводящая "Terminal test!" в консоль
 */
long int
terminal_test(long int argc, char** argv) {
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
    terminal_print("Terminal test!\r\n", strlen("Terminal test!\r\n"));
 800533e:	2110      	movs	r1, #16
 8005340:	4803      	ldr	r0, [pc, #12]	@ (8005350 <terminal_test+0x1c>)
 8005342:	f7ff ff65 	bl	8005210 <terminal_print>

    return 0;
 8005346:	2300      	movs	r3, #0
}
 8005348:	4618      	mov	r0, r3
 800534a:	3708      	adds	r7, #8
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}
 8005350:	08007d60 	.word	0x08007d60

08005354 <terminal_init>:

/**
 * \brief Функция инициализации терминала
 */
void
terminal_init(void) {
 8005354:	b580      	push	{r7, lr}
 8005356:	af00      	add	r7, sp, #0
    terminal_settings_init();
 8005358:	f7ff ff94 	bl	8005284 <terminal_settings_init>

    lwshell_init();
 800535c:	2000      	movs	r0, #0
 800535e:	f7ff fed7 	bl	8005110 <lwshell_init_ex>

    lwshell_set_output_fn_ex(NULL, terminal_function_output);
 8005362:	490c      	ldr	r1, [pc, #48]	@ (8005394 <terminal_init+0x40>)
 8005364:	2000      	movs	r0, #0
 8005366:	f7ff fee7 	bl	8005138 <lwshell_set_output_fn_ex>

    // Регистрируем команды, которые должны быть в терминале
    lwshell_register_cmd(TERMINAL_ECHO_CMD, terminal_echo, TERMINAL_ECHO_CMD_DESCRIPTION);
 800536a:	4b0b      	ldr	r3, [pc, #44]	@ (8005398 <terminal_init+0x44>)
 800536c:	4a0b      	ldr	r2, [pc, #44]	@ (800539c <terminal_init+0x48>)
 800536e:	490c      	ldr	r1, [pc, #48]	@ (80053a0 <terminal_init+0x4c>)
 8005370:	2000      	movs	r0, #0
 8005372:	f7ff fef9 	bl	8005168 <lwshell_register_cmd_ex>
    lwshell_register_cmd(TERMINAL_CLEAR_CMD, terminal_clear, TERMINAL_CLEAR_CMD_DESCRIPTION);
 8005376:	4b0b      	ldr	r3, [pc, #44]	@ (80053a4 <terminal_init+0x50>)
 8005378:	4a0b      	ldr	r2, [pc, #44]	@ (80053a8 <terminal_init+0x54>)
 800537a:	490c      	ldr	r1, [pc, #48]	@ (80053ac <terminal_init+0x58>)
 800537c:	2000      	movs	r0, #0
 800537e:	f7ff fef3 	bl	8005168 <lwshell_register_cmd_ex>
    lwshell_register_cmd(TERMINAL_TEST_CMD, terminal_test, TERMINAL_TEST_CMD_DESCRIPTION);
 8005382:	4b0b      	ldr	r3, [pc, #44]	@ (80053b0 <terminal_init+0x5c>)
 8005384:	4a0b      	ldr	r2, [pc, #44]	@ (80053b4 <terminal_init+0x60>)
 8005386:	490c      	ldr	r1, [pc, #48]	@ (80053b8 <terminal_init+0x64>)
 8005388:	2000      	movs	r0, #0
 800538a:	f7ff feed 	bl	8005168 <lwshell_register_cmd_ex>
}
 800538e:	bf00      	nop
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	0800529d 	.word	0x0800529d
 8005398:	08007d74 	.word	0x08007d74
 800539c:	080052c1 	.word	0x080052c1
 80053a0:	08007d8c 	.word	0x08007d8c
 80053a4:	08007d94 	.word	0x08007d94
 80053a8:	08005309 	.word	0x08005309
 80053ac:	08007da4 	.word	0x08007da4
 80053b0:	08007dac 	.word	0x08007dac
 80053b4:	08005335 	.word	0x08005335
 80053b8:	08007dc4 	.word	0x08007dc4

080053bc <__cvt>:
 80053bc:	2b00      	cmp	r3, #0
 80053be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053c2:	461d      	mov	r5, r3
 80053c4:	bfbb      	ittet	lt
 80053c6:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80053ca:	461d      	movlt	r5, r3
 80053cc:	2300      	movge	r3, #0
 80053ce:	232d      	movlt	r3, #45	@ 0x2d
 80053d0:	b088      	sub	sp, #32
 80053d2:	4614      	mov	r4, r2
 80053d4:	bfb8      	it	lt
 80053d6:	4614      	movlt	r4, r2
 80053d8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80053da:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80053dc:	7013      	strb	r3, [r2, #0]
 80053de:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80053e0:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80053e4:	f023 0820 	bic.w	r8, r3, #32
 80053e8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80053ec:	d005      	beq.n	80053fa <__cvt+0x3e>
 80053ee:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80053f2:	d100      	bne.n	80053f6 <__cvt+0x3a>
 80053f4:	3601      	adds	r6, #1
 80053f6:	2302      	movs	r3, #2
 80053f8:	e000      	b.n	80053fc <__cvt+0x40>
 80053fa:	2303      	movs	r3, #3
 80053fc:	aa07      	add	r2, sp, #28
 80053fe:	9204      	str	r2, [sp, #16]
 8005400:	aa06      	add	r2, sp, #24
 8005402:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005406:	e9cd 3600 	strd	r3, r6, [sp]
 800540a:	4622      	mov	r2, r4
 800540c:	462b      	mov	r3, r5
 800540e:	f000 fe4b 	bl	80060a8 <_dtoa_r>
 8005412:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005416:	4607      	mov	r7, r0
 8005418:	d119      	bne.n	800544e <__cvt+0x92>
 800541a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800541c:	07db      	lsls	r3, r3, #31
 800541e:	d50e      	bpl.n	800543e <__cvt+0x82>
 8005420:	eb00 0906 	add.w	r9, r0, r6
 8005424:	2200      	movs	r2, #0
 8005426:	2300      	movs	r3, #0
 8005428:	4620      	mov	r0, r4
 800542a:	4629      	mov	r1, r5
 800542c:	f7fb fabc 	bl	80009a8 <__aeabi_dcmpeq>
 8005430:	b108      	cbz	r0, 8005436 <__cvt+0x7a>
 8005432:	f8cd 901c 	str.w	r9, [sp, #28]
 8005436:	2230      	movs	r2, #48	@ 0x30
 8005438:	9b07      	ldr	r3, [sp, #28]
 800543a:	454b      	cmp	r3, r9
 800543c:	d31e      	bcc.n	800547c <__cvt+0xc0>
 800543e:	4638      	mov	r0, r7
 8005440:	9b07      	ldr	r3, [sp, #28]
 8005442:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005444:	1bdb      	subs	r3, r3, r7
 8005446:	6013      	str	r3, [r2, #0]
 8005448:	b008      	add	sp, #32
 800544a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800544e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005452:	eb00 0906 	add.w	r9, r0, r6
 8005456:	d1e5      	bne.n	8005424 <__cvt+0x68>
 8005458:	7803      	ldrb	r3, [r0, #0]
 800545a:	2b30      	cmp	r3, #48	@ 0x30
 800545c:	d10a      	bne.n	8005474 <__cvt+0xb8>
 800545e:	2200      	movs	r2, #0
 8005460:	2300      	movs	r3, #0
 8005462:	4620      	mov	r0, r4
 8005464:	4629      	mov	r1, r5
 8005466:	f7fb fa9f 	bl	80009a8 <__aeabi_dcmpeq>
 800546a:	b918      	cbnz	r0, 8005474 <__cvt+0xb8>
 800546c:	f1c6 0601 	rsb	r6, r6, #1
 8005470:	f8ca 6000 	str.w	r6, [sl]
 8005474:	f8da 3000 	ldr.w	r3, [sl]
 8005478:	4499      	add	r9, r3
 800547a:	e7d3      	b.n	8005424 <__cvt+0x68>
 800547c:	1c59      	adds	r1, r3, #1
 800547e:	9107      	str	r1, [sp, #28]
 8005480:	701a      	strb	r2, [r3, #0]
 8005482:	e7d9      	b.n	8005438 <__cvt+0x7c>

08005484 <__exponent>:
 8005484:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005486:	2900      	cmp	r1, #0
 8005488:	bfb6      	itet	lt
 800548a:	232d      	movlt	r3, #45	@ 0x2d
 800548c:	232b      	movge	r3, #43	@ 0x2b
 800548e:	4249      	neglt	r1, r1
 8005490:	2909      	cmp	r1, #9
 8005492:	7002      	strb	r2, [r0, #0]
 8005494:	7043      	strb	r3, [r0, #1]
 8005496:	dd29      	ble.n	80054ec <__exponent+0x68>
 8005498:	f10d 0307 	add.w	r3, sp, #7
 800549c:	461d      	mov	r5, r3
 800549e:	270a      	movs	r7, #10
 80054a0:	fbb1 f6f7 	udiv	r6, r1, r7
 80054a4:	461a      	mov	r2, r3
 80054a6:	fb07 1416 	mls	r4, r7, r6, r1
 80054aa:	3430      	adds	r4, #48	@ 0x30
 80054ac:	f802 4c01 	strb.w	r4, [r2, #-1]
 80054b0:	460c      	mov	r4, r1
 80054b2:	2c63      	cmp	r4, #99	@ 0x63
 80054b4:	4631      	mov	r1, r6
 80054b6:	f103 33ff 	add.w	r3, r3, #4294967295
 80054ba:	dcf1      	bgt.n	80054a0 <__exponent+0x1c>
 80054bc:	3130      	adds	r1, #48	@ 0x30
 80054be:	1e94      	subs	r4, r2, #2
 80054c0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80054c4:	4623      	mov	r3, r4
 80054c6:	1c41      	adds	r1, r0, #1
 80054c8:	42ab      	cmp	r3, r5
 80054ca:	d30a      	bcc.n	80054e2 <__exponent+0x5e>
 80054cc:	f10d 0309 	add.w	r3, sp, #9
 80054d0:	1a9b      	subs	r3, r3, r2
 80054d2:	42ac      	cmp	r4, r5
 80054d4:	bf88      	it	hi
 80054d6:	2300      	movhi	r3, #0
 80054d8:	3302      	adds	r3, #2
 80054da:	4403      	add	r3, r0
 80054dc:	1a18      	subs	r0, r3, r0
 80054de:	b003      	add	sp, #12
 80054e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054e2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80054e6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80054ea:	e7ed      	b.n	80054c8 <__exponent+0x44>
 80054ec:	2330      	movs	r3, #48	@ 0x30
 80054ee:	3130      	adds	r1, #48	@ 0x30
 80054f0:	7083      	strb	r3, [r0, #2]
 80054f2:	70c1      	strb	r1, [r0, #3]
 80054f4:	1d03      	adds	r3, r0, #4
 80054f6:	e7f1      	b.n	80054dc <__exponent+0x58>

080054f8 <_printf_float>:
 80054f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054fc:	b091      	sub	sp, #68	@ 0x44
 80054fe:	460c      	mov	r4, r1
 8005500:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005504:	4616      	mov	r6, r2
 8005506:	461f      	mov	r7, r3
 8005508:	4605      	mov	r5, r0
 800550a:	f000 fcbf 	bl	8005e8c <_localeconv_r>
 800550e:	6803      	ldr	r3, [r0, #0]
 8005510:	4618      	mov	r0, r3
 8005512:	9308      	str	r3, [sp, #32]
 8005514:	f7fa fe1c 	bl	8000150 <strlen>
 8005518:	2300      	movs	r3, #0
 800551a:	930e      	str	r3, [sp, #56]	@ 0x38
 800551c:	f8d8 3000 	ldr.w	r3, [r8]
 8005520:	9009      	str	r0, [sp, #36]	@ 0x24
 8005522:	3307      	adds	r3, #7
 8005524:	f023 0307 	bic.w	r3, r3, #7
 8005528:	f103 0208 	add.w	r2, r3, #8
 800552c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005530:	f8d4 b000 	ldr.w	fp, [r4]
 8005534:	f8c8 2000 	str.w	r2, [r8]
 8005538:	e9d3 8900 	ldrd	r8, r9, [r3]
 800553c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005540:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005542:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005546:	f04f 32ff 	mov.w	r2, #4294967295
 800554a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800554e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005552:	4b9c      	ldr	r3, [pc, #624]	@ (80057c4 <_printf_float+0x2cc>)
 8005554:	f7fb fa5a 	bl	8000a0c <__aeabi_dcmpun>
 8005558:	bb70      	cbnz	r0, 80055b8 <_printf_float+0xc0>
 800555a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800555e:	f04f 32ff 	mov.w	r2, #4294967295
 8005562:	4b98      	ldr	r3, [pc, #608]	@ (80057c4 <_printf_float+0x2cc>)
 8005564:	f7fb fa34 	bl	80009d0 <__aeabi_dcmple>
 8005568:	bb30      	cbnz	r0, 80055b8 <_printf_float+0xc0>
 800556a:	2200      	movs	r2, #0
 800556c:	2300      	movs	r3, #0
 800556e:	4640      	mov	r0, r8
 8005570:	4649      	mov	r1, r9
 8005572:	f7fb fa23 	bl	80009bc <__aeabi_dcmplt>
 8005576:	b110      	cbz	r0, 800557e <_printf_float+0x86>
 8005578:	232d      	movs	r3, #45	@ 0x2d
 800557a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800557e:	4a92      	ldr	r2, [pc, #584]	@ (80057c8 <_printf_float+0x2d0>)
 8005580:	4b92      	ldr	r3, [pc, #584]	@ (80057cc <_printf_float+0x2d4>)
 8005582:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005586:	bf8c      	ite	hi
 8005588:	4690      	movhi	r8, r2
 800558a:	4698      	movls	r8, r3
 800558c:	2303      	movs	r3, #3
 800558e:	f04f 0900 	mov.w	r9, #0
 8005592:	6123      	str	r3, [r4, #16]
 8005594:	f02b 0304 	bic.w	r3, fp, #4
 8005598:	6023      	str	r3, [r4, #0]
 800559a:	4633      	mov	r3, r6
 800559c:	4621      	mov	r1, r4
 800559e:	4628      	mov	r0, r5
 80055a0:	9700      	str	r7, [sp, #0]
 80055a2:	aa0f      	add	r2, sp, #60	@ 0x3c
 80055a4:	f000 f9d4 	bl	8005950 <_printf_common>
 80055a8:	3001      	adds	r0, #1
 80055aa:	f040 8090 	bne.w	80056ce <_printf_float+0x1d6>
 80055ae:	f04f 30ff 	mov.w	r0, #4294967295
 80055b2:	b011      	add	sp, #68	@ 0x44
 80055b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055b8:	4642      	mov	r2, r8
 80055ba:	464b      	mov	r3, r9
 80055bc:	4640      	mov	r0, r8
 80055be:	4649      	mov	r1, r9
 80055c0:	f7fb fa24 	bl	8000a0c <__aeabi_dcmpun>
 80055c4:	b148      	cbz	r0, 80055da <_printf_float+0xe2>
 80055c6:	464b      	mov	r3, r9
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	bfb8      	it	lt
 80055cc:	232d      	movlt	r3, #45	@ 0x2d
 80055ce:	4a80      	ldr	r2, [pc, #512]	@ (80057d0 <_printf_float+0x2d8>)
 80055d0:	bfb8      	it	lt
 80055d2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80055d6:	4b7f      	ldr	r3, [pc, #508]	@ (80057d4 <_printf_float+0x2dc>)
 80055d8:	e7d3      	b.n	8005582 <_printf_float+0x8a>
 80055da:	6863      	ldr	r3, [r4, #4]
 80055dc:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80055e0:	1c5a      	adds	r2, r3, #1
 80055e2:	d13f      	bne.n	8005664 <_printf_float+0x16c>
 80055e4:	2306      	movs	r3, #6
 80055e6:	6063      	str	r3, [r4, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80055ee:	6023      	str	r3, [r4, #0]
 80055f0:	9206      	str	r2, [sp, #24]
 80055f2:	aa0e      	add	r2, sp, #56	@ 0x38
 80055f4:	e9cd a204 	strd	sl, r2, [sp, #16]
 80055f8:	aa0d      	add	r2, sp, #52	@ 0x34
 80055fa:	9203      	str	r2, [sp, #12]
 80055fc:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005600:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005604:	6863      	ldr	r3, [r4, #4]
 8005606:	4642      	mov	r2, r8
 8005608:	9300      	str	r3, [sp, #0]
 800560a:	4628      	mov	r0, r5
 800560c:	464b      	mov	r3, r9
 800560e:	910a      	str	r1, [sp, #40]	@ 0x28
 8005610:	f7ff fed4 	bl	80053bc <__cvt>
 8005614:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005616:	4680      	mov	r8, r0
 8005618:	2947      	cmp	r1, #71	@ 0x47
 800561a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800561c:	d128      	bne.n	8005670 <_printf_float+0x178>
 800561e:	1cc8      	adds	r0, r1, #3
 8005620:	db02      	blt.n	8005628 <_printf_float+0x130>
 8005622:	6863      	ldr	r3, [r4, #4]
 8005624:	4299      	cmp	r1, r3
 8005626:	dd40      	ble.n	80056aa <_printf_float+0x1b2>
 8005628:	f1aa 0a02 	sub.w	sl, sl, #2
 800562c:	fa5f fa8a 	uxtb.w	sl, sl
 8005630:	4652      	mov	r2, sl
 8005632:	3901      	subs	r1, #1
 8005634:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005638:	910d      	str	r1, [sp, #52]	@ 0x34
 800563a:	f7ff ff23 	bl	8005484 <__exponent>
 800563e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005640:	4681      	mov	r9, r0
 8005642:	1813      	adds	r3, r2, r0
 8005644:	2a01      	cmp	r2, #1
 8005646:	6123      	str	r3, [r4, #16]
 8005648:	dc02      	bgt.n	8005650 <_printf_float+0x158>
 800564a:	6822      	ldr	r2, [r4, #0]
 800564c:	07d2      	lsls	r2, r2, #31
 800564e:	d501      	bpl.n	8005654 <_printf_float+0x15c>
 8005650:	3301      	adds	r3, #1
 8005652:	6123      	str	r3, [r4, #16]
 8005654:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005658:	2b00      	cmp	r3, #0
 800565a:	d09e      	beq.n	800559a <_printf_float+0xa2>
 800565c:	232d      	movs	r3, #45	@ 0x2d
 800565e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005662:	e79a      	b.n	800559a <_printf_float+0xa2>
 8005664:	2947      	cmp	r1, #71	@ 0x47
 8005666:	d1bf      	bne.n	80055e8 <_printf_float+0xf0>
 8005668:	2b00      	cmp	r3, #0
 800566a:	d1bd      	bne.n	80055e8 <_printf_float+0xf0>
 800566c:	2301      	movs	r3, #1
 800566e:	e7ba      	b.n	80055e6 <_printf_float+0xee>
 8005670:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005674:	d9dc      	bls.n	8005630 <_printf_float+0x138>
 8005676:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800567a:	d118      	bne.n	80056ae <_printf_float+0x1b6>
 800567c:	2900      	cmp	r1, #0
 800567e:	6863      	ldr	r3, [r4, #4]
 8005680:	dd0b      	ble.n	800569a <_printf_float+0x1a2>
 8005682:	6121      	str	r1, [r4, #16]
 8005684:	b913      	cbnz	r3, 800568c <_printf_float+0x194>
 8005686:	6822      	ldr	r2, [r4, #0]
 8005688:	07d0      	lsls	r0, r2, #31
 800568a:	d502      	bpl.n	8005692 <_printf_float+0x19a>
 800568c:	3301      	adds	r3, #1
 800568e:	440b      	add	r3, r1
 8005690:	6123      	str	r3, [r4, #16]
 8005692:	f04f 0900 	mov.w	r9, #0
 8005696:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005698:	e7dc      	b.n	8005654 <_printf_float+0x15c>
 800569a:	b913      	cbnz	r3, 80056a2 <_printf_float+0x1aa>
 800569c:	6822      	ldr	r2, [r4, #0]
 800569e:	07d2      	lsls	r2, r2, #31
 80056a0:	d501      	bpl.n	80056a6 <_printf_float+0x1ae>
 80056a2:	3302      	adds	r3, #2
 80056a4:	e7f4      	b.n	8005690 <_printf_float+0x198>
 80056a6:	2301      	movs	r3, #1
 80056a8:	e7f2      	b.n	8005690 <_printf_float+0x198>
 80056aa:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80056ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80056b0:	4299      	cmp	r1, r3
 80056b2:	db05      	blt.n	80056c0 <_printf_float+0x1c8>
 80056b4:	6823      	ldr	r3, [r4, #0]
 80056b6:	6121      	str	r1, [r4, #16]
 80056b8:	07d8      	lsls	r0, r3, #31
 80056ba:	d5ea      	bpl.n	8005692 <_printf_float+0x19a>
 80056bc:	1c4b      	adds	r3, r1, #1
 80056be:	e7e7      	b.n	8005690 <_printf_float+0x198>
 80056c0:	2900      	cmp	r1, #0
 80056c2:	bfcc      	ite	gt
 80056c4:	2201      	movgt	r2, #1
 80056c6:	f1c1 0202 	rsble	r2, r1, #2
 80056ca:	4413      	add	r3, r2
 80056cc:	e7e0      	b.n	8005690 <_printf_float+0x198>
 80056ce:	6823      	ldr	r3, [r4, #0]
 80056d0:	055a      	lsls	r2, r3, #21
 80056d2:	d407      	bmi.n	80056e4 <_printf_float+0x1ec>
 80056d4:	6923      	ldr	r3, [r4, #16]
 80056d6:	4642      	mov	r2, r8
 80056d8:	4631      	mov	r1, r6
 80056da:	4628      	mov	r0, r5
 80056dc:	47b8      	blx	r7
 80056de:	3001      	adds	r0, #1
 80056e0:	d12b      	bne.n	800573a <_printf_float+0x242>
 80056e2:	e764      	b.n	80055ae <_printf_float+0xb6>
 80056e4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80056e8:	f240 80dc 	bls.w	80058a4 <_printf_float+0x3ac>
 80056ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80056f0:	2200      	movs	r2, #0
 80056f2:	2300      	movs	r3, #0
 80056f4:	f7fb f958 	bl	80009a8 <__aeabi_dcmpeq>
 80056f8:	2800      	cmp	r0, #0
 80056fa:	d033      	beq.n	8005764 <_printf_float+0x26c>
 80056fc:	2301      	movs	r3, #1
 80056fe:	4631      	mov	r1, r6
 8005700:	4628      	mov	r0, r5
 8005702:	4a35      	ldr	r2, [pc, #212]	@ (80057d8 <_printf_float+0x2e0>)
 8005704:	47b8      	blx	r7
 8005706:	3001      	adds	r0, #1
 8005708:	f43f af51 	beq.w	80055ae <_printf_float+0xb6>
 800570c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005710:	4543      	cmp	r3, r8
 8005712:	db02      	blt.n	800571a <_printf_float+0x222>
 8005714:	6823      	ldr	r3, [r4, #0]
 8005716:	07d8      	lsls	r0, r3, #31
 8005718:	d50f      	bpl.n	800573a <_printf_float+0x242>
 800571a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800571e:	4631      	mov	r1, r6
 8005720:	4628      	mov	r0, r5
 8005722:	47b8      	blx	r7
 8005724:	3001      	adds	r0, #1
 8005726:	f43f af42 	beq.w	80055ae <_printf_float+0xb6>
 800572a:	f04f 0900 	mov.w	r9, #0
 800572e:	f108 38ff 	add.w	r8, r8, #4294967295
 8005732:	f104 0a1a 	add.w	sl, r4, #26
 8005736:	45c8      	cmp	r8, r9
 8005738:	dc09      	bgt.n	800574e <_printf_float+0x256>
 800573a:	6823      	ldr	r3, [r4, #0]
 800573c:	079b      	lsls	r3, r3, #30
 800573e:	f100 8102 	bmi.w	8005946 <_printf_float+0x44e>
 8005742:	68e0      	ldr	r0, [r4, #12]
 8005744:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005746:	4298      	cmp	r0, r3
 8005748:	bfb8      	it	lt
 800574a:	4618      	movlt	r0, r3
 800574c:	e731      	b.n	80055b2 <_printf_float+0xba>
 800574e:	2301      	movs	r3, #1
 8005750:	4652      	mov	r2, sl
 8005752:	4631      	mov	r1, r6
 8005754:	4628      	mov	r0, r5
 8005756:	47b8      	blx	r7
 8005758:	3001      	adds	r0, #1
 800575a:	f43f af28 	beq.w	80055ae <_printf_float+0xb6>
 800575e:	f109 0901 	add.w	r9, r9, #1
 8005762:	e7e8      	b.n	8005736 <_printf_float+0x23e>
 8005764:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005766:	2b00      	cmp	r3, #0
 8005768:	dc38      	bgt.n	80057dc <_printf_float+0x2e4>
 800576a:	2301      	movs	r3, #1
 800576c:	4631      	mov	r1, r6
 800576e:	4628      	mov	r0, r5
 8005770:	4a19      	ldr	r2, [pc, #100]	@ (80057d8 <_printf_float+0x2e0>)
 8005772:	47b8      	blx	r7
 8005774:	3001      	adds	r0, #1
 8005776:	f43f af1a 	beq.w	80055ae <_printf_float+0xb6>
 800577a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800577e:	ea59 0303 	orrs.w	r3, r9, r3
 8005782:	d102      	bne.n	800578a <_printf_float+0x292>
 8005784:	6823      	ldr	r3, [r4, #0]
 8005786:	07d9      	lsls	r1, r3, #31
 8005788:	d5d7      	bpl.n	800573a <_printf_float+0x242>
 800578a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800578e:	4631      	mov	r1, r6
 8005790:	4628      	mov	r0, r5
 8005792:	47b8      	blx	r7
 8005794:	3001      	adds	r0, #1
 8005796:	f43f af0a 	beq.w	80055ae <_printf_float+0xb6>
 800579a:	f04f 0a00 	mov.w	sl, #0
 800579e:	f104 0b1a 	add.w	fp, r4, #26
 80057a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80057a4:	425b      	negs	r3, r3
 80057a6:	4553      	cmp	r3, sl
 80057a8:	dc01      	bgt.n	80057ae <_printf_float+0x2b6>
 80057aa:	464b      	mov	r3, r9
 80057ac:	e793      	b.n	80056d6 <_printf_float+0x1de>
 80057ae:	2301      	movs	r3, #1
 80057b0:	465a      	mov	r2, fp
 80057b2:	4631      	mov	r1, r6
 80057b4:	4628      	mov	r0, r5
 80057b6:	47b8      	blx	r7
 80057b8:	3001      	adds	r0, #1
 80057ba:	f43f aef8 	beq.w	80055ae <_printf_float+0xb6>
 80057be:	f10a 0a01 	add.w	sl, sl, #1
 80057c2:	e7ee      	b.n	80057a2 <_printf_float+0x2aa>
 80057c4:	7fefffff 	.word	0x7fefffff
 80057c8:	08007eae 	.word	0x08007eae
 80057cc:	08007eaa 	.word	0x08007eaa
 80057d0:	08007eb6 	.word	0x08007eb6
 80057d4:	08007eb2 	.word	0x08007eb2
 80057d8:	08007eba 	.word	0x08007eba
 80057dc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80057de:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80057e2:	4553      	cmp	r3, sl
 80057e4:	bfa8      	it	ge
 80057e6:	4653      	movge	r3, sl
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	4699      	mov	r9, r3
 80057ec:	dc36      	bgt.n	800585c <_printf_float+0x364>
 80057ee:	f04f 0b00 	mov.w	fp, #0
 80057f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80057f6:	f104 021a 	add.w	r2, r4, #26
 80057fa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80057fc:	930a      	str	r3, [sp, #40]	@ 0x28
 80057fe:	eba3 0309 	sub.w	r3, r3, r9
 8005802:	455b      	cmp	r3, fp
 8005804:	dc31      	bgt.n	800586a <_printf_float+0x372>
 8005806:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005808:	459a      	cmp	sl, r3
 800580a:	dc3a      	bgt.n	8005882 <_printf_float+0x38a>
 800580c:	6823      	ldr	r3, [r4, #0]
 800580e:	07da      	lsls	r2, r3, #31
 8005810:	d437      	bmi.n	8005882 <_printf_float+0x38a>
 8005812:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005814:	ebaa 0903 	sub.w	r9, sl, r3
 8005818:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800581a:	ebaa 0303 	sub.w	r3, sl, r3
 800581e:	4599      	cmp	r9, r3
 8005820:	bfa8      	it	ge
 8005822:	4699      	movge	r9, r3
 8005824:	f1b9 0f00 	cmp.w	r9, #0
 8005828:	dc33      	bgt.n	8005892 <_printf_float+0x39a>
 800582a:	f04f 0800 	mov.w	r8, #0
 800582e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005832:	f104 0b1a 	add.w	fp, r4, #26
 8005836:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005838:	ebaa 0303 	sub.w	r3, sl, r3
 800583c:	eba3 0309 	sub.w	r3, r3, r9
 8005840:	4543      	cmp	r3, r8
 8005842:	f77f af7a 	ble.w	800573a <_printf_float+0x242>
 8005846:	2301      	movs	r3, #1
 8005848:	465a      	mov	r2, fp
 800584a:	4631      	mov	r1, r6
 800584c:	4628      	mov	r0, r5
 800584e:	47b8      	blx	r7
 8005850:	3001      	adds	r0, #1
 8005852:	f43f aeac 	beq.w	80055ae <_printf_float+0xb6>
 8005856:	f108 0801 	add.w	r8, r8, #1
 800585a:	e7ec      	b.n	8005836 <_printf_float+0x33e>
 800585c:	4642      	mov	r2, r8
 800585e:	4631      	mov	r1, r6
 8005860:	4628      	mov	r0, r5
 8005862:	47b8      	blx	r7
 8005864:	3001      	adds	r0, #1
 8005866:	d1c2      	bne.n	80057ee <_printf_float+0x2f6>
 8005868:	e6a1      	b.n	80055ae <_printf_float+0xb6>
 800586a:	2301      	movs	r3, #1
 800586c:	4631      	mov	r1, r6
 800586e:	4628      	mov	r0, r5
 8005870:	920a      	str	r2, [sp, #40]	@ 0x28
 8005872:	47b8      	blx	r7
 8005874:	3001      	adds	r0, #1
 8005876:	f43f ae9a 	beq.w	80055ae <_printf_float+0xb6>
 800587a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800587c:	f10b 0b01 	add.w	fp, fp, #1
 8005880:	e7bb      	b.n	80057fa <_printf_float+0x302>
 8005882:	4631      	mov	r1, r6
 8005884:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005888:	4628      	mov	r0, r5
 800588a:	47b8      	blx	r7
 800588c:	3001      	adds	r0, #1
 800588e:	d1c0      	bne.n	8005812 <_printf_float+0x31a>
 8005890:	e68d      	b.n	80055ae <_printf_float+0xb6>
 8005892:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005894:	464b      	mov	r3, r9
 8005896:	4631      	mov	r1, r6
 8005898:	4628      	mov	r0, r5
 800589a:	4442      	add	r2, r8
 800589c:	47b8      	blx	r7
 800589e:	3001      	adds	r0, #1
 80058a0:	d1c3      	bne.n	800582a <_printf_float+0x332>
 80058a2:	e684      	b.n	80055ae <_printf_float+0xb6>
 80058a4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80058a8:	f1ba 0f01 	cmp.w	sl, #1
 80058ac:	dc01      	bgt.n	80058b2 <_printf_float+0x3ba>
 80058ae:	07db      	lsls	r3, r3, #31
 80058b0:	d536      	bpl.n	8005920 <_printf_float+0x428>
 80058b2:	2301      	movs	r3, #1
 80058b4:	4642      	mov	r2, r8
 80058b6:	4631      	mov	r1, r6
 80058b8:	4628      	mov	r0, r5
 80058ba:	47b8      	blx	r7
 80058bc:	3001      	adds	r0, #1
 80058be:	f43f ae76 	beq.w	80055ae <_printf_float+0xb6>
 80058c2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80058c6:	4631      	mov	r1, r6
 80058c8:	4628      	mov	r0, r5
 80058ca:	47b8      	blx	r7
 80058cc:	3001      	adds	r0, #1
 80058ce:	f43f ae6e 	beq.w	80055ae <_printf_float+0xb6>
 80058d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80058d6:	2200      	movs	r2, #0
 80058d8:	2300      	movs	r3, #0
 80058da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80058de:	f7fb f863 	bl	80009a8 <__aeabi_dcmpeq>
 80058e2:	b9c0      	cbnz	r0, 8005916 <_printf_float+0x41e>
 80058e4:	4653      	mov	r3, sl
 80058e6:	f108 0201 	add.w	r2, r8, #1
 80058ea:	4631      	mov	r1, r6
 80058ec:	4628      	mov	r0, r5
 80058ee:	47b8      	blx	r7
 80058f0:	3001      	adds	r0, #1
 80058f2:	d10c      	bne.n	800590e <_printf_float+0x416>
 80058f4:	e65b      	b.n	80055ae <_printf_float+0xb6>
 80058f6:	2301      	movs	r3, #1
 80058f8:	465a      	mov	r2, fp
 80058fa:	4631      	mov	r1, r6
 80058fc:	4628      	mov	r0, r5
 80058fe:	47b8      	blx	r7
 8005900:	3001      	adds	r0, #1
 8005902:	f43f ae54 	beq.w	80055ae <_printf_float+0xb6>
 8005906:	f108 0801 	add.w	r8, r8, #1
 800590a:	45d0      	cmp	r8, sl
 800590c:	dbf3      	blt.n	80058f6 <_printf_float+0x3fe>
 800590e:	464b      	mov	r3, r9
 8005910:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005914:	e6e0      	b.n	80056d8 <_printf_float+0x1e0>
 8005916:	f04f 0800 	mov.w	r8, #0
 800591a:	f104 0b1a 	add.w	fp, r4, #26
 800591e:	e7f4      	b.n	800590a <_printf_float+0x412>
 8005920:	2301      	movs	r3, #1
 8005922:	4642      	mov	r2, r8
 8005924:	e7e1      	b.n	80058ea <_printf_float+0x3f2>
 8005926:	2301      	movs	r3, #1
 8005928:	464a      	mov	r2, r9
 800592a:	4631      	mov	r1, r6
 800592c:	4628      	mov	r0, r5
 800592e:	47b8      	blx	r7
 8005930:	3001      	adds	r0, #1
 8005932:	f43f ae3c 	beq.w	80055ae <_printf_float+0xb6>
 8005936:	f108 0801 	add.w	r8, r8, #1
 800593a:	68e3      	ldr	r3, [r4, #12]
 800593c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800593e:	1a5b      	subs	r3, r3, r1
 8005940:	4543      	cmp	r3, r8
 8005942:	dcf0      	bgt.n	8005926 <_printf_float+0x42e>
 8005944:	e6fd      	b.n	8005742 <_printf_float+0x24a>
 8005946:	f04f 0800 	mov.w	r8, #0
 800594a:	f104 0919 	add.w	r9, r4, #25
 800594e:	e7f4      	b.n	800593a <_printf_float+0x442>

08005950 <_printf_common>:
 8005950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005954:	4616      	mov	r6, r2
 8005956:	4698      	mov	r8, r3
 8005958:	688a      	ldr	r2, [r1, #8]
 800595a:	690b      	ldr	r3, [r1, #16]
 800595c:	4607      	mov	r7, r0
 800595e:	4293      	cmp	r3, r2
 8005960:	bfb8      	it	lt
 8005962:	4613      	movlt	r3, r2
 8005964:	6033      	str	r3, [r6, #0]
 8005966:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800596a:	460c      	mov	r4, r1
 800596c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005970:	b10a      	cbz	r2, 8005976 <_printf_common+0x26>
 8005972:	3301      	adds	r3, #1
 8005974:	6033      	str	r3, [r6, #0]
 8005976:	6823      	ldr	r3, [r4, #0]
 8005978:	0699      	lsls	r1, r3, #26
 800597a:	bf42      	ittt	mi
 800597c:	6833      	ldrmi	r3, [r6, #0]
 800597e:	3302      	addmi	r3, #2
 8005980:	6033      	strmi	r3, [r6, #0]
 8005982:	6825      	ldr	r5, [r4, #0]
 8005984:	f015 0506 	ands.w	r5, r5, #6
 8005988:	d106      	bne.n	8005998 <_printf_common+0x48>
 800598a:	f104 0a19 	add.w	sl, r4, #25
 800598e:	68e3      	ldr	r3, [r4, #12]
 8005990:	6832      	ldr	r2, [r6, #0]
 8005992:	1a9b      	subs	r3, r3, r2
 8005994:	42ab      	cmp	r3, r5
 8005996:	dc2b      	bgt.n	80059f0 <_printf_common+0xa0>
 8005998:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800599c:	6822      	ldr	r2, [r4, #0]
 800599e:	3b00      	subs	r3, #0
 80059a0:	bf18      	it	ne
 80059a2:	2301      	movne	r3, #1
 80059a4:	0692      	lsls	r2, r2, #26
 80059a6:	d430      	bmi.n	8005a0a <_printf_common+0xba>
 80059a8:	4641      	mov	r1, r8
 80059aa:	4638      	mov	r0, r7
 80059ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80059b0:	47c8      	blx	r9
 80059b2:	3001      	adds	r0, #1
 80059b4:	d023      	beq.n	80059fe <_printf_common+0xae>
 80059b6:	6823      	ldr	r3, [r4, #0]
 80059b8:	6922      	ldr	r2, [r4, #16]
 80059ba:	f003 0306 	and.w	r3, r3, #6
 80059be:	2b04      	cmp	r3, #4
 80059c0:	bf14      	ite	ne
 80059c2:	2500      	movne	r5, #0
 80059c4:	6833      	ldreq	r3, [r6, #0]
 80059c6:	f04f 0600 	mov.w	r6, #0
 80059ca:	bf08      	it	eq
 80059cc:	68e5      	ldreq	r5, [r4, #12]
 80059ce:	f104 041a 	add.w	r4, r4, #26
 80059d2:	bf08      	it	eq
 80059d4:	1aed      	subeq	r5, r5, r3
 80059d6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80059da:	bf08      	it	eq
 80059dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80059e0:	4293      	cmp	r3, r2
 80059e2:	bfc4      	itt	gt
 80059e4:	1a9b      	subgt	r3, r3, r2
 80059e6:	18ed      	addgt	r5, r5, r3
 80059e8:	42b5      	cmp	r5, r6
 80059ea:	d11a      	bne.n	8005a22 <_printf_common+0xd2>
 80059ec:	2000      	movs	r0, #0
 80059ee:	e008      	b.n	8005a02 <_printf_common+0xb2>
 80059f0:	2301      	movs	r3, #1
 80059f2:	4652      	mov	r2, sl
 80059f4:	4641      	mov	r1, r8
 80059f6:	4638      	mov	r0, r7
 80059f8:	47c8      	blx	r9
 80059fa:	3001      	adds	r0, #1
 80059fc:	d103      	bne.n	8005a06 <_printf_common+0xb6>
 80059fe:	f04f 30ff 	mov.w	r0, #4294967295
 8005a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a06:	3501      	adds	r5, #1
 8005a08:	e7c1      	b.n	800598e <_printf_common+0x3e>
 8005a0a:	2030      	movs	r0, #48	@ 0x30
 8005a0c:	18e1      	adds	r1, r4, r3
 8005a0e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005a12:	1c5a      	adds	r2, r3, #1
 8005a14:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005a18:	4422      	add	r2, r4
 8005a1a:	3302      	adds	r3, #2
 8005a1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005a20:	e7c2      	b.n	80059a8 <_printf_common+0x58>
 8005a22:	2301      	movs	r3, #1
 8005a24:	4622      	mov	r2, r4
 8005a26:	4641      	mov	r1, r8
 8005a28:	4638      	mov	r0, r7
 8005a2a:	47c8      	blx	r9
 8005a2c:	3001      	adds	r0, #1
 8005a2e:	d0e6      	beq.n	80059fe <_printf_common+0xae>
 8005a30:	3601      	adds	r6, #1
 8005a32:	e7d9      	b.n	80059e8 <_printf_common+0x98>

08005a34 <_printf_i>:
 8005a34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a38:	7e0f      	ldrb	r7, [r1, #24]
 8005a3a:	4691      	mov	r9, r2
 8005a3c:	2f78      	cmp	r7, #120	@ 0x78
 8005a3e:	4680      	mov	r8, r0
 8005a40:	460c      	mov	r4, r1
 8005a42:	469a      	mov	sl, r3
 8005a44:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005a46:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005a4a:	d807      	bhi.n	8005a5c <_printf_i+0x28>
 8005a4c:	2f62      	cmp	r7, #98	@ 0x62
 8005a4e:	d80a      	bhi.n	8005a66 <_printf_i+0x32>
 8005a50:	2f00      	cmp	r7, #0
 8005a52:	f000 80d1 	beq.w	8005bf8 <_printf_i+0x1c4>
 8005a56:	2f58      	cmp	r7, #88	@ 0x58
 8005a58:	f000 80b8 	beq.w	8005bcc <_printf_i+0x198>
 8005a5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a60:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005a64:	e03a      	b.n	8005adc <_printf_i+0xa8>
 8005a66:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005a6a:	2b15      	cmp	r3, #21
 8005a6c:	d8f6      	bhi.n	8005a5c <_printf_i+0x28>
 8005a6e:	a101      	add	r1, pc, #4	@ (adr r1, 8005a74 <_printf_i+0x40>)
 8005a70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a74:	08005acd 	.word	0x08005acd
 8005a78:	08005ae1 	.word	0x08005ae1
 8005a7c:	08005a5d 	.word	0x08005a5d
 8005a80:	08005a5d 	.word	0x08005a5d
 8005a84:	08005a5d 	.word	0x08005a5d
 8005a88:	08005a5d 	.word	0x08005a5d
 8005a8c:	08005ae1 	.word	0x08005ae1
 8005a90:	08005a5d 	.word	0x08005a5d
 8005a94:	08005a5d 	.word	0x08005a5d
 8005a98:	08005a5d 	.word	0x08005a5d
 8005a9c:	08005a5d 	.word	0x08005a5d
 8005aa0:	08005bdf 	.word	0x08005bdf
 8005aa4:	08005b0b 	.word	0x08005b0b
 8005aa8:	08005b99 	.word	0x08005b99
 8005aac:	08005a5d 	.word	0x08005a5d
 8005ab0:	08005a5d 	.word	0x08005a5d
 8005ab4:	08005c01 	.word	0x08005c01
 8005ab8:	08005a5d 	.word	0x08005a5d
 8005abc:	08005b0b 	.word	0x08005b0b
 8005ac0:	08005a5d 	.word	0x08005a5d
 8005ac4:	08005a5d 	.word	0x08005a5d
 8005ac8:	08005ba1 	.word	0x08005ba1
 8005acc:	6833      	ldr	r3, [r6, #0]
 8005ace:	1d1a      	adds	r2, r3, #4
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	6032      	str	r2, [r6, #0]
 8005ad4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ad8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005adc:	2301      	movs	r3, #1
 8005ade:	e09c      	b.n	8005c1a <_printf_i+0x1e6>
 8005ae0:	6833      	ldr	r3, [r6, #0]
 8005ae2:	6820      	ldr	r0, [r4, #0]
 8005ae4:	1d19      	adds	r1, r3, #4
 8005ae6:	6031      	str	r1, [r6, #0]
 8005ae8:	0606      	lsls	r6, r0, #24
 8005aea:	d501      	bpl.n	8005af0 <_printf_i+0xbc>
 8005aec:	681d      	ldr	r5, [r3, #0]
 8005aee:	e003      	b.n	8005af8 <_printf_i+0xc4>
 8005af0:	0645      	lsls	r5, r0, #25
 8005af2:	d5fb      	bpl.n	8005aec <_printf_i+0xb8>
 8005af4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005af8:	2d00      	cmp	r5, #0
 8005afa:	da03      	bge.n	8005b04 <_printf_i+0xd0>
 8005afc:	232d      	movs	r3, #45	@ 0x2d
 8005afe:	426d      	negs	r5, r5
 8005b00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b04:	230a      	movs	r3, #10
 8005b06:	4858      	ldr	r0, [pc, #352]	@ (8005c68 <_printf_i+0x234>)
 8005b08:	e011      	b.n	8005b2e <_printf_i+0xfa>
 8005b0a:	6821      	ldr	r1, [r4, #0]
 8005b0c:	6833      	ldr	r3, [r6, #0]
 8005b0e:	0608      	lsls	r0, r1, #24
 8005b10:	f853 5b04 	ldr.w	r5, [r3], #4
 8005b14:	d402      	bmi.n	8005b1c <_printf_i+0xe8>
 8005b16:	0649      	lsls	r1, r1, #25
 8005b18:	bf48      	it	mi
 8005b1a:	b2ad      	uxthmi	r5, r5
 8005b1c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005b1e:	6033      	str	r3, [r6, #0]
 8005b20:	bf14      	ite	ne
 8005b22:	230a      	movne	r3, #10
 8005b24:	2308      	moveq	r3, #8
 8005b26:	4850      	ldr	r0, [pc, #320]	@ (8005c68 <_printf_i+0x234>)
 8005b28:	2100      	movs	r1, #0
 8005b2a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005b2e:	6866      	ldr	r6, [r4, #4]
 8005b30:	2e00      	cmp	r6, #0
 8005b32:	60a6      	str	r6, [r4, #8]
 8005b34:	db05      	blt.n	8005b42 <_printf_i+0x10e>
 8005b36:	6821      	ldr	r1, [r4, #0]
 8005b38:	432e      	orrs	r6, r5
 8005b3a:	f021 0104 	bic.w	r1, r1, #4
 8005b3e:	6021      	str	r1, [r4, #0]
 8005b40:	d04b      	beq.n	8005bda <_printf_i+0x1a6>
 8005b42:	4616      	mov	r6, r2
 8005b44:	fbb5 f1f3 	udiv	r1, r5, r3
 8005b48:	fb03 5711 	mls	r7, r3, r1, r5
 8005b4c:	5dc7      	ldrb	r7, [r0, r7]
 8005b4e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005b52:	462f      	mov	r7, r5
 8005b54:	42bb      	cmp	r3, r7
 8005b56:	460d      	mov	r5, r1
 8005b58:	d9f4      	bls.n	8005b44 <_printf_i+0x110>
 8005b5a:	2b08      	cmp	r3, #8
 8005b5c:	d10b      	bne.n	8005b76 <_printf_i+0x142>
 8005b5e:	6823      	ldr	r3, [r4, #0]
 8005b60:	07df      	lsls	r7, r3, #31
 8005b62:	d508      	bpl.n	8005b76 <_printf_i+0x142>
 8005b64:	6923      	ldr	r3, [r4, #16]
 8005b66:	6861      	ldr	r1, [r4, #4]
 8005b68:	4299      	cmp	r1, r3
 8005b6a:	bfde      	ittt	le
 8005b6c:	2330      	movle	r3, #48	@ 0x30
 8005b6e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005b72:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005b76:	1b92      	subs	r2, r2, r6
 8005b78:	6122      	str	r2, [r4, #16]
 8005b7a:	464b      	mov	r3, r9
 8005b7c:	4621      	mov	r1, r4
 8005b7e:	4640      	mov	r0, r8
 8005b80:	f8cd a000 	str.w	sl, [sp]
 8005b84:	aa03      	add	r2, sp, #12
 8005b86:	f7ff fee3 	bl	8005950 <_printf_common>
 8005b8a:	3001      	adds	r0, #1
 8005b8c:	d14a      	bne.n	8005c24 <_printf_i+0x1f0>
 8005b8e:	f04f 30ff 	mov.w	r0, #4294967295
 8005b92:	b004      	add	sp, #16
 8005b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b98:	6823      	ldr	r3, [r4, #0]
 8005b9a:	f043 0320 	orr.w	r3, r3, #32
 8005b9e:	6023      	str	r3, [r4, #0]
 8005ba0:	2778      	movs	r7, #120	@ 0x78
 8005ba2:	4832      	ldr	r0, [pc, #200]	@ (8005c6c <_printf_i+0x238>)
 8005ba4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005ba8:	6823      	ldr	r3, [r4, #0]
 8005baa:	6831      	ldr	r1, [r6, #0]
 8005bac:	061f      	lsls	r7, r3, #24
 8005bae:	f851 5b04 	ldr.w	r5, [r1], #4
 8005bb2:	d402      	bmi.n	8005bba <_printf_i+0x186>
 8005bb4:	065f      	lsls	r7, r3, #25
 8005bb6:	bf48      	it	mi
 8005bb8:	b2ad      	uxthmi	r5, r5
 8005bba:	6031      	str	r1, [r6, #0]
 8005bbc:	07d9      	lsls	r1, r3, #31
 8005bbe:	bf44      	itt	mi
 8005bc0:	f043 0320 	orrmi.w	r3, r3, #32
 8005bc4:	6023      	strmi	r3, [r4, #0]
 8005bc6:	b11d      	cbz	r5, 8005bd0 <_printf_i+0x19c>
 8005bc8:	2310      	movs	r3, #16
 8005bca:	e7ad      	b.n	8005b28 <_printf_i+0xf4>
 8005bcc:	4826      	ldr	r0, [pc, #152]	@ (8005c68 <_printf_i+0x234>)
 8005bce:	e7e9      	b.n	8005ba4 <_printf_i+0x170>
 8005bd0:	6823      	ldr	r3, [r4, #0]
 8005bd2:	f023 0320 	bic.w	r3, r3, #32
 8005bd6:	6023      	str	r3, [r4, #0]
 8005bd8:	e7f6      	b.n	8005bc8 <_printf_i+0x194>
 8005bda:	4616      	mov	r6, r2
 8005bdc:	e7bd      	b.n	8005b5a <_printf_i+0x126>
 8005bde:	6833      	ldr	r3, [r6, #0]
 8005be0:	6825      	ldr	r5, [r4, #0]
 8005be2:	1d18      	adds	r0, r3, #4
 8005be4:	6961      	ldr	r1, [r4, #20]
 8005be6:	6030      	str	r0, [r6, #0]
 8005be8:	062e      	lsls	r6, r5, #24
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	d501      	bpl.n	8005bf2 <_printf_i+0x1be>
 8005bee:	6019      	str	r1, [r3, #0]
 8005bf0:	e002      	b.n	8005bf8 <_printf_i+0x1c4>
 8005bf2:	0668      	lsls	r0, r5, #25
 8005bf4:	d5fb      	bpl.n	8005bee <_printf_i+0x1ba>
 8005bf6:	8019      	strh	r1, [r3, #0]
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	4616      	mov	r6, r2
 8005bfc:	6123      	str	r3, [r4, #16]
 8005bfe:	e7bc      	b.n	8005b7a <_printf_i+0x146>
 8005c00:	6833      	ldr	r3, [r6, #0]
 8005c02:	2100      	movs	r1, #0
 8005c04:	1d1a      	adds	r2, r3, #4
 8005c06:	6032      	str	r2, [r6, #0]
 8005c08:	681e      	ldr	r6, [r3, #0]
 8005c0a:	6862      	ldr	r2, [r4, #4]
 8005c0c:	4630      	mov	r0, r6
 8005c0e:	f000 f9b4 	bl	8005f7a <memchr>
 8005c12:	b108      	cbz	r0, 8005c18 <_printf_i+0x1e4>
 8005c14:	1b80      	subs	r0, r0, r6
 8005c16:	6060      	str	r0, [r4, #4]
 8005c18:	6863      	ldr	r3, [r4, #4]
 8005c1a:	6123      	str	r3, [r4, #16]
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c22:	e7aa      	b.n	8005b7a <_printf_i+0x146>
 8005c24:	4632      	mov	r2, r6
 8005c26:	4649      	mov	r1, r9
 8005c28:	4640      	mov	r0, r8
 8005c2a:	6923      	ldr	r3, [r4, #16]
 8005c2c:	47d0      	blx	sl
 8005c2e:	3001      	adds	r0, #1
 8005c30:	d0ad      	beq.n	8005b8e <_printf_i+0x15a>
 8005c32:	6823      	ldr	r3, [r4, #0]
 8005c34:	079b      	lsls	r3, r3, #30
 8005c36:	d413      	bmi.n	8005c60 <_printf_i+0x22c>
 8005c38:	68e0      	ldr	r0, [r4, #12]
 8005c3a:	9b03      	ldr	r3, [sp, #12]
 8005c3c:	4298      	cmp	r0, r3
 8005c3e:	bfb8      	it	lt
 8005c40:	4618      	movlt	r0, r3
 8005c42:	e7a6      	b.n	8005b92 <_printf_i+0x15e>
 8005c44:	2301      	movs	r3, #1
 8005c46:	4632      	mov	r2, r6
 8005c48:	4649      	mov	r1, r9
 8005c4a:	4640      	mov	r0, r8
 8005c4c:	47d0      	blx	sl
 8005c4e:	3001      	adds	r0, #1
 8005c50:	d09d      	beq.n	8005b8e <_printf_i+0x15a>
 8005c52:	3501      	adds	r5, #1
 8005c54:	68e3      	ldr	r3, [r4, #12]
 8005c56:	9903      	ldr	r1, [sp, #12]
 8005c58:	1a5b      	subs	r3, r3, r1
 8005c5a:	42ab      	cmp	r3, r5
 8005c5c:	dcf2      	bgt.n	8005c44 <_printf_i+0x210>
 8005c5e:	e7eb      	b.n	8005c38 <_printf_i+0x204>
 8005c60:	2500      	movs	r5, #0
 8005c62:	f104 0619 	add.w	r6, r4, #25
 8005c66:	e7f5      	b.n	8005c54 <_printf_i+0x220>
 8005c68:	08007ebc 	.word	0x08007ebc
 8005c6c:	08007ecd 	.word	0x08007ecd

08005c70 <std>:
 8005c70:	2300      	movs	r3, #0
 8005c72:	b510      	push	{r4, lr}
 8005c74:	4604      	mov	r4, r0
 8005c76:	e9c0 3300 	strd	r3, r3, [r0]
 8005c7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005c7e:	6083      	str	r3, [r0, #8]
 8005c80:	8181      	strh	r1, [r0, #12]
 8005c82:	6643      	str	r3, [r0, #100]	@ 0x64
 8005c84:	81c2      	strh	r2, [r0, #14]
 8005c86:	6183      	str	r3, [r0, #24]
 8005c88:	4619      	mov	r1, r3
 8005c8a:	2208      	movs	r2, #8
 8005c8c:	305c      	adds	r0, #92	@ 0x5c
 8005c8e:	f000 f8f4 	bl	8005e7a <memset>
 8005c92:	4b0d      	ldr	r3, [pc, #52]	@ (8005cc8 <std+0x58>)
 8005c94:	6224      	str	r4, [r4, #32]
 8005c96:	6263      	str	r3, [r4, #36]	@ 0x24
 8005c98:	4b0c      	ldr	r3, [pc, #48]	@ (8005ccc <std+0x5c>)
 8005c9a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005c9c:	4b0c      	ldr	r3, [pc, #48]	@ (8005cd0 <std+0x60>)
 8005c9e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8005cd4 <std+0x64>)
 8005ca2:	6323      	str	r3, [r4, #48]	@ 0x30
 8005ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8005cd8 <std+0x68>)
 8005ca6:	429c      	cmp	r4, r3
 8005ca8:	d006      	beq.n	8005cb8 <std+0x48>
 8005caa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005cae:	4294      	cmp	r4, r2
 8005cb0:	d002      	beq.n	8005cb8 <std+0x48>
 8005cb2:	33d0      	adds	r3, #208	@ 0xd0
 8005cb4:	429c      	cmp	r4, r3
 8005cb6:	d105      	bne.n	8005cc4 <std+0x54>
 8005cb8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005cbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cc0:	f000 b958 	b.w	8005f74 <__retarget_lock_init_recursive>
 8005cc4:	bd10      	pop	{r4, pc}
 8005cc6:	bf00      	nop
 8005cc8:	08005df5 	.word	0x08005df5
 8005ccc:	08005e17 	.word	0x08005e17
 8005cd0:	08005e4f 	.word	0x08005e4f
 8005cd4:	08005e73 	.word	0x08005e73
 8005cd8:	20000454 	.word	0x20000454

08005cdc <stdio_exit_handler>:
 8005cdc:	4a02      	ldr	r2, [pc, #8]	@ (8005ce8 <stdio_exit_handler+0xc>)
 8005cde:	4903      	ldr	r1, [pc, #12]	@ (8005cec <stdio_exit_handler+0x10>)
 8005ce0:	4803      	ldr	r0, [pc, #12]	@ (8005cf0 <stdio_exit_handler+0x14>)
 8005ce2:	f000 b869 	b.w	8005db8 <_fwalk_sglue>
 8005ce6:	bf00      	nop
 8005ce8:	2000001c 	.word	0x2000001c
 8005cec:	08007641 	.word	0x08007641
 8005cf0:	2000002c 	.word	0x2000002c

08005cf4 <cleanup_stdio>:
 8005cf4:	6841      	ldr	r1, [r0, #4]
 8005cf6:	4b0c      	ldr	r3, [pc, #48]	@ (8005d28 <cleanup_stdio+0x34>)
 8005cf8:	b510      	push	{r4, lr}
 8005cfa:	4299      	cmp	r1, r3
 8005cfc:	4604      	mov	r4, r0
 8005cfe:	d001      	beq.n	8005d04 <cleanup_stdio+0x10>
 8005d00:	f001 fc9e 	bl	8007640 <_fflush_r>
 8005d04:	68a1      	ldr	r1, [r4, #8]
 8005d06:	4b09      	ldr	r3, [pc, #36]	@ (8005d2c <cleanup_stdio+0x38>)
 8005d08:	4299      	cmp	r1, r3
 8005d0a:	d002      	beq.n	8005d12 <cleanup_stdio+0x1e>
 8005d0c:	4620      	mov	r0, r4
 8005d0e:	f001 fc97 	bl	8007640 <_fflush_r>
 8005d12:	68e1      	ldr	r1, [r4, #12]
 8005d14:	4b06      	ldr	r3, [pc, #24]	@ (8005d30 <cleanup_stdio+0x3c>)
 8005d16:	4299      	cmp	r1, r3
 8005d18:	d004      	beq.n	8005d24 <cleanup_stdio+0x30>
 8005d1a:	4620      	mov	r0, r4
 8005d1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d20:	f001 bc8e 	b.w	8007640 <_fflush_r>
 8005d24:	bd10      	pop	{r4, pc}
 8005d26:	bf00      	nop
 8005d28:	20000454 	.word	0x20000454
 8005d2c:	200004bc 	.word	0x200004bc
 8005d30:	20000524 	.word	0x20000524

08005d34 <global_stdio_init.part.0>:
 8005d34:	b510      	push	{r4, lr}
 8005d36:	4b0b      	ldr	r3, [pc, #44]	@ (8005d64 <global_stdio_init.part.0+0x30>)
 8005d38:	4c0b      	ldr	r4, [pc, #44]	@ (8005d68 <global_stdio_init.part.0+0x34>)
 8005d3a:	4a0c      	ldr	r2, [pc, #48]	@ (8005d6c <global_stdio_init.part.0+0x38>)
 8005d3c:	4620      	mov	r0, r4
 8005d3e:	601a      	str	r2, [r3, #0]
 8005d40:	2104      	movs	r1, #4
 8005d42:	2200      	movs	r2, #0
 8005d44:	f7ff ff94 	bl	8005c70 <std>
 8005d48:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	2109      	movs	r1, #9
 8005d50:	f7ff ff8e 	bl	8005c70 <std>
 8005d54:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005d58:	2202      	movs	r2, #2
 8005d5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d5e:	2112      	movs	r1, #18
 8005d60:	f7ff bf86 	b.w	8005c70 <std>
 8005d64:	2000058c 	.word	0x2000058c
 8005d68:	20000454 	.word	0x20000454
 8005d6c:	08005cdd 	.word	0x08005cdd

08005d70 <__sfp_lock_acquire>:
 8005d70:	4801      	ldr	r0, [pc, #4]	@ (8005d78 <__sfp_lock_acquire+0x8>)
 8005d72:	f000 b900 	b.w	8005f76 <__retarget_lock_acquire_recursive>
 8005d76:	bf00      	nop
 8005d78:	20000595 	.word	0x20000595

08005d7c <__sfp_lock_release>:
 8005d7c:	4801      	ldr	r0, [pc, #4]	@ (8005d84 <__sfp_lock_release+0x8>)
 8005d7e:	f000 b8fb 	b.w	8005f78 <__retarget_lock_release_recursive>
 8005d82:	bf00      	nop
 8005d84:	20000595 	.word	0x20000595

08005d88 <__sinit>:
 8005d88:	b510      	push	{r4, lr}
 8005d8a:	4604      	mov	r4, r0
 8005d8c:	f7ff fff0 	bl	8005d70 <__sfp_lock_acquire>
 8005d90:	6a23      	ldr	r3, [r4, #32]
 8005d92:	b11b      	cbz	r3, 8005d9c <__sinit+0x14>
 8005d94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d98:	f7ff bff0 	b.w	8005d7c <__sfp_lock_release>
 8005d9c:	4b04      	ldr	r3, [pc, #16]	@ (8005db0 <__sinit+0x28>)
 8005d9e:	6223      	str	r3, [r4, #32]
 8005da0:	4b04      	ldr	r3, [pc, #16]	@ (8005db4 <__sinit+0x2c>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d1f5      	bne.n	8005d94 <__sinit+0xc>
 8005da8:	f7ff ffc4 	bl	8005d34 <global_stdio_init.part.0>
 8005dac:	e7f2      	b.n	8005d94 <__sinit+0xc>
 8005dae:	bf00      	nop
 8005db0:	08005cf5 	.word	0x08005cf5
 8005db4:	2000058c 	.word	0x2000058c

08005db8 <_fwalk_sglue>:
 8005db8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005dbc:	4607      	mov	r7, r0
 8005dbe:	4688      	mov	r8, r1
 8005dc0:	4614      	mov	r4, r2
 8005dc2:	2600      	movs	r6, #0
 8005dc4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005dc8:	f1b9 0901 	subs.w	r9, r9, #1
 8005dcc:	d505      	bpl.n	8005dda <_fwalk_sglue+0x22>
 8005dce:	6824      	ldr	r4, [r4, #0]
 8005dd0:	2c00      	cmp	r4, #0
 8005dd2:	d1f7      	bne.n	8005dc4 <_fwalk_sglue+0xc>
 8005dd4:	4630      	mov	r0, r6
 8005dd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005dda:	89ab      	ldrh	r3, [r5, #12]
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d907      	bls.n	8005df0 <_fwalk_sglue+0x38>
 8005de0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005de4:	3301      	adds	r3, #1
 8005de6:	d003      	beq.n	8005df0 <_fwalk_sglue+0x38>
 8005de8:	4629      	mov	r1, r5
 8005dea:	4638      	mov	r0, r7
 8005dec:	47c0      	blx	r8
 8005dee:	4306      	orrs	r6, r0
 8005df0:	3568      	adds	r5, #104	@ 0x68
 8005df2:	e7e9      	b.n	8005dc8 <_fwalk_sglue+0x10>

08005df4 <__sread>:
 8005df4:	b510      	push	{r4, lr}
 8005df6:	460c      	mov	r4, r1
 8005df8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dfc:	f000 f86c 	bl	8005ed8 <_read_r>
 8005e00:	2800      	cmp	r0, #0
 8005e02:	bfab      	itete	ge
 8005e04:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005e06:	89a3      	ldrhlt	r3, [r4, #12]
 8005e08:	181b      	addge	r3, r3, r0
 8005e0a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005e0e:	bfac      	ite	ge
 8005e10:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005e12:	81a3      	strhlt	r3, [r4, #12]
 8005e14:	bd10      	pop	{r4, pc}

08005e16 <__swrite>:
 8005e16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e1a:	461f      	mov	r7, r3
 8005e1c:	898b      	ldrh	r3, [r1, #12]
 8005e1e:	4605      	mov	r5, r0
 8005e20:	05db      	lsls	r3, r3, #23
 8005e22:	460c      	mov	r4, r1
 8005e24:	4616      	mov	r6, r2
 8005e26:	d505      	bpl.n	8005e34 <__swrite+0x1e>
 8005e28:	2302      	movs	r3, #2
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e30:	f000 f840 	bl	8005eb4 <_lseek_r>
 8005e34:	89a3      	ldrh	r3, [r4, #12]
 8005e36:	4632      	mov	r2, r6
 8005e38:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e3c:	81a3      	strh	r3, [r4, #12]
 8005e3e:	4628      	mov	r0, r5
 8005e40:	463b      	mov	r3, r7
 8005e42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e4a:	f000 b857 	b.w	8005efc <_write_r>

08005e4e <__sseek>:
 8005e4e:	b510      	push	{r4, lr}
 8005e50:	460c      	mov	r4, r1
 8005e52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e56:	f000 f82d 	bl	8005eb4 <_lseek_r>
 8005e5a:	1c43      	adds	r3, r0, #1
 8005e5c:	89a3      	ldrh	r3, [r4, #12]
 8005e5e:	bf15      	itete	ne
 8005e60:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005e62:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005e66:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005e6a:	81a3      	strheq	r3, [r4, #12]
 8005e6c:	bf18      	it	ne
 8005e6e:	81a3      	strhne	r3, [r4, #12]
 8005e70:	bd10      	pop	{r4, pc}

08005e72 <__sclose>:
 8005e72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e76:	f000 b80d 	b.w	8005e94 <_close_r>

08005e7a <memset>:
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	4402      	add	r2, r0
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d100      	bne.n	8005e84 <memset+0xa>
 8005e82:	4770      	bx	lr
 8005e84:	f803 1b01 	strb.w	r1, [r3], #1
 8005e88:	e7f9      	b.n	8005e7e <memset+0x4>
	...

08005e8c <_localeconv_r>:
 8005e8c:	4800      	ldr	r0, [pc, #0]	@ (8005e90 <_localeconv_r+0x4>)
 8005e8e:	4770      	bx	lr
 8005e90:	20000168 	.word	0x20000168

08005e94 <_close_r>:
 8005e94:	b538      	push	{r3, r4, r5, lr}
 8005e96:	2300      	movs	r3, #0
 8005e98:	4d05      	ldr	r5, [pc, #20]	@ (8005eb0 <_close_r+0x1c>)
 8005e9a:	4604      	mov	r4, r0
 8005e9c:	4608      	mov	r0, r1
 8005e9e:	602b      	str	r3, [r5, #0]
 8005ea0:	f7fb f96f 	bl	8001182 <_close>
 8005ea4:	1c43      	adds	r3, r0, #1
 8005ea6:	d102      	bne.n	8005eae <_close_r+0x1a>
 8005ea8:	682b      	ldr	r3, [r5, #0]
 8005eaa:	b103      	cbz	r3, 8005eae <_close_r+0x1a>
 8005eac:	6023      	str	r3, [r4, #0]
 8005eae:	bd38      	pop	{r3, r4, r5, pc}
 8005eb0:	20000590 	.word	0x20000590

08005eb4 <_lseek_r>:
 8005eb4:	b538      	push	{r3, r4, r5, lr}
 8005eb6:	4604      	mov	r4, r0
 8005eb8:	4608      	mov	r0, r1
 8005eba:	4611      	mov	r1, r2
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	4d05      	ldr	r5, [pc, #20]	@ (8005ed4 <_lseek_r+0x20>)
 8005ec0:	602a      	str	r2, [r5, #0]
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	f7fb f981 	bl	80011ca <_lseek>
 8005ec8:	1c43      	adds	r3, r0, #1
 8005eca:	d102      	bne.n	8005ed2 <_lseek_r+0x1e>
 8005ecc:	682b      	ldr	r3, [r5, #0]
 8005ece:	b103      	cbz	r3, 8005ed2 <_lseek_r+0x1e>
 8005ed0:	6023      	str	r3, [r4, #0]
 8005ed2:	bd38      	pop	{r3, r4, r5, pc}
 8005ed4:	20000590 	.word	0x20000590

08005ed8 <_read_r>:
 8005ed8:	b538      	push	{r3, r4, r5, lr}
 8005eda:	4604      	mov	r4, r0
 8005edc:	4608      	mov	r0, r1
 8005ede:	4611      	mov	r1, r2
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	4d05      	ldr	r5, [pc, #20]	@ (8005ef8 <_read_r+0x20>)
 8005ee4:	602a      	str	r2, [r5, #0]
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	f7fb f912 	bl	8001110 <_read>
 8005eec:	1c43      	adds	r3, r0, #1
 8005eee:	d102      	bne.n	8005ef6 <_read_r+0x1e>
 8005ef0:	682b      	ldr	r3, [r5, #0]
 8005ef2:	b103      	cbz	r3, 8005ef6 <_read_r+0x1e>
 8005ef4:	6023      	str	r3, [r4, #0]
 8005ef6:	bd38      	pop	{r3, r4, r5, pc}
 8005ef8:	20000590 	.word	0x20000590

08005efc <_write_r>:
 8005efc:	b538      	push	{r3, r4, r5, lr}
 8005efe:	4604      	mov	r4, r0
 8005f00:	4608      	mov	r0, r1
 8005f02:	4611      	mov	r1, r2
 8005f04:	2200      	movs	r2, #0
 8005f06:	4d05      	ldr	r5, [pc, #20]	@ (8005f1c <_write_r+0x20>)
 8005f08:	602a      	str	r2, [r5, #0]
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	f7fb f91d 	bl	800114a <_write>
 8005f10:	1c43      	adds	r3, r0, #1
 8005f12:	d102      	bne.n	8005f1a <_write_r+0x1e>
 8005f14:	682b      	ldr	r3, [r5, #0]
 8005f16:	b103      	cbz	r3, 8005f1a <_write_r+0x1e>
 8005f18:	6023      	str	r3, [r4, #0]
 8005f1a:	bd38      	pop	{r3, r4, r5, pc}
 8005f1c:	20000590 	.word	0x20000590

08005f20 <__errno>:
 8005f20:	4b01      	ldr	r3, [pc, #4]	@ (8005f28 <__errno+0x8>)
 8005f22:	6818      	ldr	r0, [r3, #0]
 8005f24:	4770      	bx	lr
 8005f26:	bf00      	nop
 8005f28:	20000028 	.word	0x20000028

08005f2c <__libc_init_array>:
 8005f2c:	b570      	push	{r4, r5, r6, lr}
 8005f2e:	2600      	movs	r6, #0
 8005f30:	4d0c      	ldr	r5, [pc, #48]	@ (8005f64 <__libc_init_array+0x38>)
 8005f32:	4c0d      	ldr	r4, [pc, #52]	@ (8005f68 <__libc_init_array+0x3c>)
 8005f34:	1b64      	subs	r4, r4, r5
 8005f36:	10a4      	asrs	r4, r4, #2
 8005f38:	42a6      	cmp	r6, r4
 8005f3a:	d109      	bne.n	8005f50 <__libc_init_array+0x24>
 8005f3c:	f001 fecc 	bl	8007cd8 <_init>
 8005f40:	2600      	movs	r6, #0
 8005f42:	4d0a      	ldr	r5, [pc, #40]	@ (8005f6c <__libc_init_array+0x40>)
 8005f44:	4c0a      	ldr	r4, [pc, #40]	@ (8005f70 <__libc_init_array+0x44>)
 8005f46:	1b64      	subs	r4, r4, r5
 8005f48:	10a4      	asrs	r4, r4, #2
 8005f4a:	42a6      	cmp	r6, r4
 8005f4c:	d105      	bne.n	8005f5a <__libc_init_array+0x2e>
 8005f4e:	bd70      	pop	{r4, r5, r6, pc}
 8005f50:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f54:	4798      	blx	r3
 8005f56:	3601      	adds	r6, #1
 8005f58:	e7ee      	b.n	8005f38 <__libc_init_array+0xc>
 8005f5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f5e:	4798      	blx	r3
 8005f60:	3601      	adds	r6, #1
 8005f62:	e7f2      	b.n	8005f4a <__libc_init_array+0x1e>
 8005f64:	08008224 	.word	0x08008224
 8005f68:	08008224 	.word	0x08008224
 8005f6c:	08008224 	.word	0x08008224
 8005f70:	08008228 	.word	0x08008228

08005f74 <__retarget_lock_init_recursive>:
 8005f74:	4770      	bx	lr

08005f76 <__retarget_lock_acquire_recursive>:
 8005f76:	4770      	bx	lr

08005f78 <__retarget_lock_release_recursive>:
 8005f78:	4770      	bx	lr

08005f7a <memchr>:
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	b510      	push	{r4, lr}
 8005f7e:	b2c9      	uxtb	r1, r1
 8005f80:	4402      	add	r2, r0
 8005f82:	4293      	cmp	r3, r2
 8005f84:	4618      	mov	r0, r3
 8005f86:	d101      	bne.n	8005f8c <memchr+0x12>
 8005f88:	2000      	movs	r0, #0
 8005f8a:	e003      	b.n	8005f94 <memchr+0x1a>
 8005f8c:	7804      	ldrb	r4, [r0, #0]
 8005f8e:	3301      	adds	r3, #1
 8005f90:	428c      	cmp	r4, r1
 8005f92:	d1f6      	bne.n	8005f82 <memchr+0x8>
 8005f94:	bd10      	pop	{r4, pc}

08005f96 <quorem>:
 8005f96:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f9a:	6903      	ldr	r3, [r0, #16]
 8005f9c:	690c      	ldr	r4, [r1, #16]
 8005f9e:	4607      	mov	r7, r0
 8005fa0:	42a3      	cmp	r3, r4
 8005fa2:	db7e      	blt.n	80060a2 <quorem+0x10c>
 8005fa4:	3c01      	subs	r4, #1
 8005fa6:	00a3      	lsls	r3, r4, #2
 8005fa8:	f100 0514 	add.w	r5, r0, #20
 8005fac:	f101 0814 	add.w	r8, r1, #20
 8005fb0:	9300      	str	r3, [sp, #0]
 8005fb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005fb6:	9301      	str	r3, [sp, #4]
 8005fb8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005fbc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	fbb2 f6f3 	udiv	r6, r2, r3
 8005fc8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005fcc:	d32e      	bcc.n	800602c <quorem+0x96>
 8005fce:	f04f 0a00 	mov.w	sl, #0
 8005fd2:	46c4      	mov	ip, r8
 8005fd4:	46ae      	mov	lr, r5
 8005fd6:	46d3      	mov	fp, sl
 8005fd8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005fdc:	b298      	uxth	r0, r3
 8005fde:	fb06 a000 	mla	r0, r6, r0, sl
 8005fe2:	0c1b      	lsrs	r3, r3, #16
 8005fe4:	0c02      	lsrs	r2, r0, #16
 8005fe6:	fb06 2303 	mla	r3, r6, r3, r2
 8005fea:	f8de 2000 	ldr.w	r2, [lr]
 8005fee:	b280      	uxth	r0, r0
 8005ff0:	b292      	uxth	r2, r2
 8005ff2:	1a12      	subs	r2, r2, r0
 8005ff4:	445a      	add	r2, fp
 8005ff6:	f8de 0000 	ldr.w	r0, [lr]
 8005ffa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006004:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006008:	b292      	uxth	r2, r2
 800600a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800600e:	45e1      	cmp	r9, ip
 8006010:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006014:	f84e 2b04 	str.w	r2, [lr], #4
 8006018:	d2de      	bcs.n	8005fd8 <quorem+0x42>
 800601a:	9b00      	ldr	r3, [sp, #0]
 800601c:	58eb      	ldr	r3, [r5, r3]
 800601e:	b92b      	cbnz	r3, 800602c <quorem+0x96>
 8006020:	9b01      	ldr	r3, [sp, #4]
 8006022:	3b04      	subs	r3, #4
 8006024:	429d      	cmp	r5, r3
 8006026:	461a      	mov	r2, r3
 8006028:	d32f      	bcc.n	800608a <quorem+0xf4>
 800602a:	613c      	str	r4, [r7, #16]
 800602c:	4638      	mov	r0, r7
 800602e:	f001 f97f 	bl	8007330 <__mcmp>
 8006032:	2800      	cmp	r0, #0
 8006034:	db25      	blt.n	8006082 <quorem+0xec>
 8006036:	4629      	mov	r1, r5
 8006038:	2000      	movs	r0, #0
 800603a:	f858 2b04 	ldr.w	r2, [r8], #4
 800603e:	f8d1 c000 	ldr.w	ip, [r1]
 8006042:	fa1f fe82 	uxth.w	lr, r2
 8006046:	fa1f f38c 	uxth.w	r3, ip
 800604a:	eba3 030e 	sub.w	r3, r3, lr
 800604e:	4403      	add	r3, r0
 8006050:	0c12      	lsrs	r2, r2, #16
 8006052:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006056:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800605a:	b29b      	uxth	r3, r3
 800605c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006060:	45c1      	cmp	r9, r8
 8006062:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006066:	f841 3b04 	str.w	r3, [r1], #4
 800606a:	d2e6      	bcs.n	800603a <quorem+0xa4>
 800606c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006070:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006074:	b922      	cbnz	r2, 8006080 <quorem+0xea>
 8006076:	3b04      	subs	r3, #4
 8006078:	429d      	cmp	r5, r3
 800607a:	461a      	mov	r2, r3
 800607c:	d30b      	bcc.n	8006096 <quorem+0x100>
 800607e:	613c      	str	r4, [r7, #16]
 8006080:	3601      	adds	r6, #1
 8006082:	4630      	mov	r0, r6
 8006084:	b003      	add	sp, #12
 8006086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800608a:	6812      	ldr	r2, [r2, #0]
 800608c:	3b04      	subs	r3, #4
 800608e:	2a00      	cmp	r2, #0
 8006090:	d1cb      	bne.n	800602a <quorem+0x94>
 8006092:	3c01      	subs	r4, #1
 8006094:	e7c6      	b.n	8006024 <quorem+0x8e>
 8006096:	6812      	ldr	r2, [r2, #0]
 8006098:	3b04      	subs	r3, #4
 800609a:	2a00      	cmp	r2, #0
 800609c:	d1ef      	bne.n	800607e <quorem+0xe8>
 800609e:	3c01      	subs	r4, #1
 80060a0:	e7ea      	b.n	8006078 <quorem+0xe2>
 80060a2:	2000      	movs	r0, #0
 80060a4:	e7ee      	b.n	8006084 <quorem+0xee>
	...

080060a8 <_dtoa_r>:
 80060a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060ac:	4614      	mov	r4, r2
 80060ae:	461d      	mov	r5, r3
 80060b0:	69c7      	ldr	r7, [r0, #28]
 80060b2:	b097      	sub	sp, #92	@ 0x5c
 80060b4:	4681      	mov	r9, r0
 80060b6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80060ba:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80060bc:	b97f      	cbnz	r7, 80060de <_dtoa_r+0x36>
 80060be:	2010      	movs	r0, #16
 80060c0:	f000 fe0e 	bl	8006ce0 <malloc>
 80060c4:	4602      	mov	r2, r0
 80060c6:	f8c9 001c 	str.w	r0, [r9, #28]
 80060ca:	b920      	cbnz	r0, 80060d6 <_dtoa_r+0x2e>
 80060cc:	21ef      	movs	r1, #239	@ 0xef
 80060ce:	4bac      	ldr	r3, [pc, #688]	@ (8006380 <_dtoa_r+0x2d8>)
 80060d0:	48ac      	ldr	r0, [pc, #688]	@ (8006384 <_dtoa_r+0x2dc>)
 80060d2:	f001 fafb 	bl	80076cc <__assert_func>
 80060d6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80060da:	6007      	str	r7, [r0, #0]
 80060dc:	60c7      	str	r7, [r0, #12]
 80060de:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80060e2:	6819      	ldr	r1, [r3, #0]
 80060e4:	b159      	cbz	r1, 80060fe <_dtoa_r+0x56>
 80060e6:	685a      	ldr	r2, [r3, #4]
 80060e8:	2301      	movs	r3, #1
 80060ea:	4093      	lsls	r3, r2
 80060ec:	604a      	str	r2, [r1, #4]
 80060ee:	608b      	str	r3, [r1, #8]
 80060f0:	4648      	mov	r0, r9
 80060f2:	f000 feeb 	bl	8006ecc <_Bfree>
 80060f6:	2200      	movs	r2, #0
 80060f8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80060fc:	601a      	str	r2, [r3, #0]
 80060fe:	1e2b      	subs	r3, r5, #0
 8006100:	bfaf      	iteee	ge
 8006102:	2300      	movge	r3, #0
 8006104:	2201      	movlt	r2, #1
 8006106:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800610a:	9307      	strlt	r3, [sp, #28]
 800610c:	bfa8      	it	ge
 800610e:	6033      	strge	r3, [r6, #0]
 8006110:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8006114:	4b9c      	ldr	r3, [pc, #624]	@ (8006388 <_dtoa_r+0x2e0>)
 8006116:	bfb8      	it	lt
 8006118:	6032      	strlt	r2, [r6, #0]
 800611a:	ea33 0308 	bics.w	r3, r3, r8
 800611e:	d112      	bne.n	8006146 <_dtoa_r+0x9e>
 8006120:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006124:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006126:	6013      	str	r3, [r2, #0]
 8006128:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800612c:	4323      	orrs	r3, r4
 800612e:	f000 855e 	beq.w	8006bee <_dtoa_r+0xb46>
 8006132:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006134:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800638c <_dtoa_r+0x2e4>
 8006138:	2b00      	cmp	r3, #0
 800613a:	f000 8560 	beq.w	8006bfe <_dtoa_r+0xb56>
 800613e:	f10a 0303 	add.w	r3, sl, #3
 8006142:	f000 bd5a 	b.w	8006bfa <_dtoa_r+0xb52>
 8006146:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800614a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800614e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006152:	2200      	movs	r2, #0
 8006154:	2300      	movs	r3, #0
 8006156:	f7fa fc27 	bl	80009a8 <__aeabi_dcmpeq>
 800615a:	4607      	mov	r7, r0
 800615c:	b158      	cbz	r0, 8006176 <_dtoa_r+0xce>
 800615e:	2301      	movs	r3, #1
 8006160:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006162:	6013      	str	r3, [r2, #0]
 8006164:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006166:	b113      	cbz	r3, 800616e <_dtoa_r+0xc6>
 8006168:	4b89      	ldr	r3, [pc, #548]	@ (8006390 <_dtoa_r+0x2e8>)
 800616a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800616c:	6013      	str	r3, [r2, #0]
 800616e:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8006394 <_dtoa_r+0x2ec>
 8006172:	f000 bd44 	b.w	8006bfe <_dtoa_r+0xb56>
 8006176:	ab14      	add	r3, sp, #80	@ 0x50
 8006178:	9301      	str	r3, [sp, #4]
 800617a:	ab15      	add	r3, sp, #84	@ 0x54
 800617c:	9300      	str	r3, [sp, #0]
 800617e:	4648      	mov	r0, r9
 8006180:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006184:	f001 f984 	bl	8007490 <__d2b>
 8006188:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800618c:	9003      	str	r0, [sp, #12]
 800618e:	2e00      	cmp	r6, #0
 8006190:	d078      	beq.n	8006284 <_dtoa_r+0x1dc>
 8006192:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006196:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006198:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800619c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80061a0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80061a4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80061a8:	9712      	str	r7, [sp, #72]	@ 0x48
 80061aa:	4619      	mov	r1, r3
 80061ac:	2200      	movs	r2, #0
 80061ae:	4b7a      	ldr	r3, [pc, #488]	@ (8006398 <_dtoa_r+0x2f0>)
 80061b0:	f7f9 ffda 	bl	8000168 <__aeabi_dsub>
 80061b4:	a36c      	add	r3, pc, #432	@ (adr r3, 8006368 <_dtoa_r+0x2c0>)
 80061b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ba:	f7fa f98d 	bl	80004d8 <__aeabi_dmul>
 80061be:	a36c      	add	r3, pc, #432	@ (adr r3, 8006370 <_dtoa_r+0x2c8>)
 80061c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c4:	f7f9 ffd2 	bl	800016c <__adddf3>
 80061c8:	4604      	mov	r4, r0
 80061ca:	4630      	mov	r0, r6
 80061cc:	460d      	mov	r5, r1
 80061ce:	f7fa f919 	bl	8000404 <__aeabi_i2d>
 80061d2:	a369      	add	r3, pc, #420	@ (adr r3, 8006378 <_dtoa_r+0x2d0>)
 80061d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d8:	f7fa f97e 	bl	80004d8 <__aeabi_dmul>
 80061dc:	4602      	mov	r2, r0
 80061de:	460b      	mov	r3, r1
 80061e0:	4620      	mov	r0, r4
 80061e2:	4629      	mov	r1, r5
 80061e4:	f7f9 ffc2 	bl	800016c <__adddf3>
 80061e8:	4604      	mov	r4, r0
 80061ea:	460d      	mov	r5, r1
 80061ec:	f7fa fc24 	bl	8000a38 <__aeabi_d2iz>
 80061f0:	2200      	movs	r2, #0
 80061f2:	4607      	mov	r7, r0
 80061f4:	2300      	movs	r3, #0
 80061f6:	4620      	mov	r0, r4
 80061f8:	4629      	mov	r1, r5
 80061fa:	f7fa fbdf 	bl	80009bc <__aeabi_dcmplt>
 80061fe:	b140      	cbz	r0, 8006212 <_dtoa_r+0x16a>
 8006200:	4638      	mov	r0, r7
 8006202:	f7fa f8ff 	bl	8000404 <__aeabi_i2d>
 8006206:	4622      	mov	r2, r4
 8006208:	462b      	mov	r3, r5
 800620a:	f7fa fbcd 	bl	80009a8 <__aeabi_dcmpeq>
 800620e:	b900      	cbnz	r0, 8006212 <_dtoa_r+0x16a>
 8006210:	3f01      	subs	r7, #1
 8006212:	2f16      	cmp	r7, #22
 8006214:	d854      	bhi.n	80062c0 <_dtoa_r+0x218>
 8006216:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800621a:	4b60      	ldr	r3, [pc, #384]	@ (800639c <_dtoa_r+0x2f4>)
 800621c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006224:	f7fa fbca 	bl	80009bc <__aeabi_dcmplt>
 8006228:	2800      	cmp	r0, #0
 800622a:	d04b      	beq.n	80062c4 <_dtoa_r+0x21c>
 800622c:	2300      	movs	r3, #0
 800622e:	3f01      	subs	r7, #1
 8006230:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006232:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006234:	1b9b      	subs	r3, r3, r6
 8006236:	1e5a      	subs	r2, r3, #1
 8006238:	bf49      	itett	mi
 800623a:	f1c3 0301 	rsbmi	r3, r3, #1
 800623e:	2300      	movpl	r3, #0
 8006240:	9304      	strmi	r3, [sp, #16]
 8006242:	2300      	movmi	r3, #0
 8006244:	9209      	str	r2, [sp, #36]	@ 0x24
 8006246:	bf54      	ite	pl
 8006248:	9304      	strpl	r3, [sp, #16]
 800624a:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800624c:	2f00      	cmp	r7, #0
 800624e:	db3b      	blt.n	80062c8 <_dtoa_r+0x220>
 8006250:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006252:	970e      	str	r7, [sp, #56]	@ 0x38
 8006254:	443b      	add	r3, r7
 8006256:	9309      	str	r3, [sp, #36]	@ 0x24
 8006258:	2300      	movs	r3, #0
 800625a:	930a      	str	r3, [sp, #40]	@ 0x28
 800625c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800625e:	2b09      	cmp	r3, #9
 8006260:	d865      	bhi.n	800632e <_dtoa_r+0x286>
 8006262:	2b05      	cmp	r3, #5
 8006264:	bfc4      	itt	gt
 8006266:	3b04      	subgt	r3, #4
 8006268:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800626a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800626c:	bfc8      	it	gt
 800626e:	2400      	movgt	r4, #0
 8006270:	f1a3 0302 	sub.w	r3, r3, #2
 8006274:	bfd8      	it	le
 8006276:	2401      	movle	r4, #1
 8006278:	2b03      	cmp	r3, #3
 800627a:	d864      	bhi.n	8006346 <_dtoa_r+0x29e>
 800627c:	e8df f003 	tbb	[pc, r3]
 8006280:	2c385553 	.word	0x2c385553
 8006284:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006288:	441e      	add	r6, r3
 800628a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800628e:	2b20      	cmp	r3, #32
 8006290:	bfc1      	itttt	gt
 8006292:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006296:	fa08 f803 	lslgt.w	r8, r8, r3
 800629a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800629e:	fa24 f303 	lsrgt.w	r3, r4, r3
 80062a2:	bfd6      	itet	le
 80062a4:	f1c3 0320 	rsble	r3, r3, #32
 80062a8:	ea48 0003 	orrgt.w	r0, r8, r3
 80062ac:	fa04 f003 	lslle.w	r0, r4, r3
 80062b0:	f7fa f898 	bl	80003e4 <__aeabi_ui2d>
 80062b4:	2201      	movs	r2, #1
 80062b6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80062ba:	3e01      	subs	r6, #1
 80062bc:	9212      	str	r2, [sp, #72]	@ 0x48
 80062be:	e774      	b.n	80061aa <_dtoa_r+0x102>
 80062c0:	2301      	movs	r3, #1
 80062c2:	e7b5      	b.n	8006230 <_dtoa_r+0x188>
 80062c4:	900f      	str	r0, [sp, #60]	@ 0x3c
 80062c6:	e7b4      	b.n	8006232 <_dtoa_r+0x18a>
 80062c8:	9b04      	ldr	r3, [sp, #16]
 80062ca:	1bdb      	subs	r3, r3, r7
 80062cc:	9304      	str	r3, [sp, #16]
 80062ce:	427b      	negs	r3, r7
 80062d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80062d2:	2300      	movs	r3, #0
 80062d4:	930e      	str	r3, [sp, #56]	@ 0x38
 80062d6:	e7c1      	b.n	800625c <_dtoa_r+0x1b4>
 80062d8:	2301      	movs	r3, #1
 80062da:	930b      	str	r3, [sp, #44]	@ 0x2c
 80062dc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80062de:	eb07 0b03 	add.w	fp, r7, r3
 80062e2:	f10b 0301 	add.w	r3, fp, #1
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	9308      	str	r3, [sp, #32]
 80062ea:	bfb8      	it	lt
 80062ec:	2301      	movlt	r3, #1
 80062ee:	e006      	b.n	80062fe <_dtoa_r+0x256>
 80062f0:	2301      	movs	r3, #1
 80062f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80062f4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	dd28      	ble.n	800634c <_dtoa_r+0x2a4>
 80062fa:	469b      	mov	fp, r3
 80062fc:	9308      	str	r3, [sp, #32]
 80062fe:	2100      	movs	r1, #0
 8006300:	2204      	movs	r2, #4
 8006302:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8006306:	f102 0514 	add.w	r5, r2, #20
 800630a:	429d      	cmp	r5, r3
 800630c:	d926      	bls.n	800635c <_dtoa_r+0x2b4>
 800630e:	6041      	str	r1, [r0, #4]
 8006310:	4648      	mov	r0, r9
 8006312:	f000 fd9b 	bl	8006e4c <_Balloc>
 8006316:	4682      	mov	sl, r0
 8006318:	2800      	cmp	r0, #0
 800631a:	d143      	bne.n	80063a4 <_dtoa_r+0x2fc>
 800631c:	4602      	mov	r2, r0
 800631e:	f240 11af 	movw	r1, #431	@ 0x1af
 8006322:	4b1f      	ldr	r3, [pc, #124]	@ (80063a0 <_dtoa_r+0x2f8>)
 8006324:	e6d4      	b.n	80060d0 <_dtoa_r+0x28>
 8006326:	2300      	movs	r3, #0
 8006328:	e7e3      	b.n	80062f2 <_dtoa_r+0x24a>
 800632a:	2300      	movs	r3, #0
 800632c:	e7d5      	b.n	80062da <_dtoa_r+0x232>
 800632e:	2401      	movs	r4, #1
 8006330:	2300      	movs	r3, #0
 8006332:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006334:	9320      	str	r3, [sp, #128]	@ 0x80
 8006336:	f04f 3bff 	mov.w	fp, #4294967295
 800633a:	2200      	movs	r2, #0
 800633c:	2312      	movs	r3, #18
 800633e:	f8cd b020 	str.w	fp, [sp, #32]
 8006342:	9221      	str	r2, [sp, #132]	@ 0x84
 8006344:	e7db      	b.n	80062fe <_dtoa_r+0x256>
 8006346:	2301      	movs	r3, #1
 8006348:	930b      	str	r3, [sp, #44]	@ 0x2c
 800634a:	e7f4      	b.n	8006336 <_dtoa_r+0x28e>
 800634c:	f04f 0b01 	mov.w	fp, #1
 8006350:	465b      	mov	r3, fp
 8006352:	f8cd b020 	str.w	fp, [sp, #32]
 8006356:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800635a:	e7d0      	b.n	80062fe <_dtoa_r+0x256>
 800635c:	3101      	adds	r1, #1
 800635e:	0052      	lsls	r2, r2, #1
 8006360:	e7d1      	b.n	8006306 <_dtoa_r+0x25e>
 8006362:	bf00      	nop
 8006364:	f3af 8000 	nop.w
 8006368:	636f4361 	.word	0x636f4361
 800636c:	3fd287a7 	.word	0x3fd287a7
 8006370:	8b60c8b3 	.word	0x8b60c8b3
 8006374:	3fc68a28 	.word	0x3fc68a28
 8006378:	509f79fb 	.word	0x509f79fb
 800637c:	3fd34413 	.word	0x3fd34413
 8006380:	08007eeb 	.word	0x08007eeb
 8006384:	08007f02 	.word	0x08007f02
 8006388:	7ff00000 	.word	0x7ff00000
 800638c:	08007ee7 	.word	0x08007ee7
 8006390:	08007ebb 	.word	0x08007ebb
 8006394:	08007eba 	.word	0x08007eba
 8006398:	3ff80000 	.word	0x3ff80000
 800639c:	08008050 	.word	0x08008050
 80063a0:	08007f5a 	.word	0x08007f5a
 80063a4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80063a8:	6018      	str	r0, [r3, #0]
 80063aa:	9b08      	ldr	r3, [sp, #32]
 80063ac:	2b0e      	cmp	r3, #14
 80063ae:	f200 80a1 	bhi.w	80064f4 <_dtoa_r+0x44c>
 80063b2:	2c00      	cmp	r4, #0
 80063b4:	f000 809e 	beq.w	80064f4 <_dtoa_r+0x44c>
 80063b8:	2f00      	cmp	r7, #0
 80063ba:	dd33      	ble.n	8006424 <_dtoa_r+0x37c>
 80063bc:	4b9c      	ldr	r3, [pc, #624]	@ (8006630 <_dtoa_r+0x588>)
 80063be:	f007 020f 	and.w	r2, r7, #15
 80063c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80063c6:	05f8      	lsls	r0, r7, #23
 80063c8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80063cc:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 80063d0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80063d4:	d516      	bpl.n	8006404 <_dtoa_r+0x35c>
 80063d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80063da:	4b96      	ldr	r3, [pc, #600]	@ (8006634 <_dtoa_r+0x58c>)
 80063dc:	2603      	movs	r6, #3
 80063de:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80063e2:	f7fa f9a3 	bl	800072c <__aeabi_ddiv>
 80063e6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80063ea:	f004 040f 	and.w	r4, r4, #15
 80063ee:	4d91      	ldr	r5, [pc, #580]	@ (8006634 <_dtoa_r+0x58c>)
 80063f0:	b954      	cbnz	r4, 8006408 <_dtoa_r+0x360>
 80063f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80063f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80063fa:	f7fa f997 	bl	800072c <__aeabi_ddiv>
 80063fe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006402:	e028      	b.n	8006456 <_dtoa_r+0x3ae>
 8006404:	2602      	movs	r6, #2
 8006406:	e7f2      	b.n	80063ee <_dtoa_r+0x346>
 8006408:	07e1      	lsls	r1, r4, #31
 800640a:	d508      	bpl.n	800641e <_dtoa_r+0x376>
 800640c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006410:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006414:	f7fa f860 	bl	80004d8 <__aeabi_dmul>
 8006418:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800641c:	3601      	adds	r6, #1
 800641e:	1064      	asrs	r4, r4, #1
 8006420:	3508      	adds	r5, #8
 8006422:	e7e5      	b.n	80063f0 <_dtoa_r+0x348>
 8006424:	f000 80af 	beq.w	8006586 <_dtoa_r+0x4de>
 8006428:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800642c:	427c      	negs	r4, r7
 800642e:	4b80      	ldr	r3, [pc, #512]	@ (8006630 <_dtoa_r+0x588>)
 8006430:	f004 020f 	and.w	r2, r4, #15
 8006434:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800643c:	f7fa f84c 	bl	80004d8 <__aeabi_dmul>
 8006440:	2602      	movs	r6, #2
 8006442:	2300      	movs	r3, #0
 8006444:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006448:	4d7a      	ldr	r5, [pc, #488]	@ (8006634 <_dtoa_r+0x58c>)
 800644a:	1124      	asrs	r4, r4, #4
 800644c:	2c00      	cmp	r4, #0
 800644e:	f040 808f 	bne.w	8006570 <_dtoa_r+0x4c8>
 8006452:	2b00      	cmp	r3, #0
 8006454:	d1d3      	bne.n	80063fe <_dtoa_r+0x356>
 8006456:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800645a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800645c:	2b00      	cmp	r3, #0
 800645e:	f000 8094 	beq.w	800658a <_dtoa_r+0x4e2>
 8006462:	2200      	movs	r2, #0
 8006464:	4620      	mov	r0, r4
 8006466:	4629      	mov	r1, r5
 8006468:	4b73      	ldr	r3, [pc, #460]	@ (8006638 <_dtoa_r+0x590>)
 800646a:	f7fa faa7 	bl	80009bc <__aeabi_dcmplt>
 800646e:	2800      	cmp	r0, #0
 8006470:	f000 808b 	beq.w	800658a <_dtoa_r+0x4e2>
 8006474:	9b08      	ldr	r3, [sp, #32]
 8006476:	2b00      	cmp	r3, #0
 8006478:	f000 8087 	beq.w	800658a <_dtoa_r+0x4e2>
 800647c:	f1bb 0f00 	cmp.w	fp, #0
 8006480:	dd34      	ble.n	80064ec <_dtoa_r+0x444>
 8006482:	4620      	mov	r0, r4
 8006484:	2200      	movs	r2, #0
 8006486:	4629      	mov	r1, r5
 8006488:	4b6c      	ldr	r3, [pc, #432]	@ (800663c <_dtoa_r+0x594>)
 800648a:	f7fa f825 	bl	80004d8 <__aeabi_dmul>
 800648e:	465c      	mov	r4, fp
 8006490:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006494:	f107 38ff 	add.w	r8, r7, #4294967295
 8006498:	3601      	adds	r6, #1
 800649a:	4630      	mov	r0, r6
 800649c:	f7f9 ffb2 	bl	8000404 <__aeabi_i2d>
 80064a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80064a4:	f7fa f818 	bl	80004d8 <__aeabi_dmul>
 80064a8:	2200      	movs	r2, #0
 80064aa:	4b65      	ldr	r3, [pc, #404]	@ (8006640 <_dtoa_r+0x598>)
 80064ac:	f7f9 fe5e 	bl	800016c <__adddf3>
 80064b0:	4605      	mov	r5, r0
 80064b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80064b6:	2c00      	cmp	r4, #0
 80064b8:	d16a      	bne.n	8006590 <_dtoa_r+0x4e8>
 80064ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80064be:	2200      	movs	r2, #0
 80064c0:	4b60      	ldr	r3, [pc, #384]	@ (8006644 <_dtoa_r+0x59c>)
 80064c2:	f7f9 fe51 	bl	8000168 <__aeabi_dsub>
 80064c6:	4602      	mov	r2, r0
 80064c8:	460b      	mov	r3, r1
 80064ca:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80064ce:	462a      	mov	r2, r5
 80064d0:	4633      	mov	r3, r6
 80064d2:	f7fa fa91 	bl	80009f8 <__aeabi_dcmpgt>
 80064d6:	2800      	cmp	r0, #0
 80064d8:	f040 8298 	bne.w	8006a0c <_dtoa_r+0x964>
 80064dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80064e0:	462a      	mov	r2, r5
 80064e2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80064e6:	f7fa fa69 	bl	80009bc <__aeabi_dcmplt>
 80064ea:	bb38      	cbnz	r0, 800653c <_dtoa_r+0x494>
 80064ec:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80064f0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80064f4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	f2c0 8157 	blt.w	80067aa <_dtoa_r+0x702>
 80064fc:	2f0e      	cmp	r7, #14
 80064fe:	f300 8154 	bgt.w	80067aa <_dtoa_r+0x702>
 8006502:	4b4b      	ldr	r3, [pc, #300]	@ (8006630 <_dtoa_r+0x588>)
 8006504:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006508:	e9d3 3400 	ldrd	r3, r4, [r3]
 800650c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006510:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006512:	2b00      	cmp	r3, #0
 8006514:	f280 80e5 	bge.w	80066e2 <_dtoa_r+0x63a>
 8006518:	9b08      	ldr	r3, [sp, #32]
 800651a:	2b00      	cmp	r3, #0
 800651c:	f300 80e1 	bgt.w	80066e2 <_dtoa_r+0x63a>
 8006520:	d10c      	bne.n	800653c <_dtoa_r+0x494>
 8006522:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006526:	2200      	movs	r2, #0
 8006528:	4b46      	ldr	r3, [pc, #280]	@ (8006644 <_dtoa_r+0x59c>)
 800652a:	f7f9 ffd5 	bl	80004d8 <__aeabi_dmul>
 800652e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006532:	f7fa fa57 	bl	80009e4 <__aeabi_dcmpge>
 8006536:	2800      	cmp	r0, #0
 8006538:	f000 8266 	beq.w	8006a08 <_dtoa_r+0x960>
 800653c:	2400      	movs	r4, #0
 800653e:	4625      	mov	r5, r4
 8006540:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006542:	4656      	mov	r6, sl
 8006544:	ea6f 0803 	mvn.w	r8, r3
 8006548:	2700      	movs	r7, #0
 800654a:	4621      	mov	r1, r4
 800654c:	4648      	mov	r0, r9
 800654e:	f000 fcbd 	bl	8006ecc <_Bfree>
 8006552:	2d00      	cmp	r5, #0
 8006554:	f000 80bd 	beq.w	80066d2 <_dtoa_r+0x62a>
 8006558:	b12f      	cbz	r7, 8006566 <_dtoa_r+0x4be>
 800655a:	42af      	cmp	r7, r5
 800655c:	d003      	beq.n	8006566 <_dtoa_r+0x4be>
 800655e:	4639      	mov	r1, r7
 8006560:	4648      	mov	r0, r9
 8006562:	f000 fcb3 	bl	8006ecc <_Bfree>
 8006566:	4629      	mov	r1, r5
 8006568:	4648      	mov	r0, r9
 800656a:	f000 fcaf 	bl	8006ecc <_Bfree>
 800656e:	e0b0      	b.n	80066d2 <_dtoa_r+0x62a>
 8006570:	07e2      	lsls	r2, r4, #31
 8006572:	d505      	bpl.n	8006580 <_dtoa_r+0x4d8>
 8006574:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006578:	f7f9 ffae 	bl	80004d8 <__aeabi_dmul>
 800657c:	2301      	movs	r3, #1
 800657e:	3601      	adds	r6, #1
 8006580:	1064      	asrs	r4, r4, #1
 8006582:	3508      	adds	r5, #8
 8006584:	e762      	b.n	800644c <_dtoa_r+0x3a4>
 8006586:	2602      	movs	r6, #2
 8006588:	e765      	b.n	8006456 <_dtoa_r+0x3ae>
 800658a:	46b8      	mov	r8, r7
 800658c:	9c08      	ldr	r4, [sp, #32]
 800658e:	e784      	b.n	800649a <_dtoa_r+0x3f2>
 8006590:	4b27      	ldr	r3, [pc, #156]	@ (8006630 <_dtoa_r+0x588>)
 8006592:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006594:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006598:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800659c:	4454      	add	r4, sl
 800659e:	2900      	cmp	r1, #0
 80065a0:	d054      	beq.n	800664c <_dtoa_r+0x5a4>
 80065a2:	2000      	movs	r0, #0
 80065a4:	4928      	ldr	r1, [pc, #160]	@ (8006648 <_dtoa_r+0x5a0>)
 80065a6:	f7fa f8c1 	bl	800072c <__aeabi_ddiv>
 80065aa:	4633      	mov	r3, r6
 80065ac:	462a      	mov	r2, r5
 80065ae:	f7f9 fddb 	bl	8000168 <__aeabi_dsub>
 80065b2:	4656      	mov	r6, sl
 80065b4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80065b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065bc:	f7fa fa3c 	bl	8000a38 <__aeabi_d2iz>
 80065c0:	4605      	mov	r5, r0
 80065c2:	f7f9 ff1f 	bl	8000404 <__aeabi_i2d>
 80065c6:	4602      	mov	r2, r0
 80065c8:	460b      	mov	r3, r1
 80065ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065ce:	f7f9 fdcb 	bl	8000168 <__aeabi_dsub>
 80065d2:	4602      	mov	r2, r0
 80065d4:	460b      	mov	r3, r1
 80065d6:	3530      	adds	r5, #48	@ 0x30
 80065d8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80065dc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80065e0:	f806 5b01 	strb.w	r5, [r6], #1
 80065e4:	f7fa f9ea 	bl	80009bc <__aeabi_dcmplt>
 80065e8:	2800      	cmp	r0, #0
 80065ea:	d172      	bne.n	80066d2 <_dtoa_r+0x62a>
 80065ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80065f0:	2000      	movs	r0, #0
 80065f2:	4911      	ldr	r1, [pc, #68]	@ (8006638 <_dtoa_r+0x590>)
 80065f4:	f7f9 fdb8 	bl	8000168 <__aeabi_dsub>
 80065f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80065fc:	f7fa f9de 	bl	80009bc <__aeabi_dcmplt>
 8006600:	2800      	cmp	r0, #0
 8006602:	f040 80b4 	bne.w	800676e <_dtoa_r+0x6c6>
 8006606:	42a6      	cmp	r6, r4
 8006608:	f43f af70 	beq.w	80064ec <_dtoa_r+0x444>
 800660c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006610:	2200      	movs	r2, #0
 8006612:	4b0a      	ldr	r3, [pc, #40]	@ (800663c <_dtoa_r+0x594>)
 8006614:	f7f9 ff60 	bl	80004d8 <__aeabi_dmul>
 8006618:	2200      	movs	r2, #0
 800661a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800661e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006622:	4b06      	ldr	r3, [pc, #24]	@ (800663c <_dtoa_r+0x594>)
 8006624:	f7f9 ff58 	bl	80004d8 <__aeabi_dmul>
 8006628:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800662c:	e7c4      	b.n	80065b8 <_dtoa_r+0x510>
 800662e:	bf00      	nop
 8006630:	08008050 	.word	0x08008050
 8006634:	08008028 	.word	0x08008028
 8006638:	3ff00000 	.word	0x3ff00000
 800663c:	40240000 	.word	0x40240000
 8006640:	401c0000 	.word	0x401c0000
 8006644:	40140000 	.word	0x40140000
 8006648:	3fe00000 	.word	0x3fe00000
 800664c:	4631      	mov	r1, r6
 800664e:	4628      	mov	r0, r5
 8006650:	f7f9 ff42 	bl	80004d8 <__aeabi_dmul>
 8006654:	4656      	mov	r6, sl
 8006656:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800665a:	9413      	str	r4, [sp, #76]	@ 0x4c
 800665c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006660:	f7fa f9ea 	bl	8000a38 <__aeabi_d2iz>
 8006664:	4605      	mov	r5, r0
 8006666:	f7f9 fecd 	bl	8000404 <__aeabi_i2d>
 800666a:	4602      	mov	r2, r0
 800666c:	460b      	mov	r3, r1
 800666e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006672:	f7f9 fd79 	bl	8000168 <__aeabi_dsub>
 8006676:	4602      	mov	r2, r0
 8006678:	460b      	mov	r3, r1
 800667a:	3530      	adds	r5, #48	@ 0x30
 800667c:	f806 5b01 	strb.w	r5, [r6], #1
 8006680:	42a6      	cmp	r6, r4
 8006682:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006686:	f04f 0200 	mov.w	r2, #0
 800668a:	d124      	bne.n	80066d6 <_dtoa_r+0x62e>
 800668c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006690:	4bae      	ldr	r3, [pc, #696]	@ (800694c <_dtoa_r+0x8a4>)
 8006692:	f7f9 fd6b 	bl	800016c <__adddf3>
 8006696:	4602      	mov	r2, r0
 8006698:	460b      	mov	r3, r1
 800669a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800669e:	f7fa f9ab 	bl	80009f8 <__aeabi_dcmpgt>
 80066a2:	2800      	cmp	r0, #0
 80066a4:	d163      	bne.n	800676e <_dtoa_r+0x6c6>
 80066a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80066aa:	2000      	movs	r0, #0
 80066ac:	49a7      	ldr	r1, [pc, #668]	@ (800694c <_dtoa_r+0x8a4>)
 80066ae:	f7f9 fd5b 	bl	8000168 <__aeabi_dsub>
 80066b2:	4602      	mov	r2, r0
 80066b4:	460b      	mov	r3, r1
 80066b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066ba:	f7fa f97f 	bl	80009bc <__aeabi_dcmplt>
 80066be:	2800      	cmp	r0, #0
 80066c0:	f43f af14 	beq.w	80064ec <_dtoa_r+0x444>
 80066c4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80066c6:	1e73      	subs	r3, r6, #1
 80066c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80066ca:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80066ce:	2b30      	cmp	r3, #48	@ 0x30
 80066d0:	d0f8      	beq.n	80066c4 <_dtoa_r+0x61c>
 80066d2:	4647      	mov	r7, r8
 80066d4:	e03b      	b.n	800674e <_dtoa_r+0x6a6>
 80066d6:	4b9e      	ldr	r3, [pc, #632]	@ (8006950 <_dtoa_r+0x8a8>)
 80066d8:	f7f9 fefe 	bl	80004d8 <__aeabi_dmul>
 80066dc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80066e0:	e7bc      	b.n	800665c <_dtoa_r+0x5b4>
 80066e2:	4656      	mov	r6, sl
 80066e4:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80066e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066ec:	4620      	mov	r0, r4
 80066ee:	4629      	mov	r1, r5
 80066f0:	f7fa f81c 	bl	800072c <__aeabi_ddiv>
 80066f4:	f7fa f9a0 	bl	8000a38 <__aeabi_d2iz>
 80066f8:	4680      	mov	r8, r0
 80066fa:	f7f9 fe83 	bl	8000404 <__aeabi_i2d>
 80066fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006702:	f7f9 fee9 	bl	80004d8 <__aeabi_dmul>
 8006706:	4602      	mov	r2, r0
 8006708:	460b      	mov	r3, r1
 800670a:	4620      	mov	r0, r4
 800670c:	4629      	mov	r1, r5
 800670e:	f7f9 fd2b 	bl	8000168 <__aeabi_dsub>
 8006712:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006716:	9d08      	ldr	r5, [sp, #32]
 8006718:	f806 4b01 	strb.w	r4, [r6], #1
 800671c:	eba6 040a 	sub.w	r4, r6, sl
 8006720:	42a5      	cmp	r5, r4
 8006722:	4602      	mov	r2, r0
 8006724:	460b      	mov	r3, r1
 8006726:	d133      	bne.n	8006790 <_dtoa_r+0x6e8>
 8006728:	f7f9 fd20 	bl	800016c <__adddf3>
 800672c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006730:	4604      	mov	r4, r0
 8006732:	460d      	mov	r5, r1
 8006734:	f7fa f960 	bl	80009f8 <__aeabi_dcmpgt>
 8006738:	b9c0      	cbnz	r0, 800676c <_dtoa_r+0x6c4>
 800673a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800673e:	4620      	mov	r0, r4
 8006740:	4629      	mov	r1, r5
 8006742:	f7fa f931 	bl	80009a8 <__aeabi_dcmpeq>
 8006746:	b110      	cbz	r0, 800674e <_dtoa_r+0x6a6>
 8006748:	f018 0f01 	tst.w	r8, #1
 800674c:	d10e      	bne.n	800676c <_dtoa_r+0x6c4>
 800674e:	4648      	mov	r0, r9
 8006750:	9903      	ldr	r1, [sp, #12]
 8006752:	f000 fbbb 	bl	8006ecc <_Bfree>
 8006756:	2300      	movs	r3, #0
 8006758:	7033      	strb	r3, [r6, #0]
 800675a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800675c:	3701      	adds	r7, #1
 800675e:	601f      	str	r7, [r3, #0]
 8006760:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006762:	2b00      	cmp	r3, #0
 8006764:	f000 824b 	beq.w	8006bfe <_dtoa_r+0xb56>
 8006768:	601e      	str	r6, [r3, #0]
 800676a:	e248      	b.n	8006bfe <_dtoa_r+0xb56>
 800676c:	46b8      	mov	r8, r7
 800676e:	4633      	mov	r3, r6
 8006770:	461e      	mov	r6, r3
 8006772:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006776:	2a39      	cmp	r2, #57	@ 0x39
 8006778:	d106      	bne.n	8006788 <_dtoa_r+0x6e0>
 800677a:	459a      	cmp	sl, r3
 800677c:	d1f8      	bne.n	8006770 <_dtoa_r+0x6c8>
 800677e:	2230      	movs	r2, #48	@ 0x30
 8006780:	f108 0801 	add.w	r8, r8, #1
 8006784:	f88a 2000 	strb.w	r2, [sl]
 8006788:	781a      	ldrb	r2, [r3, #0]
 800678a:	3201      	adds	r2, #1
 800678c:	701a      	strb	r2, [r3, #0]
 800678e:	e7a0      	b.n	80066d2 <_dtoa_r+0x62a>
 8006790:	2200      	movs	r2, #0
 8006792:	4b6f      	ldr	r3, [pc, #444]	@ (8006950 <_dtoa_r+0x8a8>)
 8006794:	f7f9 fea0 	bl	80004d8 <__aeabi_dmul>
 8006798:	2200      	movs	r2, #0
 800679a:	2300      	movs	r3, #0
 800679c:	4604      	mov	r4, r0
 800679e:	460d      	mov	r5, r1
 80067a0:	f7fa f902 	bl	80009a8 <__aeabi_dcmpeq>
 80067a4:	2800      	cmp	r0, #0
 80067a6:	d09f      	beq.n	80066e8 <_dtoa_r+0x640>
 80067a8:	e7d1      	b.n	800674e <_dtoa_r+0x6a6>
 80067aa:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80067ac:	2a00      	cmp	r2, #0
 80067ae:	f000 80ea 	beq.w	8006986 <_dtoa_r+0x8de>
 80067b2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80067b4:	2a01      	cmp	r2, #1
 80067b6:	f300 80cd 	bgt.w	8006954 <_dtoa_r+0x8ac>
 80067ba:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80067bc:	2a00      	cmp	r2, #0
 80067be:	f000 80c1 	beq.w	8006944 <_dtoa_r+0x89c>
 80067c2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80067c6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80067c8:	9e04      	ldr	r6, [sp, #16]
 80067ca:	9a04      	ldr	r2, [sp, #16]
 80067cc:	2101      	movs	r1, #1
 80067ce:	441a      	add	r2, r3
 80067d0:	9204      	str	r2, [sp, #16]
 80067d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80067d4:	4648      	mov	r0, r9
 80067d6:	441a      	add	r2, r3
 80067d8:	9209      	str	r2, [sp, #36]	@ 0x24
 80067da:	f000 fc2b 	bl	8007034 <__i2b>
 80067de:	4605      	mov	r5, r0
 80067e0:	b166      	cbz	r6, 80067fc <_dtoa_r+0x754>
 80067e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	dd09      	ble.n	80067fc <_dtoa_r+0x754>
 80067e8:	42b3      	cmp	r3, r6
 80067ea:	bfa8      	it	ge
 80067ec:	4633      	movge	r3, r6
 80067ee:	9a04      	ldr	r2, [sp, #16]
 80067f0:	1af6      	subs	r6, r6, r3
 80067f2:	1ad2      	subs	r2, r2, r3
 80067f4:	9204      	str	r2, [sp, #16]
 80067f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80067f8:	1ad3      	subs	r3, r2, r3
 80067fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80067fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80067fe:	b30b      	cbz	r3, 8006844 <_dtoa_r+0x79c>
 8006800:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006802:	2b00      	cmp	r3, #0
 8006804:	f000 80c6 	beq.w	8006994 <_dtoa_r+0x8ec>
 8006808:	2c00      	cmp	r4, #0
 800680a:	f000 80c0 	beq.w	800698e <_dtoa_r+0x8e6>
 800680e:	4629      	mov	r1, r5
 8006810:	4622      	mov	r2, r4
 8006812:	4648      	mov	r0, r9
 8006814:	f000 fcc6 	bl	80071a4 <__pow5mult>
 8006818:	9a03      	ldr	r2, [sp, #12]
 800681a:	4601      	mov	r1, r0
 800681c:	4605      	mov	r5, r0
 800681e:	4648      	mov	r0, r9
 8006820:	f000 fc1e 	bl	8007060 <__multiply>
 8006824:	9903      	ldr	r1, [sp, #12]
 8006826:	4680      	mov	r8, r0
 8006828:	4648      	mov	r0, r9
 800682a:	f000 fb4f 	bl	8006ecc <_Bfree>
 800682e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006830:	1b1b      	subs	r3, r3, r4
 8006832:	930a      	str	r3, [sp, #40]	@ 0x28
 8006834:	f000 80b1 	beq.w	800699a <_dtoa_r+0x8f2>
 8006838:	4641      	mov	r1, r8
 800683a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800683c:	4648      	mov	r0, r9
 800683e:	f000 fcb1 	bl	80071a4 <__pow5mult>
 8006842:	9003      	str	r0, [sp, #12]
 8006844:	2101      	movs	r1, #1
 8006846:	4648      	mov	r0, r9
 8006848:	f000 fbf4 	bl	8007034 <__i2b>
 800684c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800684e:	4604      	mov	r4, r0
 8006850:	2b00      	cmp	r3, #0
 8006852:	f000 81d8 	beq.w	8006c06 <_dtoa_r+0xb5e>
 8006856:	461a      	mov	r2, r3
 8006858:	4601      	mov	r1, r0
 800685a:	4648      	mov	r0, r9
 800685c:	f000 fca2 	bl	80071a4 <__pow5mult>
 8006860:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006862:	4604      	mov	r4, r0
 8006864:	2b01      	cmp	r3, #1
 8006866:	f300 809f 	bgt.w	80069a8 <_dtoa_r+0x900>
 800686a:	9b06      	ldr	r3, [sp, #24]
 800686c:	2b00      	cmp	r3, #0
 800686e:	f040 8097 	bne.w	80069a0 <_dtoa_r+0x8f8>
 8006872:	9b07      	ldr	r3, [sp, #28]
 8006874:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006878:	2b00      	cmp	r3, #0
 800687a:	f040 8093 	bne.w	80069a4 <_dtoa_r+0x8fc>
 800687e:	9b07      	ldr	r3, [sp, #28]
 8006880:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006884:	0d1b      	lsrs	r3, r3, #20
 8006886:	051b      	lsls	r3, r3, #20
 8006888:	b133      	cbz	r3, 8006898 <_dtoa_r+0x7f0>
 800688a:	9b04      	ldr	r3, [sp, #16]
 800688c:	3301      	adds	r3, #1
 800688e:	9304      	str	r3, [sp, #16]
 8006890:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006892:	3301      	adds	r3, #1
 8006894:	9309      	str	r3, [sp, #36]	@ 0x24
 8006896:	2301      	movs	r3, #1
 8006898:	930a      	str	r3, [sp, #40]	@ 0x28
 800689a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800689c:	2b00      	cmp	r3, #0
 800689e:	f000 81b8 	beq.w	8006c12 <_dtoa_r+0xb6a>
 80068a2:	6923      	ldr	r3, [r4, #16]
 80068a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80068a8:	6918      	ldr	r0, [r3, #16]
 80068aa:	f000 fb77 	bl	8006f9c <__hi0bits>
 80068ae:	f1c0 0020 	rsb	r0, r0, #32
 80068b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068b4:	4418      	add	r0, r3
 80068b6:	f010 001f 	ands.w	r0, r0, #31
 80068ba:	f000 8082 	beq.w	80069c2 <_dtoa_r+0x91a>
 80068be:	f1c0 0320 	rsb	r3, r0, #32
 80068c2:	2b04      	cmp	r3, #4
 80068c4:	dd73      	ble.n	80069ae <_dtoa_r+0x906>
 80068c6:	9b04      	ldr	r3, [sp, #16]
 80068c8:	f1c0 001c 	rsb	r0, r0, #28
 80068cc:	4403      	add	r3, r0
 80068ce:	9304      	str	r3, [sp, #16]
 80068d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068d2:	4406      	add	r6, r0
 80068d4:	4403      	add	r3, r0
 80068d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80068d8:	9b04      	ldr	r3, [sp, #16]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	dd05      	ble.n	80068ea <_dtoa_r+0x842>
 80068de:	461a      	mov	r2, r3
 80068e0:	4648      	mov	r0, r9
 80068e2:	9903      	ldr	r1, [sp, #12]
 80068e4:	f000 fcb8 	bl	8007258 <__lshift>
 80068e8:	9003      	str	r0, [sp, #12]
 80068ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	dd05      	ble.n	80068fc <_dtoa_r+0x854>
 80068f0:	4621      	mov	r1, r4
 80068f2:	461a      	mov	r2, r3
 80068f4:	4648      	mov	r0, r9
 80068f6:	f000 fcaf 	bl	8007258 <__lshift>
 80068fa:	4604      	mov	r4, r0
 80068fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d061      	beq.n	80069c6 <_dtoa_r+0x91e>
 8006902:	4621      	mov	r1, r4
 8006904:	9803      	ldr	r0, [sp, #12]
 8006906:	f000 fd13 	bl	8007330 <__mcmp>
 800690a:	2800      	cmp	r0, #0
 800690c:	da5b      	bge.n	80069c6 <_dtoa_r+0x91e>
 800690e:	2300      	movs	r3, #0
 8006910:	220a      	movs	r2, #10
 8006912:	4648      	mov	r0, r9
 8006914:	9903      	ldr	r1, [sp, #12]
 8006916:	f000 fafb 	bl	8006f10 <__multadd>
 800691a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800691c:	f107 38ff 	add.w	r8, r7, #4294967295
 8006920:	9003      	str	r0, [sp, #12]
 8006922:	2b00      	cmp	r3, #0
 8006924:	f000 8177 	beq.w	8006c16 <_dtoa_r+0xb6e>
 8006928:	4629      	mov	r1, r5
 800692a:	2300      	movs	r3, #0
 800692c:	220a      	movs	r2, #10
 800692e:	4648      	mov	r0, r9
 8006930:	f000 faee 	bl	8006f10 <__multadd>
 8006934:	f1bb 0f00 	cmp.w	fp, #0
 8006938:	4605      	mov	r5, r0
 800693a:	dc6f      	bgt.n	8006a1c <_dtoa_r+0x974>
 800693c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800693e:	2b02      	cmp	r3, #2
 8006940:	dc49      	bgt.n	80069d6 <_dtoa_r+0x92e>
 8006942:	e06b      	b.n	8006a1c <_dtoa_r+0x974>
 8006944:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006946:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800694a:	e73c      	b.n	80067c6 <_dtoa_r+0x71e>
 800694c:	3fe00000 	.word	0x3fe00000
 8006950:	40240000 	.word	0x40240000
 8006954:	9b08      	ldr	r3, [sp, #32]
 8006956:	1e5c      	subs	r4, r3, #1
 8006958:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800695a:	42a3      	cmp	r3, r4
 800695c:	db09      	blt.n	8006972 <_dtoa_r+0x8ca>
 800695e:	1b1c      	subs	r4, r3, r4
 8006960:	9b08      	ldr	r3, [sp, #32]
 8006962:	2b00      	cmp	r3, #0
 8006964:	f6bf af30 	bge.w	80067c8 <_dtoa_r+0x720>
 8006968:	9b04      	ldr	r3, [sp, #16]
 800696a:	9a08      	ldr	r2, [sp, #32]
 800696c:	1a9e      	subs	r6, r3, r2
 800696e:	2300      	movs	r3, #0
 8006970:	e72b      	b.n	80067ca <_dtoa_r+0x722>
 8006972:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006974:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006976:	1ae3      	subs	r3, r4, r3
 8006978:	441a      	add	r2, r3
 800697a:	940a      	str	r4, [sp, #40]	@ 0x28
 800697c:	9e04      	ldr	r6, [sp, #16]
 800697e:	2400      	movs	r4, #0
 8006980:	9b08      	ldr	r3, [sp, #32]
 8006982:	920e      	str	r2, [sp, #56]	@ 0x38
 8006984:	e721      	b.n	80067ca <_dtoa_r+0x722>
 8006986:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006988:	9e04      	ldr	r6, [sp, #16]
 800698a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800698c:	e728      	b.n	80067e0 <_dtoa_r+0x738>
 800698e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006992:	e751      	b.n	8006838 <_dtoa_r+0x790>
 8006994:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006996:	9903      	ldr	r1, [sp, #12]
 8006998:	e750      	b.n	800683c <_dtoa_r+0x794>
 800699a:	f8cd 800c 	str.w	r8, [sp, #12]
 800699e:	e751      	b.n	8006844 <_dtoa_r+0x79c>
 80069a0:	2300      	movs	r3, #0
 80069a2:	e779      	b.n	8006898 <_dtoa_r+0x7f0>
 80069a4:	9b06      	ldr	r3, [sp, #24]
 80069a6:	e777      	b.n	8006898 <_dtoa_r+0x7f0>
 80069a8:	2300      	movs	r3, #0
 80069aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80069ac:	e779      	b.n	80068a2 <_dtoa_r+0x7fa>
 80069ae:	d093      	beq.n	80068d8 <_dtoa_r+0x830>
 80069b0:	9a04      	ldr	r2, [sp, #16]
 80069b2:	331c      	adds	r3, #28
 80069b4:	441a      	add	r2, r3
 80069b6:	9204      	str	r2, [sp, #16]
 80069b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80069ba:	441e      	add	r6, r3
 80069bc:	441a      	add	r2, r3
 80069be:	9209      	str	r2, [sp, #36]	@ 0x24
 80069c0:	e78a      	b.n	80068d8 <_dtoa_r+0x830>
 80069c2:	4603      	mov	r3, r0
 80069c4:	e7f4      	b.n	80069b0 <_dtoa_r+0x908>
 80069c6:	9b08      	ldr	r3, [sp, #32]
 80069c8:	46b8      	mov	r8, r7
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	dc20      	bgt.n	8006a10 <_dtoa_r+0x968>
 80069ce:	469b      	mov	fp, r3
 80069d0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80069d2:	2b02      	cmp	r3, #2
 80069d4:	dd1e      	ble.n	8006a14 <_dtoa_r+0x96c>
 80069d6:	f1bb 0f00 	cmp.w	fp, #0
 80069da:	f47f adb1 	bne.w	8006540 <_dtoa_r+0x498>
 80069de:	4621      	mov	r1, r4
 80069e0:	465b      	mov	r3, fp
 80069e2:	2205      	movs	r2, #5
 80069e4:	4648      	mov	r0, r9
 80069e6:	f000 fa93 	bl	8006f10 <__multadd>
 80069ea:	4601      	mov	r1, r0
 80069ec:	4604      	mov	r4, r0
 80069ee:	9803      	ldr	r0, [sp, #12]
 80069f0:	f000 fc9e 	bl	8007330 <__mcmp>
 80069f4:	2800      	cmp	r0, #0
 80069f6:	f77f ada3 	ble.w	8006540 <_dtoa_r+0x498>
 80069fa:	4656      	mov	r6, sl
 80069fc:	2331      	movs	r3, #49	@ 0x31
 80069fe:	f108 0801 	add.w	r8, r8, #1
 8006a02:	f806 3b01 	strb.w	r3, [r6], #1
 8006a06:	e59f      	b.n	8006548 <_dtoa_r+0x4a0>
 8006a08:	46b8      	mov	r8, r7
 8006a0a:	9c08      	ldr	r4, [sp, #32]
 8006a0c:	4625      	mov	r5, r4
 8006a0e:	e7f4      	b.n	80069fa <_dtoa_r+0x952>
 8006a10:	f8dd b020 	ldr.w	fp, [sp, #32]
 8006a14:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	f000 8101 	beq.w	8006c1e <_dtoa_r+0xb76>
 8006a1c:	2e00      	cmp	r6, #0
 8006a1e:	dd05      	ble.n	8006a2c <_dtoa_r+0x984>
 8006a20:	4629      	mov	r1, r5
 8006a22:	4632      	mov	r2, r6
 8006a24:	4648      	mov	r0, r9
 8006a26:	f000 fc17 	bl	8007258 <__lshift>
 8006a2a:	4605      	mov	r5, r0
 8006a2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d05c      	beq.n	8006aec <_dtoa_r+0xa44>
 8006a32:	4648      	mov	r0, r9
 8006a34:	6869      	ldr	r1, [r5, #4]
 8006a36:	f000 fa09 	bl	8006e4c <_Balloc>
 8006a3a:	4606      	mov	r6, r0
 8006a3c:	b928      	cbnz	r0, 8006a4a <_dtoa_r+0x9a2>
 8006a3e:	4602      	mov	r2, r0
 8006a40:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006a44:	4b80      	ldr	r3, [pc, #512]	@ (8006c48 <_dtoa_r+0xba0>)
 8006a46:	f7ff bb43 	b.w	80060d0 <_dtoa_r+0x28>
 8006a4a:	692a      	ldr	r2, [r5, #16]
 8006a4c:	f105 010c 	add.w	r1, r5, #12
 8006a50:	3202      	adds	r2, #2
 8006a52:	0092      	lsls	r2, r2, #2
 8006a54:	300c      	adds	r0, #12
 8006a56:	f000 fe2b 	bl	80076b0 <memcpy>
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	4631      	mov	r1, r6
 8006a5e:	4648      	mov	r0, r9
 8006a60:	f000 fbfa 	bl	8007258 <__lshift>
 8006a64:	462f      	mov	r7, r5
 8006a66:	4605      	mov	r5, r0
 8006a68:	f10a 0301 	add.w	r3, sl, #1
 8006a6c:	9304      	str	r3, [sp, #16]
 8006a6e:	eb0a 030b 	add.w	r3, sl, fp
 8006a72:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a74:	9b06      	ldr	r3, [sp, #24]
 8006a76:	f003 0301 	and.w	r3, r3, #1
 8006a7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a7c:	9b04      	ldr	r3, [sp, #16]
 8006a7e:	4621      	mov	r1, r4
 8006a80:	9803      	ldr	r0, [sp, #12]
 8006a82:	f103 3bff 	add.w	fp, r3, #4294967295
 8006a86:	f7ff fa86 	bl	8005f96 <quorem>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	4639      	mov	r1, r7
 8006a8e:	3330      	adds	r3, #48	@ 0x30
 8006a90:	9006      	str	r0, [sp, #24]
 8006a92:	9803      	ldr	r0, [sp, #12]
 8006a94:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a96:	f000 fc4b 	bl	8007330 <__mcmp>
 8006a9a:	462a      	mov	r2, r5
 8006a9c:	9008      	str	r0, [sp, #32]
 8006a9e:	4621      	mov	r1, r4
 8006aa0:	4648      	mov	r0, r9
 8006aa2:	f000 fc61 	bl	8007368 <__mdiff>
 8006aa6:	68c2      	ldr	r2, [r0, #12]
 8006aa8:	4606      	mov	r6, r0
 8006aaa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006aac:	bb02      	cbnz	r2, 8006af0 <_dtoa_r+0xa48>
 8006aae:	4601      	mov	r1, r0
 8006ab0:	9803      	ldr	r0, [sp, #12]
 8006ab2:	f000 fc3d 	bl	8007330 <__mcmp>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006aba:	4631      	mov	r1, r6
 8006abc:	4648      	mov	r0, r9
 8006abe:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8006ac2:	f000 fa03 	bl	8006ecc <_Bfree>
 8006ac6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006ac8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006aca:	9e04      	ldr	r6, [sp, #16]
 8006acc:	ea42 0103 	orr.w	r1, r2, r3
 8006ad0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ad2:	4319      	orrs	r1, r3
 8006ad4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ad6:	d10d      	bne.n	8006af4 <_dtoa_r+0xa4c>
 8006ad8:	2b39      	cmp	r3, #57	@ 0x39
 8006ada:	d027      	beq.n	8006b2c <_dtoa_r+0xa84>
 8006adc:	9a08      	ldr	r2, [sp, #32]
 8006ade:	2a00      	cmp	r2, #0
 8006ae0:	dd01      	ble.n	8006ae6 <_dtoa_r+0xa3e>
 8006ae2:	9b06      	ldr	r3, [sp, #24]
 8006ae4:	3331      	adds	r3, #49	@ 0x31
 8006ae6:	f88b 3000 	strb.w	r3, [fp]
 8006aea:	e52e      	b.n	800654a <_dtoa_r+0x4a2>
 8006aec:	4628      	mov	r0, r5
 8006aee:	e7b9      	b.n	8006a64 <_dtoa_r+0x9bc>
 8006af0:	2201      	movs	r2, #1
 8006af2:	e7e2      	b.n	8006aba <_dtoa_r+0xa12>
 8006af4:	9908      	ldr	r1, [sp, #32]
 8006af6:	2900      	cmp	r1, #0
 8006af8:	db04      	blt.n	8006b04 <_dtoa_r+0xa5c>
 8006afa:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8006afc:	4301      	orrs	r1, r0
 8006afe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006b00:	4301      	orrs	r1, r0
 8006b02:	d120      	bne.n	8006b46 <_dtoa_r+0xa9e>
 8006b04:	2a00      	cmp	r2, #0
 8006b06:	ddee      	ble.n	8006ae6 <_dtoa_r+0xa3e>
 8006b08:	2201      	movs	r2, #1
 8006b0a:	9903      	ldr	r1, [sp, #12]
 8006b0c:	4648      	mov	r0, r9
 8006b0e:	9304      	str	r3, [sp, #16]
 8006b10:	f000 fba2 	bl	8007258 <__lshift>
 8006b14:	4621      	mov	r1, r4
 8006b16:	9003      	str	r0, [sp, #12]
 8006b18:	f000 fc0a 	bl	8007330 <__mcmp>
 8006b1c:	2800      	cmp	r0, #0
 8006b1e:	9b04      	ldr	r3, [sp, #16]
 8006b20:	dc02      	bgt.n	8006b28 <_dtoa_r+0xa80>
 8006b22:	d1e0      	bne.n	8006ae6 <_dtoa_r+0xa3e>
 8006b24:	07da      	lsls	r2, r3, #31
 8006b26:	d5de      	bpl.n	8006ae6 <_dtoa_r+0xa3e>
 8006b28:	2b39      	cmp	r3, #57	@ 0x39
 8006b2a:	d1da      	bne.n	8006ae2 <_dtoa_r+0xa3a>
 8006b2c:	2339      	movs	r3, #57	@ 0x39
 8006b2e:	f88b 3000 	strb.w	r3, [fp]
 8006b32:	4633      	mov	r3, r6
 8006b34:	461e      	mov	r6, r3
 8006b36:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006b3a:	3b01      	subs	r3, #1
 8006b3c:	2a39      	cmp	r2, #57	@ 0x39
 8006b3e:	d04e      	beq.n	8006bde <_dtoa_r+0xb36>
 8006b40:	3201      	adds	r2, #1
 8006b42:	701a      	strb	r2, [r3, #0]
 8006b44:	e501      	b.n	800654a <_dtoa_r+0x4a2>
 8006b46:	2a00      	cmp	r2, #0
 8006b48:	dd03      	ble.n	8006b52 <_dtoa_r+0xaaa>
 8006b4a:	2b39      	cmp	r3, #57	@ 0x39
 8006b4c:	d0ee      	beq.n	8006b2c <_dtoa_r+0xa84>
 8006b4e:	3301      	adds	r3, #1
 8006b50:	e7c9      	b.n	8006ae6 <_dtoa_r+0xa3e>
 8006b52:	9a04      	ldr	r2, [sp, #16]
 8006b54:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006b56:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006b5a:	428a      	cmp	r2, r1
 8006b5c:	d028      	beq.n	8006bb0 <_dtoa_r+0xb08>
 8006b5e:	2300      	movs	r3, #0
 8006b60:	220a      	movs	r2, #10
 8006b62:	9903      	ldr	r1, [sp, #12]
 8006b64:	4648      	mov	r0, r9
 8006b66:	f000 f9d3 	bl	8006f10 <__multadd>
 8006b6a:	42af      	cmp	r7, r5
 8006b6c:	9003      	str	r0, [sp, #12]
 8006b6e:	f04f 0300 	mov.w	r3, #0
 8006b72:	f04f 020a 	mov.w	r2, #10
 8006b76:	4639      	mov	r1, r7
 8006b78:	4648      	mov	r0, r9
 8006b7a:	d107      	bne.n	8006b8c <_dtoa_r+0xae4>
 8006b7c:	f000 f9c8 	bl	8006f10 <__multadd>
 8006b80:	4607      	mov	r7, r0
 8006b82:	4605      	mov	r5, r0
 8006b84:	9b04      	ldr	r3, [sp, #16]
 8006b86:	3301      	adds	r3, #1
 8006b88:	9304      	str	r3, [sp, #16]
 8006b8a:	e777      	b.n	8006a7c <_dtoa_r+0x9d4>
 8006b8c:	f000 f9c0 	bl	8006f10 <__multadd>
 8006b90:	4629      	mov	r1, r5
 8006b92:	4607      	mov	r7, r0
 8006b94:	2300      	movs	r3, #0
 8006b96:	220a      	movs	r2, #10
 8006b98:	4648      	mov	r0, r9
 8006b9a:	f000 f9b9 	bl	8006f10 <__multadd>
 8006b9e:	4605      	mov	r5, r0
 8006ba0:	e7f0      	b.n	8006b84 <_dtoa_r+0xadc>
 8006ba2:	f1bb 0f00 	cmp.w	fp, #0
 8006ba6:	bfcc      	ite	gt
 8006ba8:	465e      	movgt	r6, fp
 8006baa:	2601      	movle	r6, #1
 8006bac:	2700      	movs	r7, #0
 8006bae:	4456      	add	r6, sl
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	9903      	ldr	r1, [sp, #12]
 8006bb4:	4648      	mov	r0, r9
 8006bb6:	9304      	str	r3, [sp, #16]
 8006bb8:	f000 fb4e 	bl	8007258 <__lshift>
 8006bbc:	4621      	mov	r1, r4
 8006bbe:	9003      	str	r0, [sp, #12]
 8006bc0:	f000 fbb6 	bl	8007330 <__mcmp>
 8006bc4:	2800      	cmp	r0, #0
 8006bc6:	dcb4      	bgt.n	8006b32 <_dtoa_r+0xa8a>
 8006bc8:	d102      	bne.n	8006bd0 <_dtoa_r+0xb28>
 8006bca:	9b04      	ldr	r3, [sp, #16]
 8006bcc:	07db      	lsls	r3, r3, #31
 8006bce:	d4b0      	bmi.n	8006b32 <_dtoa_r+0xa8a>
 8006bd0:	4633      	mov	r3, r6
 8006bd2:	461e      	mov	r6, r3
 8006bd4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006bd8:	2a30      	cmp	r2, #48	@ 0x30
 8006bda:	d0fa      	beq.n	8006bd2 <_dtoa_r+0xb2a>
 8006bdc:	e4b5      	b.n	800654a <_dtoa_r+0x4a2>
 8006bde:	459a      	cmp	sl, r3
 8006be0:	d1a8      	bne.n	8006b34 <_dtoa_r+0xa8c>
 8006be2:	2331      	movs	r3, #49	@ 0x31
 8006be4:	f108 0801 	add.w	r8, r8, #1
 8006be8:	f88a 3000 	strb.w	r3, [sl]
 8006bec:	e4ad      	b.n	800654a <_dtoa_r+0x4a2>
 8006bee:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006bf0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8006c4c <_dtoa_r+0xba4>
 8006bf4:	b11b      	cbz	r3, 8006bfe <_dtoa_r+0xb56>
 8006bf6:	f10a 0308 	add.w	r3, sl, #8
 8006bfa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006bfc:	6013      	str	r3, [r2, #0]
 8006bfe:	4650      	mov	r0, sl
 8006c00:	b017      	add	sp, #92	@ 0x5c
 8006c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c06:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	f77f ae2e 	ble.w	800686a <_dtoa_r+0x7c2>
 8006c0e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c10:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c12:	2001      	movs	r0, #1
 8006c14:	e64d      	b.n	80068b2 <_dtoa_r+0x80a>
 8006c16:	f1bb 0f00 	cmp.w	fp, #0
 8006c1a:	f77f aed9 	ble.w	80069d0 <_dtoa_r+0x928>
 8006c1e:	4656      	mov	r6, sl
 8006c20:	4621      	mov	r1, r4
 8006c22:	9803      	ldr	r0, [sp, #12]
 8006c24:	f7ff f9b7 	bl	8005f96 <quorem>
 8006c28:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8006c2c:	f806 3b01 	strb.w	r3, [r6], #1
 8006c30:	eba6 020a 	sub.w	r2, r6, sl
 8006c34:	4593      	cmp	fp, r2
 8006c36:	ddb4      	ble.n	8006ba2 <_dtoa_r+0xafa>
 8006c38:	2300      	movs	r3, #0
 8006c3a:	220a      	movs	r2, #10
 8006c3c:	4648      	mov	r0, r9
 8006c3e:	9903      	ldr	r1, [sp, #12]
 8006c40:	f000 f966 	bl	8006f10 <__multadd>
 8006c44:	9003      	str	r0, [sp, #12]
 8006c46:	e7eb      	b.n	8006c20 <_dtoa_r+0xb78>
 8006c48:	08007f5a 	.word	0x08007f5a
 8006c4c:	08007ede 	.word	0x08007ede

08006c50 <_free_r>:
 8006c50:	b538      	push	{r3, r4, r5, lr}
 8006c52:	4605      	mov	r5, r0
 8006c54:	2900      	cmp	r1, #0
 8006c56:	d040      	beq.n	8006cda <_free_r+0x8a>
 8006c58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c5c:	1f0c      	subs	r4, r1, #4
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	bfb8      	it	lt
 8006c62:	18e4      	addlt	r4, r4, r3
 8006c64:	f000 f8e6 	bl	8006e34 <__malloc_lock>
 8006c68:	4a1c      	ldr	r2, [pc, #112]	@ (8006cdc <_free_r+0x8c>)
 8006c6a:	6813      	ldr	r3, [r2, #0]
 8006c6c:	b933      	cbnz	r3, 8006c7c <_free_r+0x2c>
 8006c6e:	6063      	str	r3, [r4, #4]
 8006c70:	6014      	str	r4, [r2, #0]
 8006c72:	4628      	mov	r0, r5
 8006c74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c78:	f000 b8e2 	b.w	8006e40 <__malloc_unlock>
 8006c7c:	42a3      	cmp	r3, r4
 8006c7e:	d908      	bls.n	8006c92 <_free_r+0x42>
 8006c80:	6820      	ldr	r0, [r4, #0]
 8006c82:	1821      	adds	r1, r4, r0
 8006c84:	428b      	cmp	r3, r1
 8006c86:	bf01      	itttt	eq
 8006c88:	6819      	ldreq	r1, [r3, #0]
 8006c8a:	685b      	ldreq	r3, [r3, #4]
 8006c8c:	1809      	addeq	r1, r1, r0
 8006c8e:	6021      	streq	r1, [r4, #0]
 8006c90:	e7ed      	b.n	8006c6e <_free_r+0x1e>
 8006c92:	461a      	mov	r2, r3
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	b10b      	cbz	r3, 8006c9c <_free_r+0x4c>
 8006c98:	42a3      	cmp	r3, r4
 8006c9a:	d9fa      	bls.n	8006c92 <_free_r+0x42>
 8006c9c:	6811      	ldr	r1, [r2, #0]
 8006c9e:	1850      	adds	r0, r2, r1
 8006ca0:	42a0      	cmp	r0, r4
 8006ca2:	d10b      	bne.n	8006cbc <_free_r+0x6c>
 8006ca4:	6820      	ldr	r0, [r4, #0]
 8006ca6:	4401      	add	r1, r0
 8006ca8:	1850      	adds	r0, r2, r1
 8006caa:	4283      	cmp	r3, r0
 8006cac:	6011      	str	r1, [r2, #0]
 8006cae:	d1e0      	bne.n	8006c72 <_free_r+0x22>
 8006cb0:	6818      	ldr	r0, [r3, #0]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	4408      	add	r0, r1
 8006cb6:	6010      	str	r0, [r2, #0]
 8006cb8:	6053      	str	r3, [r2, #4]
 8006cba:	e7da      	b.n	8006c72 <_free_r+0x22>
 8006cbc:	d902      	bls.n	8006cc4 <_free_r+0x74>
 8006cbe:	230c      	movs	r3, #12
 8006cc0:	602b      	str	r3, [r5, #0]
 8006cc2:	e7d6      	b.n	8006c72 <_free_r+0x22>
 8006cc4:	6820      	ldr	r0, [r4, #0]
 8006cc6:	1821      	adds	r1, r4, r0
 8006cc8:	428b      	cmp	r3, r1
 8006cca:	bf01      	itttt	eq
 8006ccc:	6819      	ldreq	r1, [r3, #0]
 8006cce:	685b      	ldreq	r3, [r3, #4]
 8006cd0:	1809      	addeq	r1, r1, r0
 8006cd2:	6021      	streq	r1, [r4, #0]
 8006cd4:	6063      	str	r3, [r4, #4]
 8006cd6:	6054      	str	r4, [r2, #4]
 8006cd8:	e7cb      	b.n	8006c72 <_free_r+0x22>
 8006cda:	bd38      	pop	{r3, r4, r5, pc}
 8006cdc:	2000059c 	.word	0x2000059c

08006ce0 <malloc>:
 8006ce0:	4b02      	ldr	r3, [pc, #8]	@ (8006cec <malloc+0xc>)
 8006ce2:	4601      	mov	r1, r0
 8006ce4:	6818      	ldr	r0, [r3, #0]
 8006ce6:	f000 b825 	b.w	8006d34 <_malloc_r>
 8006cea:	bf00      	nop
 8006cec:	20000028 	.word	0x20000028

08006cf0 <sbrk_aligned>:
 8006cf0:	b570      	push	{r4, r5, r6, lr}
 8006cf2:	4e0f      	ldr	r6, [pc, #60]	@ (8006d30 <sbrk_aligned+0x40>)
 8006cf4:	460c      	mov	r4, r1
 8006cf6:	6831      	ldr	r1, [r6, #0]
 8006cf8:	4605      	mov	r5, r0
 8006cfa:	b911      	cbnz	r1, 8006d02 <sbrk_aligned+0x12>
 8006cfc:	f000 fcc8 	bl	8007690 <_sbrk_r>
 8006d00:	6030      	str	r0, [r6, #0]
 8006d02:	4621      	mov	r1, r4
 8006d04:	4628      	mov	r0, r5
 8006d06:	f000 fcc3 	bl	8007690 <_sbrk_r>
 8006d0a:	1c43      	adds	r3, r0, #1
 8006d0c:	d103      	bne.n	8006d16 <sbrk_aligned+0x26>
 8006d0e:	f04f 34ff 	mov.w	r4, #4294967295
 8006d12:	4620      	mov	r0, r4
 8006d14:	bd70      	pop	{r4, r5, r6, pc}
 8006d16:	1cc4      	adds	r4, r0, #3
 8006d18:	f024 0403 	bic.w	r4, r4, #3
 8006d1c:	42a0      	cmp	r0, r4
 8006d1e:	d0f8      	beq.n	8006d12 <sbrk_aligned+0x22>
 8006d20:	1a21      	subs	r1, r4, r0
 8006d22:	4628      	mov	r0, r5
 8006d24:	f000 fcb4 	bl	8007690 <_sbrk_r>
 8006d28:	3001      	adds	r0, #1
 8006d2a:	d1f2      	bne.n	8006d12 <sbrk_aligned+0x22>
 8006d2c:	e7ef      	b.n	8006d0e <sbrk_aligned+0x1e>
 8006d2e:	bf00      	nop
 8006d30:	20000598 	.word	0x20000598

08006d34 <_malloc_r>:
 8006d34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d38:	1ccd      	adds	r5, r1, #3
 8006d3a:	f025 0503 	bic.w	r5, r5, #3
 8006d3e:	3508      	adds	r5, #8
 8006d40:	2d0c      	cmp	r5, #12
 8006d42:	bf38      	it	cc
 8006d44:	250c      	movcc	r5, #12
 8006d46:	2d00      	cmp	r5, #0
 8006d48:	4606      	mov	r6, r0
 8006d4a:	db01      	blt.n	8006d50 <_malloc_r+0x1c>
 8006d4c:	42a9      	cmp	r1, r5
 8006d4e:	d904      	bls.n	8006d5a <_malloc_r+0x26>
 8006d50:	230c      	movs	r3, #12
 8006d52:	6033      	str	r3, [r6, #0]
 8006d54:	2000      	movs	r0, #0
 8006d56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d5a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006e30 <_malloc_r+0xfc>
 8006d5e:	f000 f869 	bl	8006e34 <__malloc_lock>
 8006d62:	f8d8 3000 	ldr.w	r3, [r8]
 8006d66:	461c      	mov	r4, r3
 8006d68:	bb44      	cbnz	r4, 8006dbc <_malloc_r+0x88>
 8006d6a:	4629      	mov	r1, r5
 8006d6c:	4630      	mov	r0, r6
 8006d6e:	f7ff ffbf 	bl	8006cf0 <sbrk_aligned>
 8006d72:	1c43      	adds	r3, r0, #1
 8006d74:	4604      	mov	r4, r0
 8006d76:	d158      	bne.n	8006e2a <_malloc_r+0xf6>
 8006d78:	f8d8 4000 	ldr.w	r4, [r8]
 8006d7c:	4627      	mov	r7, r4
 8006d7e:	2f00      	cmp	r7, #0
 8006d80:	d143      	bne.n	8006e0a <_malloc_r+0xd6>
 8006d82:	2c00      	cmp	r4, #0
 8006d84:	d04b      	beq.n	8006e1e <_malloc_r+0xea>
 8006d86:	6823      	ldr	r3, [r4, #0]
 8006d88:	4639      	mov	r1, r7
 8006d8a:	4630      	mov	r0, r6
 8006d8c:	eb04 0903 	add.w	r9, r4, r3
 8006d90:	f000 fc7e 	bl	8007690 <_sbrk_r>
 8006d94:	4581      	cmp	r9, r0
 8006d96:	d142      	bne.n	8006e1e <_malloc_r+0xea>
 8006d98:	6821      	ldr	r1, [r4, #0]
 8006d9a:	4630      	mov	r0, r6
 8006d9c:	1a6d      	subs	r5, r5, r1
 8006d9e:	4629      	mov	r1, r5
 8006da0:	f7ff ffa6 	bl	8006cf0 <sbrk_aligned>
 8006da4:	3001      	adds	r0, #1
 8006da6:	d03a      	beq.n	8006e1e <_malloc_r+0xea>
 8006da8:	6823      	ldr	r3, [r4, #0]
 8006daa:	442b      	add	r3, r5
 8006dac:	6023      	str	r3, [r4, #0]
 8006dae:	f8d8 3000 	ldr.w	r3, [r8]
 8006db2:	685a      	ldr	r2, [r3, #4]
 8006db4:	bb62      	cbnz	r2, 8006e10 <_malloc_r+0xdc>
 8006db6:	f8c8 7000 	str.w	r7, [r8]
 8006dba:	e00f      	b.n	8006ddc <_malloc_r+0xa8>
 8006dbc:	6822      	ldr	r2, [r4, #0]
 8006dbe:	1b52      	subs	r2, r2, r5
 8006dc0:	d420      	bmi.n	8006e04 <_malloc_r+0xd0>
 8006dc2:	2a0b      	cmp	r2, #11
 8006dc4:	d917      	bls.n	8006df6 <_malloc_r+0xc2>
 8006dc6:	1961      	adds	r1, r4, r5
 8006dc8:	42a3      	cmp	r3, r4
 8006dca:	6025      	str	r5, [r4, #0]
 8006dcc:	bf18      	it	ne
 8006dce:	6059      	strne	r1, [r3, #4]
 8006dd0:	6863      	ldr	r3, [r4, #4]
 8006dd2:	bf08      	it	eq
 8006dd4:	f8c8 1000 	streq.w	r1, [r8]
 8006dd8:	5162      	str	r2, [r4, r5]
 8006dda:	604b      	str	r3, [r1, #4]
 8006ddc:	4630      	mov	r0, r6
 8006dde:	f000 f82f 	bl	8006e40 <__malloc_unlock>
 8006de2:	f104 000b 	add.w	r0, r4, #11
 8006de6:	1d23      	adds	r3, r4, #4
 8006de8:	f020 0007 	bic.w	r0, r0, #7
 8006dec:	1ac2      	subs	r2, r0, r3
 8006dee:	bf1c      	itt	ne
 8006df0:	1a1b      	subne	r3, r3, r0
 8006df2:	50a3      	strne	r3, [r4, r2]
 8006df4:	e7af      	b.n	8006d56 <_malloc_r+0x22>
 8006df6:	6862      	ldr	r2, [r4, #4]
 8006df8:	42a3      	cmp	r3, r4
 8006dfa:	bf0c      	ite	eq
 8006dfc:	f8c8 2000 	streq.w	r2, [r8]
 8006e00:	605a      	strne	r2, [r3, #4]
 8006e02:	e7eb      	b.n	8006ddc <_malloc_r+0xa8>
 8006e04:	4623      	mov	r3, r4
 8006e06:	6864      	ldr	r4, [r4, #4]
 8006e08:	e7ae      	b.n	8006d68 <_malloc_r+0x34>
 8006e0a:	463c      	mov	r4, r7
 8006e0c:	687f      	ldr	r7, [r7, #4]
 8006e0e:	e7b6      	b.n	8006d7e <_malloc_r+0x4a>
 8006e10:	461a      	mov	r2, r3
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	42a3      	cmp	r3, r4
 8006e16:	d1fb      	bne.n	8006e10 <_malloc_r+0xdc>
 8006e18:	2300      	movs	r3, #0
 8006e1a:	6053      	str	r3, [r2, #4]
 8006e1c:	e7de      	b.n	8006ddc <_malloc_r+0xa8>
 8006e1e:	230c      	movs	r3, #12
 8006e20:	4630      	mov	r0, r6
 8006e22:	6033      	str	r3, [r6, #0]
 8006e24:	f000 f80c 	bl	8006e40 <__malloc_unlock>
 8006e28:	e794      	b.n	8006d54 <_malloc_r+0x20>
 8006e2a:	6005      	str	r5, [r0, #0]
 8006e2c:	e7d6      	b.n	8006ddc <_malloc_r+0xa8>
 8006e2e:	bf00      	nop
 8006e30:	2000059c 	.word	0x2000059c

08006e34 <__malloc_lock>:
 8006e34:	4801      	ldr	r0, [pc, #4]	@ (8006e3c <__malloc_lock+0x8>)
 8006e36:	f7ff b89e 	b.w	8005f76 <__retarget_lock_acquire_recursive>
 8006e3a:	bf00      	nop
 8006e3c:	20000594 	.word	0x20000594

08006e40 <__malloc_unlock>:
 8006e40:	4801      	ldr	r0, [pc, #4]	@ (8006e48 <__malloc_unlock+0x8>)
 8006e42:	f7ff b899 	b.w	8005f78 <__retarget_lock_release_recursive>
 8006e46:	bf00      	nop
 8006e48:	20000594 	.word	0x20000594

08006e4c <_Balloc>:
 8006e4c:	b570      	push	{r4, r5, r6, lr}
 8006e4e:	69c6      	ldr	r6, [r0, #28]
 8006e50:	4604      	mov	r4, r0
 8006e52:	460d      	mov	r5, r1
 8006e54:	b976      	cbnz	r6, 8006e74 <_Balloc+0x28>
 8006e56:	2010      	movs	r0, #16
 8006e58:	f7ff ff42 	bl	8006ce0 <malloc>
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	61e0      	str	r0, [r4, #28]
 8006e60:	b920      	cbnz	r0, 8006e6c <_Balloc+0x20>
 8006e62:	216b      	movs	r1, #107	@ 0x6b
 8006e64:	4b17      	ldr	r3, [pc, #92]	@ (8006ec4 <_Balloc+0x78>)
 8006e66:	4818      	ldr	r0, [pc, #96]	@ (8006ec8 <_Balloc+0x7c>)
 8006e68:	f000 fc30 	bl	80076cc <__assert_func>
 8006e6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e70:	6006      	str	r6, [r0, #0]
 8006e72:	60c6      	str	r6, [r0, #12]
 8006e74:	69e6      	ldr	r6, [r4, #28]
 8006e76:	68f3      	ldr	r3, [r6, #12]
 8006e78:	b183      	cbz	r3, 8006e9c <_Balloc+0x50>
 8006e7a:	69e3      	ldr	r3, [r4, #28]
 8006e7c:	68db      	ldr	r3, [r3, #12]
 8006e7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006e82:	b9b8      	cbnz	r0, 8006eb4 <_Balloc+0x68>
 8006e84:	2101      	movs	r1, #1
 8006e86:	fa01 f605 	lsl.w	r6, r1, r5
 8006e8a:	1d72      	adds	r2, r6, #5
 8006e8c:	4620      	mov	r0, r4
 8006e8e:	0092      	lsls	r2, r2, #2
 8006e90:	f000 fc3a 	bl	8007708 <_calloc_r>
 8006e94:	b160      	cbz	r0, 8006eb0 <_Balloc+0x64>
 8006e96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006e9a:	e00e      	b.n	8006eba <_Balloc+0x6e>
 8006e9c:	2221      	movs	r2, #33	@ 0x21
 8006e9e:	2104      	movs	r1, #4
 8006ea0:	4620      	mov	r0, r4
 8006ea2:	f000 fc31 	bl	8007708 <_calloc_r>
 8006ea6:	69e3      	ldr	r3, [r4, #28]
 8006ea8:	60f0      	str	r0, [r6, #12]
 8006eaa:	68db      	ldr	r3, [r3, #12]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d1e4      	bne.n	8006e7a <_Balloc+0x2e>
 8006eb0:	2000      	movs	r0, #0
 8006eb2:	bd70      	pop	{r4, r5, r6, pc}
 8006eb4:	6802      	ldr	r2, [r0, #0]
 8006eb6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006eba:	2300      	movs	r3, #0
 8006ebc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006ec0:	e7f7      	b.n	8006eb2 <_Balloc+0x66>
 8006ec2:	bf00      	nop
 8006ec4:	08007eeb 	.word	0x08007eeb
 8006ec8:	08007f6b 	.word	0x08007f6b

08006ecc <_Bfree>:
 8006ecc:	b570      	push	{r4, r5, r6, lr}
 8006ece:	69c6      	ldr	r6, [r0, #28]
 8006ed0:	4605      	mov	r5, r0
 8006ed2:	460c      	mov	r4, r1
 8006ed4:	b976      	cbnz	r6, 8006ef4 <_Bfree+0x28>
 8006ed6:	2010      	movs	r0, #16
 8006ed8:	f7ff ff02 	bl	8006ce0 <malloc>
 8006edc:	4602      	mov	r2, r0
 8006ede:	61e8      	str	r0, [r5, #28]
 8006ee0:	b920      	cbnz	r0, 8006eec <_Bfree+0x20>
 8006ee2:	218f      	movs	r1, #143	@ 0x8f
 8006ee4:	4b08      	ldr	r3, [pc, #32]	@ (8006f08 <_Bfree+0x3c>)
 8006ee6:	4809      	ldr	r0, [pc, #36]	@ (8006f0c <_Bfree+0x40>)
 8006ee8:	f000 fbf0 	bl	80076cc <__assert_func>
 8006eec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ef0:	6006      	str	r6, [r0, #0]
 8006ef2:	60c6      	str	r6, [r0, #12]
 8006ef4:	b13c      	cbz	r4, 8006f06 <_Bfree+0x3a>
 8006ef6:	69eb      	ldr	r3, [r5, #28]
 8006ef8:	6862      	ldr	r2, [r4, #4]
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006f00:	6021      	str	r1, [r4, #0]
 8006f02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006f06:	bd70      	pop	{r4, r5, r6, pc}
 8006f08:	08007eeb 	.word	0x08007eeb
 8006f0c:	08007f6b 	.word	0x08007f6b

08006f10 <__multadd>:
 8006f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f14:	4607      	mov	r7, r0
 8006f16:	460c      	mov	r4, r1
 8006f18:	461e      	mov	r6, r3
 8006f1a:	2000      	movs	r0, #0
 8006f1c:	690d      	ldr	r5, [r1, #16]
 8006f1e:	f101 0c14 	add.w	ip, r1, #20
 8006f22:	f8dc 3000 	ldr.w	r3, [ip]
 8006f26:	3001      	adds	r0, #1
 8006f28:	b299      	uxth	r1, r3
 8006f2a:	fb02 6101 	mla	r1, r2, r1, r6
 8006f2e:	0c1e      	lsrs	r6, r3, #16
 8006f30:	0c0b      	lsrs	r3, r1, #16
 8006f32:	fb02 3306 	mla	r3, r2, r6, r3
 8006f36:	b289      	uxth	r1, r1
 8006f38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006f3c:	4285      	cmp	r5, r0
 8006f3e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006f42:	f84c 1b04 	str.w	r1, [ip], #4
 8006f46:	dcec      	bgt.n	8006f22 <__multadd+0x12>
 8006f48:	b30e      	cbz	r6, 8006f8e <__multadd+0x7e>
 8006f4a:	68a3      	ldr	r3, [r4, #8]
 8006f4c:	42ab      	cmp	r3, r5
 8006f4e:	dc19      	bgt.n	8006f84 <__multadd+0x74>
 8006f50:	6861      	ldr	r1, [r4, #4]
 8006f52:	4638      	mov	r0, r7
 8006f54:	3101      	adds	r1, #1
 8006f56:	f7ff ff79 	bl	8006e4c <_Balloc>
 8006f5a:	4680      	mov	r8, r0
 8006f5c:	b928      	cbnz	r0, 8006f6a <__multadd+0x5a>
 8006f5e:	4602      	mov	r2, r0
 8006f60:	21ba      	movs	r1, #186	@ 0xba
 8006f62:	4b0c      	ldr	r3, [pc, #48]	@ (8006f94 <__multadd+0x84>)
 8006f64:	480c      	ldr	r0, [pc, #48]	@ (8006f98 <__multadd+0x88>)
 8006f66:	f000 fbb1 	bl	80076cc <__assert_func>
 8006f6a:	6922      	ldr	r2, [r4, #16]
 8006f6c:	f104 010c 	add.w	r1, r4, #12
 8006f70:	3202      	adds	r2, #2
 8006f72:	0092      	lsls	r2, r2, #2
 8006f74:	300c      	adds	r0, #12
 8006f76:	f000 fb9b 	bl	80076b0 <memcpy>
 8006f7a:	4621      	mov	r1, r4
 8006f7c:	4638      	mov	r0, r7
 8006f7e:	f7ff ffa5 	bl	8006ecc <_Bfree>
 8006f82:	4644      	mov	r4, r8
 8006f84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006f88:	3501      	adds	r5, #1
 8006f8a:	615e      	str	r6, [r3, #20]
 8006f8c:	6125      	str	r5, [r4, #16]
 8006f8e:	4620      	mov	r0, r4
 8006f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f94:	08007f5a 	.word	0x08007f5a
 8006f98:	08007f6b 	.word	0x08007f6b

08006f9c <__hi0bits>:
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006fa2:	bf3a      	itte	cc
 8006fa4:	0403      	lslcc	r3, r0, #16
 8006fa6:	2010      	movcc	r0, #16
 8006fa8:	2000      	movcs	r0, #0
 8006faa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006fae:	bf3c      	itt	cc
 8006fb0:	021b      	lslcc	r3, r3, #8
 8006fb2:	3008      	addcc	r0, #8
 8006fb4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006fb8:	bf3c      	itt	cc
 8006fba:	011b      	lslcc	r3, r3, #4
 8006fbc:	3004      	addcc	r0, #4
 8006fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fc2:	bf3c      	itt	cc
 8006fc4:	009b      	lslcc	r3, r3, #2
 8006fc6:	3002      	addcc	r0, #2
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	db05      	blt.n	8006fd8 <__hi0bits+0x3c>
 8006fcc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006fd0:	f100 0001 	add.w	r0, r0, #1
 8006fd4:	bf08      	it	eq
 8006fd6:	2020      	moveq	r0, #32
 8006fd8:	4770      	bx	lr

08006fda <__lo0bits>:
 8006fda:	6803      	ldr	r3, [r0, #0]
 8006fdc:	4602      	mov	r2, r0
 8006fde:	f013 0007 	ands.w	r0, r3, #7
 8006fe2:	d00b      	beq.n	8006ffc <__lo0bits+0x22>
 8006fe4:	07d9      	lsls	r1, r3, #31
 8006fe6:	d421      	bmi.n	800702c <__lo0bits+0x52>
 8006fe8:	0798      	lsls	r0, r3, #30
 8006fea:	bf49      	itett	mi
 8006fec:	085b      	lsrmi	r3, r3, #1
 8006fee:	089b      	lsrpl	r3, r3, #2
 8006ff0:	2001      	movmi	r0, #1
 8006ff2:	6013      	strmi	r3, [r2, #0]
 8006ff4:	bf5c      	itt	pl
 8006ff6:	2002      	movpl	r0, #2
 8006ff8:	6013      	strpl	r3, [r2, #0]
 8006ffa:	4770      	bx	lr
 8006ffc:	b299      	uxth	r1, r3
 8006ffe:	b909      	cbnz	r1, 8007004 <__lo0bits+0x2a>
 8007000:	2010      	movs	r0, #16
 8007002:	0c1b      	lsrs	r3, r3, #16
 8007004:	b2d9      	uxtb	r1, r3
 8007006:	b909      	cbnz	r1, 800700c <__lo0bits+0x32>
 8007008:	3008      	adds	r0, #8
 800700a:	0a1b      	lsrs	r3, r3, #8
 800700c:	0719      	lsls	r1, r3, #28
 800700e:	bf04      	itt	eq
 8007010:	091b      	lsreq	r3, r3, #4
 8007012:	3004      	addeq	r0, #4
 8007014:	0799      	lsls	r1, r3, #30
 8007016:	bf04      	itt	eq
 8007018:	089b      	lsreq	r3, r3, #2
 800701a:	3002      	addeq	r0, #2
 800701c:	07d9      	lsls	r1, r3, #31
 800701e:	d403      	bmi.n	8007028 <__lo0bits+0x4e>
 8007020:	085b      	lsrs	r3, r3, #1
 8007022:	f100 0001 	add.w	r0, r0, #1
 8007026:	d003      	beq.n	8007030 <__lo0bits+0x56>
 8007028:	6013      	str	r3, [r2, #0]
 800702a:	4770      	bx	lr
 800702c:	2000      	movs	r0, #0
 800702e:	4770      	bx	lr
 8007030:	2020      	movs	r0, #32
 8007032:	4770      	bx	lr

08007034 <__i2b>:
 8007034:	b510      	push	{r4, lr}
 8007036:	460c      	mov	r4, r1
 8007038:	2101      	movs	r1, #1
 800703a:	f7ff ff07 	bl	8006e4c <_Balloc>
 800703e:	4602      	mov	r2, r0
 8007040:	b928      	cbnz	r0, 800704e <__i2b+0x1a>
 8007042:	f240 1145 	movw	r1, #325	@ 0x145
 8007046:	4b04      	ldr	r3, [pc, #16]	@ (8007058 <__i2b+0x24>)
 8007048:	4804      	ldr	r0, [pc, #16]	@ (800705c <__i2b+0x28>)
 800704a:	f000 fb3f 	bl	80076cc <__assert_func>
 800704e:	2301      	movs	r3, #1
 8007050:	6144      	str	r4, [r0, #20]
 8007052:	6103      	str	r3, [r0, #16]
 8007054:	bd10      	pop	{r4, pc}
 8007056:	bf00      	nop
 8007058:	08007f5a 	.word	0x08007f5a
 800705c:	08007f6b 	.word	0x08007f6b

08007060 <__multiply>:
 8007060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007064:	4617      	mov	r7, r2
 8007066:	690a      	ldr	r2, [r1, #16]
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	4689      	mov	r9, r1
 800706c:	429a      	cmp	r2, r3
 800706e:	bfa2      	ittt	ge
 8007070:	463b      	movge	r3, r7
 8007072:	460f      	movge	r7, r1
 8007074:	4699      	movge	r9, r3
 8007076:	693d      	ldr	r5, [r7, #16]
 8007078:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	6879      	ldr	r1, [r7, #4]
 8007080:	eb05 060a 	add.w	r6, r5, sl
 8007084:	42b3      	cmp	r3, r6
 8007086:	b085      	sub	sp, #20
 8007088:	bfb8      	it	lt
 800708a:	3101      	addlt	r1, #1
 800708c:	f7ff fede 	bl	8006e4c <_Balloc>
 8007090:	b930      	cbnz	r0, 80070a0 <__multiply+0x40>
 8007092:	4602      	mov	r2, r0
 8007094:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007098:	4b40      	ldr	r3, [pc, #256]	@ (800719c <__multiply+0x13c>)
 800709a:	4841      	ldr	r0, [pc, #260]	@ (80071a0 <__multiply+0x140>)
 800709c:	f000 fb16 	bl	80076cc <__assert_func>
 80070a0:	f100 0414 	add.w	r4, r0, #20
 80070a4:	4623      	mov	r3, r4
 80070a6:	2200      	movs	r2, #0
 80070a8:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80070ac:	4573      	cmp	r3, lr
 80070ae:	d320      	bcc.n	80070f2 <__multiply+0x92>
 80070b0:	f107 0814 	add.w	r8, r7, #20
 80070b4:	f109 0114 	add.w	r1, r9, #20
 80070b8:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80070bc:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80070c0:	9302      	str	r3, [sp, #8]
 80070c2:	1beb      	subs	r3, r5, r7
 80070c4:	3b15      	subs	r3, #21
 80070c6:	f023 0303 	bic.w	r3, r3, #3
 80070ca:	3304      	adds	r3, #4
 80070cc:	3715      	adds	r7, #21
 80070ce:	42bd      	cmp	r5, r7
 80070d0:	bf38      	it	cc
 80070d2:	2304      	movcc	r3, #4
 80070d4:	9301      	str	r3, [sp, #4]
 80070d6:	9b02      	ldr	r3, [sp, #8]
 80070d8:	9103      	str	r1, [sp, #12]
 80070da:	428b      	cmp	r3, r1
 80070dc:	d80c      	bhi.n	80070f8 <__multiply+0x98>
 80070de:	2e00      	cmp	r6, #0
 80070e0:	dd03      	ble.n	80070ea <__multiply+0x8a>
 80070e2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d055      	beq.n	8007196 <__multiply+0x136>
 80070ea:	6106      	str	r6, [r0, #16]
 80070ec:	b005      	add	sp, #20
 80070ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070f2:	f843 2b04 	str.w	r2, [r3], #4
 80070f6:	e7d9      	b.n	80070ac <__multiply+0x4c>
 80070f8:	f8b1 a000 	ldrh.w	sl, [r1]
 80070fc:	f1ba 0f00 	cmp.w	sl, #0
 8007100:	d01f      	beq.n	8007142 <__multiply+0xe2>
 8007102:	46c4      	mov	ip, r8
 8007104:	46a1      	mov	r9, r4
 8007106:	2700      	movs	r7, #0
 8007108:	f85c 2b04 	ldr.w	r2, [ip], #4
 800710c:	f8d9 3000 	ldr.w	r3, [r9]
 8007110:	fa1f fb82 	uxth.w	fp, r2
 8007114:	b29b      	uxth	r3, r3
 8007116:	fb0a 330b 	mla	r3, sl, fp, r3
 800711a:	443b      	add	r3, r7
 800711c:	f8d9 7000 	ldr.w	r7, [r9]
 8007120:	0c12      	lsrs	r2, r2, #16
 8007122:	0c3f      	lsrs	r7, r7, #16
 8007124:	fb0a 7202 	mla	r2, sl, r2, r7
 8007128:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800712c:	b29b      	uxth	r3, r3
 800712e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007132:	4565      	cmp	r5, ip
 8007134:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007138:	f849 3b04 	str.w	r3, [r9], #4
 800713c:	d8e4      	bhi.n	8007108 <__multiply+0xa8>
 800713e:	9b01      	ldr	r3, [sp, #4]
 8007140:	50e7      	str	r7, [r4, r3]
 8007142:	9b03      	ldr	r3, [sp, #12]
 8007144:	3104      	adds	r1, #4
 8007146:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800714a:	f1b9 0f00 	cmp.w	r9, #0
 800714e:	d020      	beq.n	8007192 <__multiply+0x132>
 8007150:	4647      	mov	r7, r8
 8007152:	46a4      	mov	ip, r4
 8007154:	f04f 0a00 	mov.w	sl, #0
 8007158:	6823      	ldr	r3, [r4, #0]
 800715a:	f8b7 b000 	ldrh.w	fp, [r7]
 800715e:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007162:	b29b      	uxth	r3, r3
 8007164:	fb09 220b 	mla	r2, r9, fp, r2
 8007168:	4452      	add	r2, sl
 800716a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800716e:	f84c 3b04 	str.w	r3, [ip], #4
 8007172:	f857 3b04 	ldr.w	r3, [r7], #4
 8007176:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800717a:	f8bc 3000 	ldrh.w	r3, [ip]
 800717e:	42bd      	cmp	r5, r7
 8007180:	fb09 330a 	mla	r3, r9, sl, r3
 8007184:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007188:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800718c:	d8e5      	bhi.n	800715a <__multiply+0xfa>
 800718e:	9a01      	ldr	r2, [sp, #4]
 8007190:	50a3      	str	r3, [r4, r2]
 8007192:	3404      	adds	r4, #4
 8007194:	e79f      	b.n	80070d6 <__multiply+0x76>
 8007196:	3e01      	subs	r6, #1
 8007198:	e7a1      	b.n	80070de <__multiply+0x7e>
 800719a:	bf00      	nop
 800719c:	08007f5a 	.word	0x08007f5a
 80071a0:	08007f6b 	.word	0x08007f6b

080071a4 <__pow5mult>:
 80071a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071a8:	4615      	mov	r5, r2
 80071aa:	f012 0203 	ands.w	r2, r2, #3
 80071ae:	4607      	mov	r7, r0
 80071b0:	460e      	mov	r6, r1
 80071b2:	d007      	beq.n	80071c4 <__pow5mult+0x20>
 80071b4:	4c25      	ldr	r4, [pc, #148]	@ (800724c <__pow5mult+0xa8>)
 80071b6:	3a01      	subs	r2, #1
 80071b8:	2300      	movs	r3, #0
 80071ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80071be:	f7ff fea7 	bl	8006f10 <__multadd>
 80071c2:	4606      	mov	r6, r0
 80071c4:	10ad      	asrs	r5, r5, #2
 80071c6:	d03d      	beq.n	8007244 <__pow5mult+0xa0>
 80071c8:	69fc      	ldr	r4, [r7, #28]
 80071ca:	b97c      	cbnz	r4, 80071ec <__pow5mult+0x48>
 80071cc:	2010      	movs	r0, #16
 80071ce:	f7ff fd87 	bl	8006ce0 <malloc>
 80071d2:	4602      	mov	r2, r0
 80071d4:	61f8      	str	r0, [r7, #28]
 80071d6:	b928      	cbnz	r0, 80071e4 <__pow5mult+0x40>
 80071d8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80071dc:	4b1c      	ldr	r3, [pc, #112]	@ (8007250 <__pow5mult+0xac>)
 80071de:	481d      	ldr	r0, [pc, #116]	@ (8007254 <__pow5mult+0xb0>)
 80071e0:	f000 fa74 	bl	80076cc <__assert_func>
 80071e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80071e8:	6004      	str	r4, [r0, #0]
 80071ea:	60c4      	str	r4, [r0, #12]
 80071ec:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80071f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80071f4:	b94c      	cbnz	r4, 800720a <__pow5mult+0x66>
 80071f6:	f240 2171 	movw	r1, #625	@ 0x271
 80071fa:	4638      	mov	r0, r7
 80071fc:	f7ff ff1a 	bl	8007034 <__i2b>
 8007200:	2300      	movs	r3, #0
 8007202:	4604      	mov	r4, r0
 8007204:	f8c8 0008 	str.w	r0, [r8, #8]
 8007208:	6003      	str	r3, [r0, #0]
 800720a:	f04f 0900 	mov.w	r9, #0
 800720e:	07eb      	lsls	r3, r5, #31
 8007210:	d50a      	bpl.n	8007228 <__pow5mult+0x84>
 8007212:	4631      	mov	r1, r6
 8007214:	4622      	mov	r2, r4
 8007216:	4638      	mov	r0, r7
 8007218:	f7ff ff22 	bl	8007060 <__multiply>
 800721c:	4680      	mov	r8, r0
 800721e:	4631      	mov	r1, r6
 8007220:	4638      	mov	r0, r7
 8007222:	f7ff fe53 	bl	8006ecc <_Bfree>
 8007226:	4646      	mov	r6, r8
 8007228:	106d      	asrs	r5, r5, #1
 800722a:	d00b      	beq.n	8007244 <__pow5mult+0xa0>
 800722c:	6820      	ldr	r0, [r4, #0]
 800722e:	b938      	cbnz	r0, 8007240 <__pow5mult+0x9c>
 8007230:	4622      	mov	r2, r4
 8007232:	4621      	mov	r1, r4
 8007234:	4638      	mov	r0, r7
 8007236:	f7ff ff13 	bl	8007060 <__multiply>
 800723a:	6020      	str	r0, [r4, #0]
 800723c:	f8c0 9000 	str.w	r9, [r0]
 8007240:	4604      	mov	r4, r0
 8007242:	e7e4      	b.n	800720e <__pow5mult+0x6a>
 8007244:	4630      	mov	r0, r6
 8007246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800724a:	bf00      	nop
 800724c:	0800801c 	.word	0x0800801c
 8007250:	08007eeb 	.word	0x08007eeb
 8007254:	08007f6b 	.word	0x08007f6b

08007258 <__lshift>:
 8007258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800725c:	460c      	mov	r4, r1
 800725e:	4607      	mov	r7, r0
 8007260:	4691      	mov	r9, r2
 8007262:	6923      	ldr	r3, [r4, #16]
 8007264:	6849      	ldr	r1, [r1, #4]
 8007266:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800726a:	68a3      	ldr	r3, [r4, #8]
 800726c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007270:	f108 0601 	add.w	r6, r8, #1
 8007274:	42b3      	cmp	r3, r6
 8007276:	db0b      	blt.n	8007290 <__lshift+0x38>
 8007278:	4638      	mov	r0, r7
 800727a:	f7ff fde7 	bl	8006e4c <_Balloc>
 800727e:	4605      	mov	r5, r0
 8007280:	b948      	cbnz	r0, 8007296 <__lshift+0x3e>
 8007282:	4602      	mov	r2, r0
 8007284:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007288:	4b27      	ldr	r3, [pc, #156]	@ (8007328 <__lshift+0xd0>)
 800728a:	4828      	ldr	r0, [pc, #160]	@ (800732c <__lshift+0xd4>)
 800728c:	f000 fa1e 	bl	80076cc <__assert_func>
 8007290:	3101      	adds	r1, #1
 8007292:	005b      	lsls	r3, r3, #1
 8007294:	e7ee      	b.n	8007274 <__lshift+0x1c>
 8007296:	2300      	movs	r3, #0
 8007298:	f100 0114 	add.w	r1, r0, #20
 800729c:	f100 0210 	add.w	r2, r0, #16
 80072a0:	4618      	mov	r0, r3
 80072a2:	4553      	cmp	r3, sl
 80072a4:	db33      	blt.n	800730e <__lshift+0xb6>
 80072a6:	6920      	ldr	r0, [r4, #16]
 80072a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80072ac:	f104 0314 	add.w	r3, r4, #20
 80072b0:	f019 091f 	ands.w	r9, r9, #31
 80072b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80072b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80072bc:	d02b      	beq.n	8007316 <__lshift+0xbe>
 80072be:	468a      	mov	sl, r1
 80072c0:	2200      	movs	r2, #0
 80072c2:	f1c9 0e20 	rsb	lr, r9, #32
 80072c6:	6818      	ldr	r0, [r3, #0]
 80072c8:	fa00 f009 	lsl.w	r0, r0, r9
 80072cc:	4310      	orrs	r0, r2
 80072ce:	f84a 0b04 	str.w	r0, [sl], #4
 80072d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80072d6:	459c      	cmp	ip, r3
 80072d8:	fa22 f20e 	lsr.w	r2, r2, lr
 80072dc:	d8f3      	bhi.n	80072c6 <__lshift+0x6e>
 80072de:	ebac 0304 	sub.w	r3, ip, r4
 80072e2:	3b15      	subs	r3, #21
 80072e4:	f023 0303 	bic.w	r3, r3, #3
 80072e8:	3304      	adds	r3, #4
 80072ea:	f104 0015 	add.w	r0, r4, #21
 80072ee:	4560      	cmp	r0, ip
 80072f0:	bf88      	it	hi
 80072f2:	2304      	movhi	r3, #4
 80072f4:	50ca      	str	r2, [r1, r3]
 80072f6:	b10a      	cbz	r2, 80072fc <__lshift+0xa4>
 80072f8:	f108 0602 	add.w	r6, r8, #2
 80072fc:	3e01      	subs	r6, #1
 80072fe:	4638      	mov	r0, r7
 8007300:	4621      	mov	r1, r4
 8007302:	612e      	str	r6, [r5, #16]
 8007304:	f7ff fde2 	bl	8006ecc <_Bfree>
 8007308:	4628      	mov	r0, r5
 800730a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800730e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007312:	3301      	adds	r3, #1
 8007314:	e7c5      	b.n	80072a2 <__lshift+0x4a>
 8007316:	3904      	subs	r1, #4
 8007318:	f853 2b04 	ldr.w	r2, [r3], #4
 800731c:	459c      	cmp	ip, r3
 800731e:	f841 2f04 	str.w	r2, [r1, #4]!
 8007322:	d8f9      	bhi.n	8007318 <__lshift+0xc0>
 8007324:	e7ea      	b.n	80072fc <__lshift+0xa4>
 8007326:	bf00      	nop
 8007328:	08007f5a 	.word	0x08007f5a
 800732c:	08007f6b 	.word	0x08007f6b

08007330 <__mcmp>:
 8007330:	4603      	mov	r3, r0
 8007332:	690a      	ldr	r2, [r1, #16]
 8007334:	6900      	ldr	r0, [r0, #16]
 8007336:	b530      	push	{r4, r5, lr}
 8007338:	1a80      	subs	r0, r0, r2
 800733a:	d10e      	bne.n	800735a <__mcmp+0x2a>
 800733c:	3314      	adds	r3, #20
 800733e:	3114      	adds	r1, #20
 8007340:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007344:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007348:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800734c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007350:	4295      	cmp	r5, r2
 8007352:	d003      	beq.n	800735c <__mcmp+0x2c>
 8007354:	d205      	bcs.n	8007362 <__mcmp+0x32>
 8007356:	f04f 30ff 	mov.w	r0, #4294967295
 800735a:	bd30      	pop	{r4, r5, pc}
 800735c:	42a3      	cmp	r3, r4
 800735e:	d3f3      	bcc.n	8007348 <__mcmp+0x18>
 8007360:	e7fb      	b.n	800735a <__mcmp+0x2a>
 8007362:	2001      	movs	r0, #1
 8007364:	e7f9      	b.n	800735a <__mcmp+0x2a>
	...

08007368 <__mdiff>:
 8007368:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800736c:	4689      	mov	r9, r1
 800736e:	4606      	mov	r6, r0
 8007370:	4611      	mov	r1, r2
 8007372:	4648      	mov	r0, r9
 8007374:	4614      	mov	r4, r2
 8007376:	f7ff ffdb 	bl	8007330 <__mcmp>
 800737a:	1e05      	subs	r5, r0, #0
 800737c:	d112      	bne.n	80073a4 <__mdiff+0x3c>
 800737e:	4629      	mov	r1, r5
 8007380:	4630      	mov	r0, r6
 8007382:	f7ff fd63 	bl	8006e4c <_Balloc>
 8007386:	4602      	mov	r2, r0
 8007388:	b928      	cbnz	r0, 8007396 <__mdiff+0x2e>
 800738a:	f240 2137 	movw	r1, #567	@ 0x237
 800738e:	4b3e      	ldr	r3, [pc, #248]	@ (8007488 <__mdiff+0x120>)
 8007390:	483e      	ldr	r0, [pc, #248]	@ (800748c <__mdiff+0x124>)
 8007392:	f000 f99b 	bl	80076cc <__assert_func>
 8007396:	2301      	movs	r3, #1
 8007398:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800739c:	4610      	mov	r0, r2
 800739e:	b003      	add	sp, #12
 80073a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073a4:	bfbc      	itt	lt
 80073a6:	464b      	movlt	r3, r9
 80073a8:	46a1      	movlt	r9, r4
 80073aa:	4630      	mov	r0, r6
 80073ac:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80073b0:	bfba      	itte	lt
 80073b2:	461c      	movlt	r4, r3
 80073b4:	2501      	movlt	r5, #1
 80073b6:	2500      	movge	r5, #0
 80073b8:	f7ff fd48 	bl	8006e4c <_Balloc>
 80073bc:	4602      	mov	r2, r0
 80073be:	b918      	cbnz	r0, 80073c8 <__mdiff+0x60>
 80073c0:	f240 2145 	movw	r1, #581	@ 0x245
 80073c4:	4b30      	ldr	r3, [pc, #192]	@ (8007488 <__mdiff+0x120>)
 80073c6:	e7e3      	b.n	8007390 <__mdiff+0x28>
 80073c8:	f100 0b14 	add.w	fp, r0, #20
 80073cc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80073d0:	f109 0310 	add.w	r3, r9, #16
 80073d4:	60c5      	str	r5, [r0, #12]
 80073d6:	f04f 0c00 	mov.w	ip, #0
 80073da:	f109 0514 	add.w	r5, r9, #20
 80073de:	46d9      	mov	r9, fp
 80073e0:	6926      	ldr	r6, [r4, #16]
 80073e2:	f104 0e14 	add.w	lr, r4, #20
 80073e6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80073ea:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80073ee:	9301      	str	r3, [sp, #4]
 80073f0:	9b01      	ldr	r3, [sp, #4]
 80073f2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80073f6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80073fa:	b281      	uxth	r1, r0
 80073fc:	9301      	str	r3, [sp, #4]
 80073fe:	fa1f f38a 	uxth.w	r3, sl
 8007402:	1a5b      	subs	r3, r3, r1
 8007404:	0c00      	lsrs	r0, r0, #16
 8007406:	4463      	add	r3, ip
 8007408:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800740c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007410:	b29b      	uxth	r3, r3
 8007412:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007416:	4576      	cmp	r6, lr
 8007418:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800741c:	f849 3b04 	str.w	r3, [r9], #4
 8007420:	d8e6      	bhi.n	80073f0 <__mdiff+0x88>
 8007422:	1b33      	subs	r3, r6, r4
 8007424:	3b15      	subs	r3, #21
 8007426:	f023 0303 	bic.w	r3, r3, #3
 800742a:	3415      	adds	r4, #21
 800742c:	3304      	adds	r3, #4
 800742e:	42a6      	cmp	r6, r4
 8007430:	bf38      	it	cc
 8007432:	2304      	movcc	r3, #4
 8007434:	441d      	add	r5, r3
 8007436:	445b      	add	r3, fp
 8007438:	461e      	mov	r6, r3
 800743a:	462c      	mov	r4, r5
 800743c:	4544      	cmp	r4, r8
 800743e:	d30e      	bcc.n	800745e <__mdiff+0xf6>
 8007440:	f108 0103 	add.w	r1, r8, #3
 8007444:	1b49      	subs	r1, r1, r5
 8007446:	f021 0103 	bic.w	r1, r1, #3
 800744a:	3d03      	subs	r5, #3
 800744c:	45a8      	cmp	r8, r5
 800744e:	bf38      	it	cc
 8007450:	2100      	movcc	r1, #0
 8007452:	440b      	add	r3, r1
 8007454:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007458:	b199      	cbz	r1, 8007482 <__mdiff+0x11a>
 800745a:	6117      	str	r7, [r2, #16]
 800745c:	e79e      	b.n	800739c <__mdiff+0x34>
 800745e:	46e6      	mov	lr, ip
 8007460:	f854 1b04 	ldr.w	r1, [r4], #4
 8007464:	fa1f fc81 	uxth.w	ip, r1
 8007468:	44f4      	add	ip, lr
 800746a:	0c08      	lsrs	r0, r1, #16
 800746c:	4471      	add	r1, lr
 800746e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007472:	b289      	uxth	r1, r1
 8007474:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007478:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800747c:	f846 1b04 	str.w	r1, [r6], #4
 8007480:	e7dc      	b.n	800743c <__mdiff+0xd4>
 8007482:	3f01      	subs	r7, #1
 8007484:	e7e6      	b.n	8007454 <__mdiff+0xec>
 8007486:	bf00      	nop
 8007488:	08007f5a 	.word	0x08007f5a
 800748c:	08007f6b 	.word	0x08007f6b

08007490 <__d2b>:
 8007490:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007494:	2101      	movs	r1, #1
 8007496:	4690      	mov	r8, r2
 8007498:	4699      	mov	r9, r3
 800749a:	9e08      	ldr	r6, [sp, #32]
 800749c:	f7ff fcd6 	bl	8006e4c <_Balloc>
 80074a0:	4604      	mov	r4, r0
 80074a2:	b930      	cbnz	r0, 80074b2 <__d2b+0x22>
 80074a4:	4602      	mov	r2, r0
 80074a6:	f240 310f 	movw	r1, #783	@ 0x30f
 80074aa:	4b23      	ldr	r3, [pc, #140]	@ (8007538 <__d2b+0xa8>)
 80074ac:	4823      	ldr	r0, [pc, #140]	@ (800753c <__d2b+0xac>)
 80074ae:	f000 f90d 	bl	80076cc <__assert_func>
 80074b2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80074b6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80074ba:	b10d      	cbz	r5, 80074c0 <__d2b+0x30>
 80074bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80074c0:	9301      	str	r3, [sp, #4]
 80074c2:	f1b8 0300 	subs.w	r3, r8, #0
 80074c6:	d024      	beq.n	8007512 <__d2b+0x82>
 80074c8:	4668      	mov	r0, sp
 80074ca:	9300      	str	r3, [sp, #0]
 80074cc:	f7ff fd85 	bl	8006fda <__lo0bits>
 80074d0:	e9dd 1200 	ldrd	r1, r2, [sp]
 80074d4:	b1d8      	cbz	r0, 800750e <__d2b+0x7e>
 80074d6:	f1c0 0320 	rsb	r3, r0, #32
 80074da:	fa02 f303 	lsl.w	r3, r2, r3
 80074de:	430b      	orrs	r3, r1
 80074e0:	40c2      	lsrs	r2, r0
 80074e2:	6163      	str	r3, [r4, #20]
 80074e4:	9201      	str	r2, [sp, #4]
 80074e6:	9b01      	ldr	r3, [sp, #4]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	bf0c      	ite	eq
 80074ec:	2201      	moveq	r2, #1
 80074ee:	2202      	movne	r2, #2
 80074f0:	61a3      	str	r3, [r4, #24]
 80074f2:	6122      	str	r2, [r4, #16]
 80074f4:	b1ad      	cbz	r5, 8007522 <__d2b+0x92>
 80074f6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80074fa:	4405      	add	r5, r0
 80074fc:	6035      	str	r5, [r6, #0]
 80074fe:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007502:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007504:	6018      	str	r0, [r3, #0]
 8007506:	4620      	mov	r0, r4
 8007508:	b002      	add	sp, #8
 800750a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800750e:	6161      	str	r1, [r4, #20]
 8007510:	e7e9      	b.n	80074e6 <__d2b+0x56>
 8007512:	a801      	add	r0, sp, #4
 8007514:	f7ff fd61 	bl	8006fda <__lo0bits>
 8007518:	9b01      	ldr	r3, [sp, #4]
 800751a:	2201      	movs	r2, #1
 800751c:	6163      	str	r3, [r4, #20]
 800751e:	3020      	adds	r0, #32
 8007520:	e7e7      	b.n	80074f2 <__d2b+0x62>
 8007522:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007526:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800752a:	6030      	str	r0, [r6, #0]
 800752c:	6918      	ldr	r0, [r3, #16]
 800752e:	f7ff fd35 	bl	8006f9c <__hi0bits>
 8007532:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007536:	e7e4      	b.n	8007502 <__d2b+0x72>
 8007538:	08007f5a 	.word	0x08007f5a
 800753c:	08007f6b 	.word	0x08007f6b

08007540 <__sflush_r>:
 8007540:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007546:	0716      	lsls	r6, r2, #28
 8007548:	4605      	mov	r5, r0
 800754a:	460c      	mov	r4, r1
 800754c:	d454      	bmi.n	80075f8 <__sflush_r+0xb8>
 800754e:	684b      	ldr	r3, [r1, #4]
 8007550:	2b00      	cmp	r3, #0
 8007552:	dc02      	bgt.n	800755a <__sflush_r+0x1a>
 8007554:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007556:	2b00      	cmp	r3, #0
 8007558:	dd48      	ble.n	80075ec <__sflush_r+0xac>
 800755a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800755c:	2e00      	cmp	r6, #0
 800755e:	d045      	beq.n	80075ec <__sflush_r+0xac>
 8007560:	2300      	movs	r3, #0
 8007562:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007566:	682f      	ldr	r7, [r5, #0]
 8007568:	6a21      	ldr	r1, [r4, #32]
 800756a:	602b      	str	r3, [r5, #0]
 800756c:	d030      	beq.n	80075d0 <__sflush_r+0x90>
 800756e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007570:	89a3      	ldrh	r3, [r4, #12]
 8007572:	0759      	lsls	r1, r3, #29
 8007574:	d505      	bpl.n	8007582 <__sflush_r+0x42>
 8007576:	6863      	ldr	r3, [r4, #4]
 8007578:	1ad2      	subs	r2, r2, r3
 800757a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800757c:	b10b      	cbz	r3, 8007582 <__sflush_r+0x42>
 800757e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007580:	1ad2      	subs	r2, r2, r3
 8007582:	2300      	movs	r3, #0
 8007584:	4628      	mov	r0, r5
 8007586:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007588:	6a21      	ldr	r1, [r4, #32]
 800758a:	47b0      	blx	r6
 800758c:	1c43      	adds	r3, r0, #1
 800758e:	89a3      	ldrh	r3, [r4, #12]
 8007590:	d106      	bne.n	80075a0 <__sflush_r+0x60>
 8007592:	6829      	ldr	r1, [r5, #0]
 8007594:	291d      	cmp	r1, #29
 8007596:	d82b      	bhi.n	80075f0 <__sflush_r+0xb0>
 8007598:	4a28      	ldr	r2, [pc, #160]	@ (800763c <__sflush_r+0xfc>)
 800759a:	40ca      	lsrs	r2, r1
 800759c:	07d6      	lsls	r6, r2, #31
 800759e:	d527      	bpl.n	80075f0 <__sflush_r+0xb0>
 80075a0:	2200      	movs	r2, #0
 80075a2:	6062      	str	r2, [r4, #4]
 80075a4:	6922      	ldr	r2, [r4, #16]
 80075a6:	04d9      	lsls	r1, r3, #19
 80075a8:	6022      	str	r2, [r4, #0]
 80075aa:	d504      	bpl.n	80075b6 <__sflush_r+0x76>
 80075ac:	1c42      	adds	r2, r0, #1
 80075ae:	d101      	bne.n	80075b4 <__sflush_r+0x74>
 80075b0:	682b      	ldr	r3, [r5, #0]
 80075b2:	b903      	cbnz	r3, 80075b6 <__sflush_r+0x76>
 80075b4:	6560      	str	r0, [r4, #84]	@ 0x54
 80075b6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80075b8:	602f      	str	r7, [r5, #0]
 80075ba:	b1b9      	cbz	r1, 80075ec <__sflush_r+0xac>
 80075bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80075c0:	4299      	cmp	r1, r3
 80075c2:	d002      	beq.n	80075ca <__sflush_r+0x8a>
 80075c4:	4628      	mov	r0, r5
 80075c6:	f7ff fb43 	bl	8006c50 <_free_r>
 80075ca:	2300      	movs	r3, #0
 80075cc:	6363      	str	r3, [r4, #52]	@ 0x34
 80075ce:	e00d      	b.n	80075ec <__sflush_r+0xac>
 80075d0:	2301      	movs	r3, #1
 80075d2:	4628      	mov	r0, r5
 80075d4:	47b0      	blx	r6
 80075d6:	4602      	mov	r2, r0
 80075d8:	1c50      	adds	r0, r2, #1
 80075da:	d1c9      	bne.n	8007570 <__sflush_r+0x30>
 80075dc:	682b      	ldr	r3, [r5, #0]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d0c6      	beq.n	8007570 <__sflush_r+0x30>
 80075e2:	2b1d      	cmp	r3, #29
 80075e4:	d001      	beq.n	80075ea <__sflush_r+0xaa>
 80075e6:	2b16      	cmp	r3, #22
 80075e8:	d11d      	bne.n	8007626 <__sflush_r+0xe6>
 80075ea:	602f      	str	r7, [r5, #0]
 80075ec:	2000      	movs	r0, #0
 80075ee:	e021      	b.n	8007634 <__sflush_r+0xf4>
 80075f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075f4:	b21b      	sxth	r3, r3
 80075f6:	e01a      	b.n	800762e <__sflush_r+0xee>
 80075f8:	690f      	ldr	r7, [r1, #16]
 80075fa:	2f00      	cmp	r7, #0
 80075fc:	d0f6      	beq.n	80075ec <__sflush_r+0xac>
 80075fe:	0793      	lsls	r3, r2, #30
 8007600:	bf18      	it	ne
 8007602:	2300      	movne	r3, #0
 8007604:	680e      	ldr	r6, [r1, #0]
 8007606:	bf08      	it	eq
 8007608:	694b      	ldreq	r3, [r1, #20]
 800760a:	1bf6      	subs	r6, r6, r7
 800760c:	600f      	str	r7, [r1, #0]
 800760e:	608b      	str	r3, [r1, #8]
 8007610:	2e00      	cmp	r6, #0
 8007612:	ddeb      	ble.n	80075ec <__sflush_r+0xac>
 8007614:	4633      	mov	r3, r6
 8007616:	463a      	mov	r2, r7
 8007618:	4628      	mov	r0, r5
 800761a:	6a21      	ldr	r1, [r4, #32]
 800761c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007620:	47e0      	blx	ip
 8007622:	2800      	cmp	r0, #0
 8007624:	dc07      	bgt.n	8007636 <__sflush_r+0xf6>
 8007626:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800762a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800762e:	f04f 30ff 	mov.w	r0, #4294967295
 8007632:	81a3      	strh	r3, [r4, #12]
 8007634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007636:	4407      	add	r7, r0
 8007638:	1a36      	subs	r6, r6, r0
 800763a:	e7e9      	b.n	8007610 <__sflush_r+0xd0>
 800763c:	20400001 	.word	0x20400001

08007640 <_fflush_r>:
 8007640:	b538      	push	{r3, r4, r5, lr}
 8007642:	690b      	ldr	r3, [r1, #16]
 8007644:	4605      	mov	r5, r0
 8007646:	460c      	mov	r4, r1
 8007648:	b913      	cbnz	r3, 8007650 <_fflush_r+0x10>
 800764a:	2500      	movs	r5, #0
 800764c:	4628      	mov	r0, r5
 800764e:	bd38      	pop	{r3, r4, r5, pc}
 8007650:	b118      	cbz	r0, 800765a <_fflush_r+0x1a>
 8007652:	6a03      	ldr	r3, [r0, #32]
 8007654:	b90b      	cbnz	r3, 800765a <_fflush_r+0x1a>
 8007656:	f7fe fb97 	bl	8005d88 <__sinit>
 800765a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d0f3      	beq.n	800764a <_fflush_r+0xa>
 8007662:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007664:	07d0      	lsls	r0, r2, #31
 8007666:	d404      	bmi.n	8007672 <_fflush_r+0x32>
 8007668:	0599      	lsls	r1, r3, #22
 800766a:	d402      	bmi.n	8007672 <_fflush_r+0x32>
 800766c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800766e:	f7fe fc82 	bl	8005f76 <__retarget_lock_acquire_recursive>
 8007672:	4628      	mov	r0, r5
 8007674:	4621      	mov	r1, r4
 8007676:	f7ff ff63 	bl	8007540 <__sflush_r>
 800767a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800767c:	4605      	mov	r5, r0
 800767e:	07da      	lsls	r2, r3, #31
 8007680:	d4e4      	bmi.n	800764c <_fflush_r+0xc>
 8007682:	89a3      	ldrh	r3, [r4, #12]
 8007684:	059b      	lsls	r3, r3, #22
 8007686:	d4e1      	bmi.n	800764c <_fflush_r+0xc>
 8007688:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800768a:	f7fe fc75 	bl	8005f78 <__retarget_lock_release_recursive>
 800768e:	e7dd      	b.n	800764c <_fflush_r+0xc>

08007690 <_sbrk_r>:
 8007690:	b538      	push	{r3, r4, r5, lr}
 8007692:	2300      	movs	r3, #0
 8007694:	4d05      	ldr	r5, [pc, #20]	@ (80076ac <_sbrk_r+0x1c>)
 8007696:	4604      	mov	r4, r0
 8007698:	4608      	mov	r0, r1
 800769a:	602b      	str	r3, [r5, #0]
 800769c:	f7f9 fda2 	bl	80011e4 <_sbrk>
 80076a0:	1c43      	adds	r3, r0, #1
 80076a2:	d102      	bne.n	80076aa <_sbrk_r+0x1a>
 80076a4:	682b      	ldr	r3, [r5, #0]
 80076a6:	b103      	cbz	r3, 80076aa <_sbrk_r+0x1a>
 80076a8:	6023      	str	r3, [r4, #0]
 80076aa:	bd38      	pop	{r3, r4, r5, pc}
 80076ac:	20000590 	.word	0x20000590

080076b0 <memcpy>:
 80076b0:	440a      	add	r2, r1
 80076b2:	4291      	cmp	r1, r2
 80076b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80076b8:	d100      	bne.n	80076bc <memcpy+0xc>
 80076ba:	4770      	bx	lr
 80076bc:	b510      	push	{r4, lr}
 80076be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076c2:	4291      	cmp	r1, r2
 80076c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076c8:	d1f9      	bne.n	80076be <memcpy+0xe>
 80076ca:	bd10      	pop	{r4, pc}

080076cc <__assert_func>:
 80076cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80076ce:	4614      	mov	r4, r2
 80076d0:	461a      	mov	r2, r3
 80076d2:	4b09      	ldr	r3, [pc, #36]	@ (80076f8 <__assert_func+0x2c>)
 80076d4:	4605      	mov	r5, r0
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	68d8      	ldr	r0, [r3, #12]
 80076da:	b14c      	cbz	r4, 80076f0 <__assert_func+0x24>
 80076dc:	4b07      	ldr	r3, [pc, #28]	@ (80076fc <__assert_func+0x30>)
 80076de:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80076e2:	9100      	str	r1, [sp, #0]
 80076e4:	462b      	mov	r3, r5
 80076e6:	4906      	ldr	r1, [pc, #24]	@ (8007700 <__assert_func+0x34>)
 80076e8:	f000 f842 	bl	8007770 <fiprintf>
 80076ec:	f000 f852 	bl	8007794 <abort>
 80076f0:	4b04      	ldr	r3, [pc, #16]	@ (8007704 <__assert_func+0x38>)
 80076f2:	461c      	mov	r4, r3
 80076f4:	e7f3      	b.n	80076de <__assert_func+0x12>
 80076f6:	bf00      	nop
 80076f8:	20000028 	.word	0x20000028
 80076fc:	08007fce 	.word	0x08007fce
 8007700:	08007fdb 	.word	0x08007fdb
 8007704:	08008009 	.word	0x08008009

08007708 <_calloc_r>:
 8007708:	b570      	push	{r4, r5, r6, lr}
 800770a:	fba1 5402 	umull	r5, r4, r1, r2
 800770e:	b934      	cbnz	r4, 800771e <_calloc_r+0x16>
 8007710:	4629      	mov	r1, r5
 8007712:	f7ff fb0f 	bl	8006d34 <_malloc_r>
 8007716:	4606      	mov	r6, r0
 8007718:	b928      	cbnz	r0, 8007726 <_calloc_r+0x1e>
 800771a:	4630      	mov	r0, r6
 800771c:	bd70      	pop	{r4, r5, r6, pc}
 800771e:	220c      	movs	r2, #12
 8007720:	2600      	movs	r6, #0
 8007722:	6002      	str	r2, [r0, #0]
 8007724:	e7f9      	b.n	800771a <_calloc_r+0x12>
 8007726:	462a      	mov	r2, r5
 8007728:	4621      	mov	r1, r4
 800772a:	f7fe fba6 	bl	8005e7a <memset>
 800772e:	e7f4      	b.n	800771a <_calloc_r+0x12>

08007730 <__ascii_mbtowc>:
 8007730:	b082      	sub	sp, #8
 8007732:	b901      	cbnz	r1, 8007736 <__ascii_mbtowc+0x6>
 8007734:	a901      	add	r1, sp, #4
 8007736:	b142      	cbz	r2, 800774a <__ascii_mbtowc+0x1a>
 8007738:	b14b      	cbz	r3, 800774e <__ascii_mbtowc+0x1e>
 800773a:	7813      	ldrb	r3, [r2, #0]
 800773c:	600b      	str	r3, [r1, #0]
 800773e:	7812      	ldrb	r2, [r2, #0]
 8007740:	1e10      	subs	r0, r2, #0
 8007742:	bf18      	it	ne
 8007744:	2001      	movne	r0, #1
 8007746:	b002      	add	sp, #8
 8007748:	4770      	bx	lr
 800774a:	4610      	mov	r0, r2
 800774c:	e7fb      	b.n	8007746 <__ascii_mbtowc+0x16>
 800774e:	f06f 0001 	mvn.w	r0, #1
 8007752:	e7f8      	b.n	8007746 <__ascii_mbtowc+0x16>

08007754 <__ascii_wctomb>:
 8007754:	4603      	mov	r3, r0
 8007756:	4608      	mov	r0, r1
 8007758:	b141      	cbz	r1, 800776c <__ascii_wctomb+0x18>
 800775a:	2aff      	cmp	r2, #255	@ 0xff
 800775c:	d904      	bls.n	8007768 <__ascii_wctomb+0x14>
 800775e:	228a      	movs	r2, #138	@ 0x8a
 8007760:	f04f 30ff 	mov.w	r0, #4294967295
 8007764:	601a      	str	r2, [r3, #0]
 8007766:	4770      	bx	lr
 8007768:	2001      	movs	r0, #1
 800776a:	700a      	strb	r2, [r1, #0]
 800776c:	4770      	bx	lr
	...

08007770 <fiprintf>:
 8007770:	b40e      	push	{r1, r2, r3}
 8007772:	b503      	push	{r0, r1, lr}
 8007774:	4601      	mov	r1, r0
 8007776:	ab03      	add	r3, sp, #12
 8007778:	4805      	ldr	r0, [pc, #20]	@ (8007790 <fiprintf+0x20>)
 800777a:	f853 2b04 	ldr.w	r2, [r3], #4
 800777e:	6800      	ldr	r0, [r0, #0]
 8007780:	9301      	str	r3, [sp, #4]
 8007782:	f000 f835 	bl	80077f0 <_vfiprintf_r>
 8007786:	b002      	add	sp, #8
 8007788:	f85d eb04 	ldr.w	lr, [sp], #4
 800778c:	b003      	add	sp, #12
 800778e:	4770      	bx	lr
 8007790:	20000028 	.word	0x20000028

08007794 <abort>:
 8007794:	2006      	movs	r0, #6
 8007796:	b508      	push	{r3, lr}
 8007798:	f000 f9fe 	bl	8007b98 <raise>
 800779c:	2001      	movs	r0, #1
 800779e:	f7f9 fcac 	bl	80010fa <_exit>

080077a2 <__sfputc_r>:
 80077a2:	6893      	ldr	r3, [r2, #8]
 80077a4:	b410      	push	{r4}
 80077a6:	3b01      	subs	r3, #1
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	6093      	str	r3, [r2, #8]
 80077ac:	da07      	bge.n	80077be <__sfputc_r+0x1c>
 80077ae:	6994      	ldr	r4, [r2, #24]
 80077b0:	42a3      	cmp	r3, r4
 80077b2:	db01      	blt.n	80077b8 <__sfputc_r+0x16>
 80077b4:	290a      	cmp	r1, #10
 80077b6:	d102      	bne.n	80077be <__sfputc_r+0x1c>
 80077b8:	bc10      	pop	{r4}
 80077ba:	f000 b931 	b.w	8007a20 <__swbuf_r>
 80077be:	6813      	ldr	r3, [r2, #0]
 80077c0:	1c58      	adds	r0, r3, #1
 80077c2:	6010      	str	r0, [r2, #0]
 80077c4:	7019      	strb	r1, [r3, #0]
 80077c6:	4608      	mov	r0, r1
 80077c8:	bc10      	pop	{r4}
 80077ca:	4770      	bx	lr

080077cc <__sfputs_r>:
 80077cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ce:	4606      	mov	r6, r0
 80077d0:	460f      	mov	r7, r1
 80077d2:	4614      	mov	r4, r2
 80077d4:	18d5      	adds	r5, r2, r3
 80077d6:	42ac      	cmp	r4, r5
 80077d8:	d101      	bne.n	80077de <__sfputs_r+0x12>
 80077da:	2000      	movs	r0, #0
 80077dc:	e007      	b.n	80077ee <__sfputs_r+0x22>
 80077de:	463a      	mov	r2, r7
 80077e0:	4630      	mov	r0, r6
 80077e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077e6:	f7ff ffdc 	bl	80077a2 <__sfputc_r>
 80077ea:	1c43      	adds	r3, r0, #1
 80077ec:	d1f3      	bne.n	80077d6 <__sfputs_r+0xa>
 80077ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080077f0 <_vfiprintf_r>:
 80077f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077f4:	460d      	mov	r5, r1
 80077f6:	4614      	mov	r4, r2
 80077f8:	4698      	mov	r8, r3
 80077fa:	4606      	mov	r6, r0
 80077fc:	b09d      	sub	sp, #116	@ 0x74
 80077fe:	b118      	cbz	r0, 8007808 <_vfiprintf_r+0x18>
 8007800:	6a03      	ldr	r3, [r0, #32]
 8007802:	b90b      	cbnz	r3, 8007808 <_vfiprintf_r+0x18>
 8007804:	f7fe fac0 	bl	8005d88 <__sinit>
 8007808:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800780a:	07d9      	lsls	r1, r3, #31
 800780c:	d405      	bmi.n	800781a <_vfiprintf_r+0x2a>
 800780e:	89ab      	ldrh	r3, [r5, #12]
 8007810:	059a      	lsls	r2, r3, #22
 8007812:	d402      	bmi.n	800781a <_vfiprintf_r+0x2a>
 8007814:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007816:	f7fe fbae 	bl	8005f76 <__retarget_lock_acquire_recursive>
 800781a:	89ab      	ldrh	r3, [r5, #12]
 800781c:	071b      	lsls	r3, r3, #28
 800781e:	d501      	bpl.n	8007824 <_vfiprintf_r+0x34>
 8007820:	692b      	ldr	r3, [r5, #16]
 8007822:	b99b      	cbnz	r3, 800784c <_vfiprintf_r+0x5c>
 8007824:	4629      	mov	r1, r5
 8007826:	4630      	mov	r0, r6
 8007828:	f000 f938 	bl	8007a9c <__swsetup_r>
 800782c:	b170      	cbz	r0, 800784c <_vfiprintf_r+0x5c>
 800782e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007830:	07dc      	lsls	r4, r3, #31
 8007832:	d504      	bpl.n	800783e <_vfiprintf_r+0x4e>
 8007834:	f04f 30ff 	mov.w	r0, #4294967295
 8007838:	b01d      	add	sp, #116	@ 0x74
 800783a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800783e:	89ab      	ldrh	r3, [r5, #12]
 8007840:	0598      	lsls	r0, r3, #22
 8007842:	d4f7      	bmi.n	8007834 <_vfiprintf_r+0x44>
 8007844:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007846:	f7fe fb97 	bl	8005f78 <__retarget_lock_release_recursive>
 800784a:	e7f3      	b.n	8007834 <_vfiprintf_r+0x44>
 800784c:	2300      	movs	r3, #0
 800784e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007850:	2320      	movs	r3, #32
 8007852:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007856:	2330      	movs	r3, #48	@ 0x30
 8007858:	f04f 0901 	mov.w	r9, #1
 800785c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007860:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007a0c <_vfiprintf_r+0x21c>
 8007864:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007868:	4623      	mov	r3, r4
 800786a:	469a      	mov	sl, r3
 800786c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007870:	b10a      	cbz	r2, 8007876 <_vfiprintf_r+0x86>
 8007872:	2a25      	cmp	r2, #37	@ 0x25
 8007874:	d1f9      	bne.n	800786a <_vfiprintf_r+0x7a>
 8007876:	ebba 0b04 	subs.w	fp, sl, r4
 800787a:	d00b      	beq.n	8007894 <_vfiprintf_r+0xa4>
 800787c:	465b      	mov	r3, fp
 800787e:	4622      	mov	r2, r4
 8007880:	4629      	mov	r1, r5
 8007882:	4630      	mov	r0, r6
 8007884:	f7ff ffa2 	bl	80077cc <__sfputs_r>
 8007888:	3001      	adds	r0, #1
 800788a:	f000 80a7 	beq.w	80079dc <_vfiprintf_r+0x1ec>
 800788e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007890:	445a      	add	r2, fp
 8007892:	9209      	str	r2, [sp, #36]	@ 0x24
 8007894:	f89a 3000 	ldrb.w	r3, [sl]
 8007898:	2b00      	cmp	r3, #0
 800789a:	f000 809f 	beq.w	80079dc <_vfiprintf_r+0x1ec>
 800789e:	2300      	movs	r3, #0
 80078a0:	f04f 32ff 	mov.w	r2, #4294967295
 80078a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078a8:	f10a 0a01 	add.w	sl, sl, #1
 80078ac:	9304      	str	r3, [sp, #16]
 80078ae:	9307      	str	r3, [sp, #28]
 80078b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80078b4:	931a      	str	r3, [sp, #104]	@ 0x68
 80078b6:	4654      	mov	r4, sl
 80078b8:	2205      	movs	r2, #5
 80078ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078be:	4853      	ldr	r0, [pc, #332]	@ (8007a0c <_vfiprintf_r+0x21c>)
 80078c0:	f7fe fb5b 	bl	8005f7a <memchr>
 80078c4:	9a04      	ldr	r2, [sp, #16]
 80078c6:	b9d8      	cbnz	r0, 8007900 <_vfiprintf_r+0x110>
 80078c8:	06d1      	lsls	r1, r2, #27
 80078ca:	bf44      	itt	mi
 80078cc:	2320      	movmi	r3, #32
 80078ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80078d2:	0713      	lsls	r3, r2, #28
 80078d4:	bf44      	itt	mi
 80078d6:	232b      	movmi	r3, #43	@ 0x2b
 80078d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80078dc:	f89a 3000 	ldrb.w	r3, [sl]
 80078e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80078e2:	d015      	beq.n	8007910 <_vfiprintf_r+0x120>
 80078e4:	4654      	mov	r4, sl
 80078e6:	2000      	movs	r0, #0
 80078e8:	f04f 0c0a 	mov.w	ip, #10
 80078ec:	9a07      	ldr	r2, [sp, #28]
 80078ee:	4621      	mov	r1, r4
 80078f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80078f4:	3b30      	subs	r3, #48	@ 0x30
 80078f6:	2b09      	cmp	r3, #9
 80078f8:	d94b      	bls.n	8007992 <_vfiprintf_r+0x1a2>
 80078fa:	b1b0      	cbz	r0, 800792a <_vfiprintf_r+0x13a>
 80078fc:	9207      	str	r2, [sp, #28]
 80078fe:	e014      	b.n	800792a <_vfiprintf_r+0x13a>
 8007900:	eba0 0308 	sub.w	r3, r0, r8
 8007904:	fa09 f303 	lsl.w	r3, r9, r3
 8007908:	4313      	orrs	r3, r2
 800790a:	46a2      	mov	sl, r4
 800790c:	9304      	str	r3, [sp, #16]
 800790e:	e7d2      	b.n	80078b6 <_vfiprintf_r+0xc6>
 8007910:	9b03      	ldr	r3, [sp, #12]
 8007912:	1d19      	adds	r1, r3, #4
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	9103      	str	r1, [sp, #12]
 8007918:	2b00      	cmp	r3, #0
 800791a:	bfbb      	ittet	lt
 800791c:	425b      	neglt	r3, r3
 800791e:	f042 0202 	orrlt.w	r2, r2, #2
 8007922:	9307      	strge	r3, [sp, #28]
 8007924:	9307      	strlt	r3, [sp, #28]
 8007926:	bfb8      	it	lt
 8007928:	9204      	strlt	r2, [sp, #16]
 800792a:	7823      	ldrb	r3, [r4, #0]
 800792c:	2b2e      	cmp	r3, #46	@ 0x2e
 800792e:	d10a      	bne.n	8007946 <_vfiprintf_r+0x156>
 8007930:	7863      	ldrb	r3, [r4, #1]
 8007932:	2b2a      	cmp	r3, #42	@ 0x2a
 8007934:	d132      	bne.n	800799c <_vfiprintf_r+0x1ac>
 8007936:	9b03      	ldr	r3, [sp, #12]
 8007938:	3402      	adds	r4, #2
 800793a:	1d1a      	adds	r2, r3, #4
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	9203      	str	r2, [sp, #12]
 8007940:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007944:	9305      	str	r3, [sp, #20]
 8007946:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007a10 <_vfiprintf_r+0x220>
 800794a:	2203      	movs	r2, #3
 800794c:	4650      	mov	r0, sl
 800794e:	7821      	ldrb	r1, [r4, #0]
 8007950:	f7fe fb13 	bl	8005f7a <memchr>
 8007954:	b138      	cbz	r0, 8007966 <_vfiprintf_r+0x176>
 8007956:	2240      	movs	r2, #64	@ 0x40
 8007958:	9b04      	ldr	r3, [sp, #16]
 800795a:	eba0 000a 	sub.w	r0, r0, sl
 800795e:	4082      	lsls	r2, r0
 8007960:	4313      	orrs	r3, r2
 8007962:	3401      	adds	r4, #1
 8007964:	9304      	str	r3, [sp, #16]
 8007966:	f814 1b01 	ldrb.w	r1, [r4], #1
 800796a:	2206      	movs	r2, #6
 800796c:	4829      	ldr	r0, [pc, #164]	@ (8007a14 <_vfiprintf_r+0x224>)
 800796e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007972:	f7fe fb02 	bl	8005f7a <memchr>
 8007976:	2800      	cmp	r0, #0
 8007978:	d03f      	beq.n	80079fa <_vfiprintf_r+0x20a>
 800797a:	4b27      	ldr	r3, [pc, #156]	@ (8007a18 <_vfiprintf_r+0x228>)
 800797c:	bb1b      	cbnz	r3, 80079c6 <_vfiprintf_r+0x1d6>
 800797e:	9b03      	ldr	r3, [sp, #12]
 8007980:	3307      	adds	r3, #7
 8007982:	f023 0307 	bic.w	r3, r3, #7
 8007986:	3308      	adds	r3, #8
 8007988:	9303      	str	r3, [sp, #12]
 800798a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800798c:	443b      	add	r3, r7
 800798e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007990:	e76a      	b.n	8007868 <_vfiprintf_r+0x78>
 8007992:	460c      	mov	r4, r1
 8007994:	2001      	movs	r0, #1
 8007996:	fb0c 3202 	mla	r2, ip, r2, r3
 800799a:	e7a8      	b.n	80078ee <_vfiprintf_r+0xfe>
 800799c:	2300      	movs	r3, #0
 800799e:	f04f 0c0a 	mov.w	ip, #10
 80079a2:	4619      	mov	r1, r3
 80079a4:	3401      	adds	r4, #1
 80079a6:	9305      	str	r3, [sp, #20]
 80079a8:	4620      	mov	r0, r4
 80079aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079ae:	3a30      	subs	r2, #48	@ 0x30
 80079b0:	2a09      	cmp	r2, #9
 80079b2:	d903      	bls.n	80079bc <_vfiprintf_r+0x1cc>
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d0c6      	beq.n	8007946 <_vfiprintf_r+0x156>
 80079b8:	9105      	str	r1, [sp, #20]
 80079ba:	e7c4      	b.n	8007946 <_vfiprintf_r+0x156>
 80079bc:	4604      	mov	r4, r0
 80079be:	2301      	movs	r3, #1
 80079c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80079c4:	e7f0      	b.n	80079a8 <_vfiprintf_r+0x1b8>
 80079c6:	ab03      	add	r3, sp, #12
 80079c8:	9300      	str	r3, [sp, #0]
 80079ca:	462a      	mov	r2, r5
 80079cc:	4630      	mov	r0, r6
 80079ce:	4b13      	ldr	r3, [pc, #76]	@ (8007a1c <_vfiprintf_r+0x22c>)
 80079d0:	a904      	add	r1, sp, #16
 80079d2:	f7fd fd91 	bl	80054f8 <_printf_float>
 80079d6:	4607      	mov	r7, r0
 80079d8:	1c78      	adds	r0, r7, #1
 80079da:	d1d6      	bne.n	800798a <_vfiprintf_r+0x19a>
 80079dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80079de:	07d9      	lsls	r1, r3, #31
 80079e0:	d405      	bmi.n	80079ee <_vfiprintf_r+0x1fe>
 80079e2:	89ab      	ldrh	r3, [r5, #12]
 80079e4:	059a      	lsls	r2, r3, #22
 80079e6:	d402      	bmi.n	80079ee <_vfiprintf_r+0x1fe>
 80079e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80079ea:	f7fe fac5 	bl	8005f78 <__retarget_lock_release_recursive>
 80079ee:	89ab      	ldrh	r3, [r5, #12]
 80079f0:	065b      	lsls	r3, r3, #25
 80079f2:	f53f af1f 	bmi.w	8007834 <_vfiprintf_r+0x44>
 80079f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80079f8:	e71e      	b.n	8007838 <_vfiprintf_r+0x48>
 80079fa:	ab03      	add	r3, sp, #12
 80079fc:	9300      	str	r3, [sp, #0]
 80079fe:	462a      	mov	r2, r5
 8007a00:	4630      	mov	r0, r6
 8007a02:	4b06      	ldr	r3, [pc, #24]	@ (8007a1c <_vfiprintf_r+0x22c>)
 8007a04:	a904      	add	r1, sp, #16
 8007a06:	f7fe f815 	bl	8005a34 <_printf_i>
 8007a0a:	e7e4      	b.n	80079d6 <_vfiprintf_r+0x1e6>
 8007a0c:	0800800a 	.word	0x0800800a
 8007a10:	08008010 	.word	0x08008010
 8007a14:	08008014 	.word	0x08008014
 8007a18:	080054f9 	.word	0x080054f9
 8007a1c:	080077cd 	.word	0x080077cd

08007a20 <__swbuf_r>:
 8007a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a22:	460e      	mov	r6, r1
 8007a24:	4614      	mov	r4, r2
 8007a26:	4605      	mov	r5, r0
 8007a28:	b118      	cbz	r0, 8007a32 <__swbuf_r+0x12>
 8007a2a:	6a03      	ldr	r3, [r0, #32]
 8007a2c:	b90b      	cbnz	r3, 8007a32 <__swbuf_r+0x12>
 8007a2e:	f7fe f9ab 	bl	8005d88 <__sinit>
 8007a32:	69a3      	ldr	r3, [r4, #24]
 8007a34:	60a3      	str	r3, [r4, #8]
 8007a36:	89a3      	ldrh	r3, [r4, #12]
 8007a38:	071a      	lsls	r2, r3, #28
 8007a3a:	d501      	bpl.n	8007a40 <__swbuf_r+0x20>
 8007a3c:	6923      	ldr	r3, [r4, #16]
 8007a3e:	b943      	cbnz	r3, 8007a52 <__swbuf_r+0x32>
 8007a40:	4621      	mov	r1, r4
 8007a42:	4628      	mov	r0, r5
 8007a44:	f000 f82a 	bl	8007a9c <__swsetup_r>
 8007a48:	b118      	cbz	r0, 8007a52 <__swbuf_r+0x32>
 8007a4a:	f04f 37ff 	mov.w	r7, #4294967295
 8007a4e:	4638      	mov	r0, r7
 8007a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a52:	6823      	ldr	r3, [r4, #0]
 8007a54:	6922      	ldr	r2, [r4, #16]
 8007a56:	b2f6      	uxtb	r6, r6
 8007a58:	1a98      	subs	r0, r3, r2
 8007a5a:	6963      	ldr	r3, [r4, #20]
 8007a5c:	4637      	mov	r7, r6
 8007a5e:	4283      	cmp	r3, r0
 8007a60:	dc05      	bgt.n	8007a6e <__swbuf_r+0x4e>
 8007a62:	4621      	mov	r1, r4
 8007a64:	4628      	mov	r0, r5
 8007a66:	f7ff fdeb 	bl	8007640 <_fflush_r>
 8007a6a:	2800      	cmp	r0, #0
 8007a6c:	d1ed      	bne.n	8007a4a <__swbuf_r+0x2a>
 8007a6e:	68a3      	ldr	r3, [r4, #8]
 8007a70:	3b01      	subs	r3, #1
 8007a72:	60a3      	str	r3, [r4, #8]
 8007a74:	6823      	ldr	r3, [r4, #0]
 8007a76:	1c5a      	adds	r2, r3, #1
 8007a78:	6022      	str	r2, [r4, #0]
 8007a7a:	701e      	strb	r6, [r3, #0]
 8007a7c:	6962      	ldr	r2, [r4, #20]
 8007a7e:	1c43      	adds	r3, r0, #1
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d004      	beq.n	8007a8e <__swbuf_r+0x6e>
 8007a84:	89a3      	ldrh	r3, [r4, #12]
 8007a86:	07db      	lsls	r3, r3, #31
 8007a88:	d5e1      	bpl.n	8007a4e <__swbuf_r+0x2e>
 8007a8a:	2e0a      	cmp	r6, #10
 8007a8c:	d1df      	bne.n	8007a4e <__swbuf_r+0x2e>
 8007a8e:	4621      	mov	r1, r4
 8007a90:	4628      	mov	r0, r5
 8007a92:	f7ff fdd5 	bl	8007640 <_fflush_r>
 8007a96:	2800      	cmp	r0, #0
 8007a98:	d0d9      	beq.n	8007a4e <__swbuf_r+0x2e>
 8007a9a:	e7d6      	b.n	8007a4a <__swbuf_r+0x2a>

08007a9c <__swsetup_r>:
 8007a9c:	b538      	push	{r3, r4, r5, lr}
 8007a9e:	4b29      	ldr	r3, [pc, #164]	@ (8007b44 <__swsetup_r+0xa8>)
 8007aa0:	4605      	mov	r5, r0
 8007aa2:	6818      	ldr	r0, [r3, #0]
 8007aa4:	460c      	mov	r4, r1
 8007aa6:	b118      	cbz	r0, 8007ab0 <__swsetup_r+0x14>
 8007aa8:	6a03      	ldr	r3, [r0, #32]
 8007aaa:	b90b      	cbnz	r3, 8007ab0 <__swsetup_r+0x14>
 8007aac:	f7fe f96c 	bl	8005d88 <__sinit>
 8007ab0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ab4:	0719      	lsls	r1, r3, #28
 8007ab6:	d422      	bmi.n	8007afe <__swsetup_r+0x62>
 8007ab8:	06da      	lsls	r2, r3, #27
 8007aba:	d407      	bmi.n	8007acc <__swsetup_r+0x30>
 8007abc:	2209      	movs	r2, #9
 8007abe:	602a      	str	r2, [r5, #0]
 8007ac0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ac8:	81a3      	strh	r3, [r4, #12]
 8007aca:	e033      	b.n	8007b34 <__swsetup_r+0x98>
 8007acc:	0758      	lsls	r0, r3, #29
 8007ace:	d512      	bpl.n	8007af6 <__swsetup_r+0x5a>
 8007ad0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007ad2:	b141      	cbz	r1, 8007ae6 <__swsetup_r+0x4a>
 8007ad4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007ad8:	4299      	cmp	r1, r3
 8007ada:	d002      	beq.n	8007ae2 <__swsetup_r+0x46>
 8007adc:	4628      	mov	r0, r5
 8007ade:	f7ff f8b7 	bl	8006c50 <_free_r>
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	6363      	str	r3, [r4, #52]	@ 0x34
 8007ae6:	89a3      	ldrh	r3, [r4, #12]
 8007ae8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007aec:	81a3      	strh	r3, [r4, #12]
 8007aee:	2300      	movs	r3, #0
 8007af0:	6063      	str	r3, [r4, #4]
 8007af2:	6923      	ldr	r3, [r4, #16]
 8007af4:	6023      	str	r3, [r4, #0]
 8007af6:	89a3      	ldrh	r3, [r4, #12]
 8007af8:	f043 0308 	orr.w	r3, r3, #8
 8007afc:	81a3      	strh	r3, [r4, #12]
 8007afe:	6923      	ldr	r3, [r4, #16]
 8007b00:	b94b      	cbnz	r3, 8007b16 <__swsetup_r+0x7a>
 8007b02:	89a3      	ldrh	r3, [r4, #12]
 8007b04:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007b08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b0c:	d003      	beq.n	8007b16 <__swsetup_r+0x7a>
 8007b0e:	4621      	mov	r1, r4
 8007b10:	4628      	mov	r0, r5
 8007b12:	f000 f882 	bl	8007c1a <__smakebuf_r>
 8007b16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b1a:	f013 0201 	ands.w	r2, r3, #1
 8007b1e:	d00a      	beq.n	8007b36 <__swsetup_r+0x9a>
 8007b20:	2200      	movs	r2, #0
 8007b22:	60a2      	str	r2, [r4, #8]
 8007b24:	6962      	ldr	r2, [r4, #20]
 8007b26:	4252      	negs	r2, r2
 8007b28:	61a2      	str	r2, [r4, #24]
 8007b2a:	6922      	ldr	r2, [r4, #16]
 8007b2c:	b942      	cbnz	r2, 8007b40 <__swsetup_r+0xa4>
 8007b2e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007b32:	d1c5      	bne.n	8007ac0 <__swsetup_r+0x24>
 8007b34:	bd38      	pop	{r3, r4, r5, pc}
 8007b36:	0799      	lsls	r1, r3, #30
 8007b38:	bf58      	it	pl
 8007b3a:	6962      	ldrpl	r2, [r4, #20]
 8007b3c:	60a2      	str	r2, [r4, #8]
 8007b3e:	e7f4      	b.n	8007b2a <__swsetup_r+0x8e>
 8007b40:	2000      	movs	r0, #0
 8007b42:	e7f7      	b.n	8007b34 <__swsetup_r+0x98>
 8007b44:	20000028 	.word	0x20000028

08007b48 <_raise_r>:
 8007b48:	291f      	cmp	r1, #31
 8007b4a:	b538      	push	{r3, r4, r5, lr}
 8007b4c:	4605      	mov	r5, r0
 8007b4e:	460c      	mov	r4, r1
 8007b50:	d904      	bls.n	8007b5c <_raise_r+0x14>
 8007b52:	2316      	movs	r3, #22
 8007b54:	6003      	str	r3, [r0, #0]
 8007b56:	f04f 30ff 	mov.w	r0, #4294967295
 8007b5a:	bd38      	pop	{r3, r4, r5, pc}
 8007b5c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007b5e:	b112      	cbz	r2, 8007b66 <_raise_r+0x1e>
 8007b60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007b64:	b94b      	cbnz	r3, 8007b7a <_raise_r+0x32>
 8007b66:	4628      	mov	r0, r5
 8007b68:	f000 f830 	bl	8007bcc <_getpid_r>
 8007b6c:	4622      	mov	r2, r4
 8007b6e:	4601      	mov	r1, r0
 8007b70:	4628      	mov	r0, r5
 8007b72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b76:	f000 b817 	b.w	8007ba8 <_kill_r>
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	d00a      	beq.n	8007b94 <_raise_r+0x4c>
 8007b7e:	1c59      	adds	r1, r3, #1
 8007b80:	d103      	bne.n	8007b8a <_raise_r+0x42>
 8007b82:	2316      	movs	r3, #22
 8007b84:	6003      	str	r3, [r0, #0]
 8007b86:	2001      	movs	r0, #1
 8007b88:	e7e7      	b.n	8007b5a <_raise_r+0x12>
 8007b8a:	2100      	movs	r1, #0
 8007b8c:	4620      	mov	r0, r4
 8007b8e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007b92:	4798      	blx	r3
 8007b94:	2000      	movs	r0, #0
 8007b96:	e7e0      	b.n	8007b5a <_raise_r+0x12>

08007b98 <raise>:
 8007b98:	4b02      	ldr	r3, [pc, #8]	@ (8007ba4 <raise+0xc>)
 8007b9a:	4601      	mov	r1, r0
 8007b9c:	6818      	ldr	r0, [r3, #0]
 8007b9e:	f7ff bfd3 	b.w	8007b48 <_raise_r>
 8007ba2:	bf00      	nop
 8007ba4:	20000028 	.word	0x20000028

08007ba8 <_kill_r>:
 8007ba8:	b538      	push	{r3, r4, r5, lr}
 8007baa:	2300      	movs	r3, #0
 8007bac:	4d06      	ldr	r5, [pc, #24]	@ (8007bc8 <_kill_r+0x20>)
 8007bae:	4604      	mov	r4, r0
 8007bb0:	4608      	mov	r0, r1
 8007bb2:	4611      	mov	r1, r2
 8007bb4:	602b      	str	r3, [r5, #0]
 8007bb6:	f7f9 fa90 	bl	80010da <_kill>
 8007bba:	1c43      	adds	r3, r0, #1
 8007bbc:	d102      	bne.n	8007bc4 <_kill_r+0x1c>
 8007bbe:	682b      	ldr	r3, [r5, #0]
 8007bc0:	b103      	cbz	r3, 8007bc4 <_kill_r+0x1c>
 8007bc2:	6023      	str	r3, [r4, #0]
 8007bc4:	bd38      	pop	{r3, r4, r5, pc}
 8007bc6:	bf00      	nop
 8007bc8:	20000590 	.word	0x20000590

08007bcc <_getpid_r>:
 8007bcc:	f7f9 ba7e 	b.w	80010cc <_getpid>

08007bd0 <__swhatbuf_r>:
 8007bd0:	b570      	push	{r4, r5, r6, lr}
 8007bd2:	460c      	mov	r4, r1
 8007bd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bd8:	4615      	mov	r5, r2
 8007bda:	2900      	cmp	r1, #0
 8007bdc:	461e      	mov	r6, r3
 8007bde:	b096      	sub	sp, #88	@ 0x58
 8007be0:	da0c      	bge.n	8007bfc <__swhatbuf_r+0x2c>
 8007be2:	89a3      	ldrh	r3, [r4, #12]
 8007be4:	2100      	movs	r1, #0
 8007be6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007bea:	bf14      	ite	ne
 8007bec:	2340      	movne	r3, #64	@ 0x40
 8007bee:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007bf2:	2000      	movs	r0, #0
 8007bf4:	6031      	str	r1, [r6, #0]
 8007bf6:	602b      	str	r3, [r5, #0]
 8007bf8:	b016      	add	sp, #88	@ 0x58
 8007bfa:	bd70      	pop	{r4, r5, r6, pc}
 8007bfc:	466a      	mov	r2, sp
 8007bfe:	f000 f849 	bl	8007c94 <_fstat_r>
 8007c02:	2800      	cmp	r0, #0
 8007c04:	dbed      	blt.n	8007be2 <__swhatbuf_r+0x12>
 8007c06:	9901      	ldr	r1, [sp, #4]
 8007c08:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007c0c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007c10:	4259      	negs	r1, r3
 8007c12:	4159      	adcs	r1, r3
 8007c14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007c18:	e7eb      	b.n	8007bf2 <__swhatbuf_r+0x22>

08007c1a <__smakebuf_r>:
 8007c1a:	898b      	ldrh	r3, [r1, #12]
 8007c1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c1e:	079d      	lsls	r5, r3, #30
 8007c20:	4606      	mov	r6, r0
 8007c22:	460c      	mov	r4, r1
 8007c24:	d507      	bpl.n	8007c36 <__smakebuf_r+0x1c>
 8007c26:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007c2a:	6023      	str	r3, [r4, #0]
 8007c2c:	6123      	str	r3, [r4, #16]
 8007c2e:	2301      	movs	r3, #1
 8007c30:	6163      	str	r3, [r4, #20]
 8007c32:	b003      	add	sp, #12
 8007c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c36:	466a      	mov	r2, sp
 8007c38:	ab01      	add	r3, sp, #4
 8007c3a:	f7ff ffc9 	bl	8007bd0 <__swhatbuf_r>
 8007c3e:	9f00      	ldr	r7, [sp, #0]
 8007c40:	4605      	mov	r5, r0
 8007c42:	4639      	mov	r1, r7
 8007c44:	4630      	mov	r0, r6
 8007c46:	f7ff f875 	bl	8006d34 <_malloc_r>
 8007c4a:	b948      	cbnz	r0, 8007c60 <__smakebuf_r+0x46>
 8007c4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c50:	059a      	lsls	r2, r3, #22
 8007c52:	d4ee      	bmi.n	8007c32 <__smakebuf_r+0x18>
 8007c54:	f023 0303 	bic.w	r3, r3, #3
 8007c58:	f043 0302 	orr.w	r3, r3, #2
 8007c5c:	81a3      	strh	r3, [r4, #12]
 8007c5e:	e7e2      	b.n	8007c26 <__smakebuf_r+0xc>
 8007c60:	89a3      	ldrh	r3, [r4, #12]
 8007c62:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007c66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c6a:	81a3      	strh	r3, [r4, #12]
 8007c6c:	9b01      	ldr	r3, [sp, #4]
 8007c6e:	6020      	str	r0, [r4, #0]
 8007c70:	b15b      	cbz	r3, 8007c8a <__smakebuf_r+0x70>
 8007c72:	4630      	mov	r0, r6
 8007c74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c78:	f000 f81e 	bl	8007cb8 <_isatty_r>
 8007c7c:	b128      	cbz	r0, 8007c8a <__smakebuf_r+0x70>
 8007c7e:	89a3      	ldrh	r3, [r4, #12]
 8007c80:	f023 0303 	bic.w	r3, r3, #3
 8007c84:	f043 0301 	orr.w	r3, r3, #1
 8007c88:	81a3      	strh	r3, [r4, #12]
 8007c8a:	89a3      	ldrh	r3, [r4, #12]
 8007c8c:	431d      	orrs	r5, r3
 8007c8e:	81a5      	strh	r5, [r4, #12]
 8007c90:	e7cf      	b.n	8007c32 <__smakebuf_r+0x18>
	...

08007c94 <_fstat_r>:
 8007c94:	b538      	push	{r3, r4, r5, lr}
 8007c96:	2300      	movs	r3, #0
 8007c98:	4d06      	ldr	r5, [pc, #24]	@ (8007cb4 <_fstat_r+0x20>)
 8007c9a:	4604      	mov	r4, r0
 8007c9c:	4608      	mov	r0, r1
 8007c9e:	4611      	mov	r1, r2
 8007ca0:	602b      	str	r3, [r5, #0]
 8007ca2:	f7f9 fa79 	bl	8001198 <_fstat>
 8007ca6:	1c43      	adds	r3, r0, #1
 8007ca8:	d102      	bne.n	8007cb0 <_fstat_r+0x1c>
 8007caa:	682b      	ldr	r3, [r5, #0]
 8007cac:	b103      	cbz	r3, 8007cb0 <_fstat_r+0x1c>
 8007cae:	6023      	str	r3, [r4, #0]
 8007cb0:	bd38      	pop	{r3, r4, r5, pc}
 8007cb2:	bf00      	nop
 8007cb4:	20000590 	.word	0x20000590

08007cb8 <_isatty_r>:
 8007cb8:	b538      	push	{r3, r4, r5, lr}
 8007cba:	2300      	movs	r3, #0
 8007cbc:	4d05      	ldr	r5, [pc, #20]	@ (8007cd4 <_isatty_r+0x1c>)
 8007cbe:	4604      	mov	r4, r0
 8007cc0:	4608      	mov	r0, r1
 8007cc2:	602b      	str	r3, [r5, #0]
 8007cc4:	f7f9 fa77 	bl	80011b6 <_isatty>
 8007cc8:	1c43      	adds	r3, r0, #1
 8007cca:	d102      	bne.n	8007cd2 <_isatty_r+0x1a>
 8007ccc:	682b      	ldr	r3, [r5, #0]
 8007cce:	b103      	cbz	r3, 8007cd2 <_isatty_r+0x1a>
 8007cd0:	6023      	str	r3, [r4, #0]
 8007cd2:	bd38      	pop	{r3, r4, r5, pc}
 8007cd4:	20000590 	.word	0x20000590

08007cd8 <_init>:
 8007cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cda:	bf00      	nop
 8007cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cde:	bc08      	pop	{r3}
 8007ce0:	469e      	mov	lr, r3
 8007ce2:	4770      	bx	lr

08007ce4 <_fini>:
 8007ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ce6:	bf00      	nop
 8007ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cea:	bc08      	pop	{r3}
 8007cec:	469e      	mov	lr, r3
 8007cee:	4770      	bx	lr
